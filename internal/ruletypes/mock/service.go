// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stacklok/minder/internal/ruletypes (interfaces: RuleTypeService)
//
// Generated by this command:
//
//	mockgen -package mockrulesvc -destination internal/ruletypes/mock/service.go github.com/stacklok/minder/internal/ruletypes RuleTypeService
//

// Package mockrulesvc is a generated GoMock package.
package mockrulesvc

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	db "github.com/stacklok/minder/internal/db"
	v1 "github.com/stacklok/minder/pkg/api/protobuf/go/minder/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockRuleTypeService is a mock of RuleTypeService interface.
type MockRuleTypeService struct {
	ctrl     *gomock.Controller
	recorder *MockRuleTypeServiceMockRecorder
}

// MockRuleTypeServiceMockRecorder is the mock recorder for MockRuleTypeService.
type MockRuleTypeServiceMockRecorder struct {
	mock *MockRuleTypeService
}

// NewMockRuleTypeService creates a new mock instance.
func NewMockRuleTypeService(ctrl *gomock.Controller) *MockRuleTypeService {
	mock := &MockRuleTypeService{ctrl: ctrl}
	mock.recorder = &MockRuleTypeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRuleTypeService) EXPECT() *MockRuleTypeServiceMockRecorder {
	return m.recorder
}

// CreateRuleType mocks base method.
func (m *MockRuleTypeService) CreateRuleType(arg0 context.Context, arg1 uuid.UUID, arg2 *db.Provider, arg3 *v1.RuleType) (*v1.RuleType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRuleType", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*v1.RuleType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRuleType indicates an expected call of CreateRuleType.
func (mr *MockRuleTypeServiceMockRecorder) CreateRuleType(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRuleType", reflect.TypeOf((*MockRuleTypeService)(nil).CreateRuleType), arg0, arg1, arg2, arg3)
}

// CreateSubscriptionRuleType mocks base method.
func (m *MockRuleTypeService) CreateSubscriptionRuleType(arg0 context.Context, arg1 uuid.UUID, arg2 *db.Provider, arg3 uuid.UUID, arg4 *v1.RuleType) (*v1.RuleType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscriptionRuleType", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*v1.RuleType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubscriptionRuleType indicates an expected call of CreateSubscriptionRuleType.
func (mr *MockRuleTypeServiceMockRecorder) CreateSubscriptionRuleType(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscriptionRuleType", reflect.TypeOf((*MockRuleTypeService)(nil).CreateSubscriptionRuleType), arg0, arg1, arg2, arg3, arg4)
}

// UpdateRuleType mocks base method.
func (m *MockRuleTypeService) UpdateRuleType(arg0 context.Context, arg1 uuid.UUID, arg2 *db.Provider, arg3 *v1.RuleType) (*v1.RuleType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRuleType", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*v1.RuleType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRuleType indicates an expected call of UpdateRuleType.
func (mr *MockRuleTypeServiceMockRecorder) UpdateRuleType(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRuleType", reflect.TypeOf((*MockRuleTypeService)(nil).UpdateRuleType), arg0, arg1, arg2, arg3)
}

// UpdateSubscriptionRuleType mocks base method.
func (m *MockRuleTypeService) UpdateSubscriptionRuleType(arg0 context.Context, arg1 uuid.UUID, arg2 *db.Provider, arg3 uuid.UUID, arg4 *v1.RuleType) (*v1.RuleType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscriptionRuleType", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*v1.RuleType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSubscriptionRuleType indicates an expected call of UpdateSubscriptionRuleType.
func (mr *MockRuleTypeServiceMockRecorder) UpdateSubscriptionRuleType(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscriptionRuleType", reflect.TypeOf((*MockRuleTypeService)(nil).UpdateSubscriptionRuleType), arg0, arg1, arg2, arg3, arg4)
}

// UpsertSubscriptionRuleType mocks base method.
func (m *MockRuleTypeService) UpsertSubscriptionRuleType(arg0 context.Context, arg1 uuid.UUID, arg2 *db.Provider, arg3 uuid.UUID, arg4 *v1.RuleType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertSubscriptionRuleType", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertSubscriptionRuleType indicates an expected call of UpsertSubscriptionRuleType.
func (mr *MockRuleTypeServiceMockRecorder) UpsertSubscriptionRuleType(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertSubscriptionRuleType", reflect.TypeOf((*MockRuleTypeService)(nil).UpsertSubscriptionRuleType), arg0, arg1, arg2, arg3, arg4)
}
