// Code generated by MockGen. DO NOT EDIT.
// Source: ./common.go
//
// Generated by this command:
//
//	mockgen -package mock_github -destination=./mock/common.go -source=./common.go
//

// Package mock_github is a generated GoMock package.
package mock_github

import (
	context "context"
	reflect "reflect"

	github "github.com/google/go-github/v63/github"
	v1 "github.com/mindersec/minder/pkg/api/protobuf/go/minder/v1"
	v10 "github.com/mindersec/minder/pkg/providers/v1"
	gomock "go.uber.org/mock/gomock"
	oauth2 "golang.org/x/oauth2"
)

// MockClientService is a mock of ClientService interface.
type MockClientService struct {
	ctrl     *gomock.Controller
	recorder *MockClientServiceMockRecorder
	isgomock struct{}
}

// MockClientServiceMockRecorder is the mock recorder for MockClientService.
type MockClientServiceMockRecorder struct {
	mock *MockClientService
}

// NewMockClientService creates a new mock instance.
func NewMockClientService(ctrl *gomock.Controller) *MockClientService {
	mock := &MockClientService{ctrl: ctrl}
	mock.recorder = &MockClientServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientService) EXPECT() *MockClientServiceMockRecorder {
	return m.recorder
}

// DeleteInstallation mocks base method.
func (m *MockClientService) DeleteInstallation(ctx context.Context, id int64, jwt string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstallation", ctx, id, jwt)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInstallation indicates an expected call of DeleteInstallation.
func (mr *MockClientServiceMockRecorder) DeleteInstallation(ctx, id, jwt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstallation", reflect.TypeOf((*MockClientService)(nil).DeleteInstallation), ctx, id, jwt)
}

// GetInstallation mocks base method.
func (m *MockClientService) GetInstallation(ctx context.Context, id int64, jwt string) (*github.Installation, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstallation", ctx, id, jwt)
	ret0, _ := ret[0].(*github.Installation)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstallation indicates an expected call of GetInstallation.
func (mr *MockClientServiceMockRecorder) GetInstallation(ctx, id, jwt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstallation", reflect.TypeOf((*MockClientService)(nil).GetInstallation), ctx, id, jwt)
}

// GetOrgMembership mocks base method.
func (m *MockClientService) GetOrgMembership(ctx context.Context, token *oauth2.Token, org string) (*github.Membership, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrgMembership", ctx, token, org)
	ret0, _ := ret[0].(*github.Membership)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOrgMembership indicates an expected call of GetOrgMembership.
func (mr *MockClientServiceMockRecorder) GetOrgMembership(ctx, token, org any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrgMembership", reflect.TypeOf((*MockClientService)(nil).GetOrgMembership), ctx, token, org)
}

// GetUserIdFromToken mocks base method.
func (m *MockClientService) GetUserIdFromToken(ctx context.Context, token *oauth2.Token) (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIdFromToken", ctx, token)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIdFromToken indicates an expected call of GetUserIdFromToken.
func (mr *MockClientServiceMockRecorder) GetUserIdFromToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIdFromToken", reflect.TypeOf((*MockClientService)(nil).GetUserIdFromToken), ctx, token)
}

// ListUserInstallations mocks base method.
func (m *MockClientService) ListUserInstallations(ctx context.Context, token *oauth2.Token) ([]*github.Installation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserInstallations", ctx, token)
	ret0, _ := ret[0].([]*github.Installation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserInstallations indicates an expected call of ListUserInstallations.
func (mr *MockClientServiceMockRecorder) ListUserInstallations(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserInstallations", reflect.TypeOf((*MockClientService)(nil).ListUserInstallations), ctx, token)
}

// MockDelegate is a mock of Delegate interface.
type MockDelegate struct {
	ctrl     *gomock.Controller
	recorder *MockDelegateMockRecorder
	isgomock struct{}
}

// MockDelegateMockRecorder is the mock recorder for MockDelegate.
type MockDelegateMockRecorder struct {
	mock *MockDelegate
}

// NewMockDelegate creates a new mock instance.
func NewMockDelegate(ctrl *gomock.Controller) *MockDelegate {
	mock := &MockDelegate{ctrl: ctrl}
	mock.recorder = &MockDelegateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDelegate) EXPECT() *MockDelegateMockRecorder {
	return m.recorder
}

// GetCredential mocks base method.
func (m *MockDelegate) GetCredential() v10.GitHubCredential {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredential")
	ret0, _ := ret[0].(v10.GitHubCredential)
	return ret0
}

// GetCredential indicates an expected call of GetCredential.
func (mr *MockDelegateMockRecorder) GetCredential() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredential", reflect.TypeOf((*MockDelegate)(nil).GetCredential))
}

// GetLogin mocks base method.
func (m *MockDelegate) GetLogin(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogin", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogin indicates an expected call of GetLogin.
func (mr *MockDelegateMockRecorder) GetLogin(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogin", reflect.TypeOf((*MockDelegate)(nil).GetLogin), ctx)
}

// GetName mocks base method.
func (m *MockDelegate) GetName(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetName indicates an expected call of GetName.
func (mr *MockDelegateMockRecorder) GetName(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockDelegate)(nil).GetName), ctx)
}

// GetOwner mocks base method.
func (m *MockDelegate) GetOwner() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwner")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetOwner indicates an expected call of GetOwner.
func (mr *MockDelegateMockRecorder) GetOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwner", reflect.TypeOf((*MockDelegate)(nil).GetOwner))
}

// GetPrimaryEmail mocks base method.
func (m *MockDelegate) GetPrimaryEmail(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrimaryEmail", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrimaryEmail indicates an expected call of GetPrimaryEmail.
func (mr *MockDelegateMockRecorder) GetPrimaryEmail(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrimaryEmail", reflect.TypeOf((*MockDelegate)(nil).GetPrimaryEmail), ctx)
}

// GetUserId mocks base method.
func (m *MockDelegate) GetUserId(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserId", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserId indicates an expected call of GetUserId.
func (mr *MockDelegateMockRecorder) GetUserId(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserId", reflect.TypeOf((*MockDelegate)(nil).GetUserId), ctx)
}

// IsOrg mocks base method.
func (m *MockDelegate) IsOrg() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOrg")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsOrg indicates an expected call of IsOrg.
func (mr *MockDelegateMockRecorder) IsOrg() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOrg", reflect.TypeOf((*MockDelegate)(nil).IsOrg))
}

// ListAllRepositories mocks base method.
func (m *MockDelegate) ListAllRepositories(arg0 context.Context) ([]*v1.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllRepositories", arg0)
	ret0, _ := ret[0].([]*v1.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllRepositories indicates an expected call of ListAllRepositories.
func (mr *MockDelegateMockRecorder) ListAllRepositories(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllRepositories", reflect.TypeOf((*MockDelegate)(nil).ListAllRepositories), arg0)
}
