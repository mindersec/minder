// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/providers/v1/providers.go
//
// Generated by this command:
//
//	mockgen -package mock_github -destination internal/providers/github/mock/github.go -source pkg/providers/v1/providers.go GitHub
//

// Package mock_github is a generated GoMock package.
package mock_github

import (
	context "context"
	http "net/http"
	reflect "reflect"
	time "time"

	git "github.com/go-git/go-git/v5"
	authn "github.com/google/go-containerregistry/pkg/authn"
	v1 "github.com/google/go-containerregistry/pkg/v1"
	github "github.com/google/go-github/v63/github"
	properties "github.com/mindersec/minder/internal/entities/properties"
	v10 "github.com/mindersec/minder/pkg/api/protobuf/go/minder/v1"
	v11 "github.com/mindersec/minder/pkg/providers/v1"
	gomock "go.uber.org/mock/gomock"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
)

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
	isgomock struct{}
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// CanImplement mocks base method.
func (m *MockProvider) CanImplement(trait v10.ProviderType) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanImplement", trait)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanImplement indicates an expected call of CanImplement.
func (mr *MockProviderMockRecorder) CanImplement(trait any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanImplement", reflect.TypeOf((*MockProvider)(nil).CanImplement), trait)
}

// DeregisterEntity mocks base method.
func (m *MockProvider) DeregisterEntity(ctx context.Context, entType v10.Entity, props *properties.Properties) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterEntity", ctx, entType, props)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeregisterEntity indicates an expected call of DeregisterEntity.
func (mr *MockProviderMockRecorder) DeregisterEntity(ctx, entType, props any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterEntity", reflect.TypeOf((*MockProvider)(nil).DeregisterEntity), ctx, entType, props)
}

// FetchAllProperties mocks base method.
func (m *MockProvider) FetchAllProperties(ctx context.Context, getByProps *properties.Properties, entType v10.Entity, cachedProps *properties.Properties) (*properties.Properties, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAllProperties", ctx, getByProps, entType, cachedProps)
	ret0, _ := ret[0].(*properties.Properties)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAllProperties indicates an expected call of FetchAllProperties.
func (mr *MockProviderMockRecorder) FetchAllProperties(ctx, getByProps, entType, cachedProps any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllProperties", reflect.TypeOf((*MockProvider)(nil).FetchAllProperties), ctx, getByProps, entType, cachedProps)
}

// FetchProperty mocks base method.
func (m *MockProvider) FetchProperty(ctx context.Context, getByProps *properties.Properties, entType v10.Entity, key string) (*properties.Property, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchProperty", ctx, getByProps, entType, key)
	ret0, _ := ret[0].(*properties.Property)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchProperty indicates an expected call of FetchProperty.
func (mr *MockProviderMockRecorder) FetchProperty(ctx, getByProps, entType, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchProperty", reflect.TypeOf((*MockProvider)(nil).FetchProperty), ctx, getByProps, entType, key)
}

// GetEntityName mocks base method.
func (m *MockProvider) GetEntityName(entType v10.Entity, props *properties.Properties) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityName", entType, props)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityName indicates an expected call of GetEntityName.
func (mr *MockProviderMockRecorder) GetEntityName(entType, props any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityName", reflect.TypeOf((*MockProvider)(nil).GetEntityName), entType, props)
}

// PropertiesToProtoMessage mocks base method.
func (m *MockProvider) PropertiesToProtoMessage(entType v10.Entity, props *properties.Properties) (protoreflect.ProtoMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PropertiesToProtoMessage", entType, props)
	ret0, _ := ret[0].(protoreflect.ProtoMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PropertiesToProtoMessage indicates an expected call of PropertiesToProtoMessage.
func (mr *MockProviderMockRecorder) PropertiesToProtoMessage(entType, props any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PropertiesToProtoMessage", reflect.TypeOf((*MockProvider)(nil).PropertiesToProtoMessage), entType, props)
}

// RegisterEntity mocks base method.
func (m *MockProvider) RegisterEntity(ctx context.Context, entType v10.Entity, props *properties.Properties) (*properties.Properties, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterEntity", ctx, entType, props)
	ret0, _ := ret[0].(*properties.Properties)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterEntity indicates an expected call of RegisterEntity.
func (mr *MockProviderMockRecorder) RegisterEntity(ctx, entType, props any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterEntity", reflect.TypeOf((*MockProvider)(nil).RegisterEntity), ctx, entType, props)
}

// ReregisterEntity mocks base method.
func (m *MockProvider) ReregisterEntity(ctx context.Context, entType v10.Entity, props *properties.Properties) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReregisterEntity", ctx, entType, props)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReregisterEntity indicates an expected call of ReregisterEntity.
func (mr *MockProviderMockRecorder) ReregisterEntity(ctx, entType, props any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReregisterEntity", reflect.TypeOf((*MockProvider)(nil).ReregisterEntity), ctx, entType, props)
}

// SupportsEntity mocks base method.
func (m *MockProvider) SupportsEntity(entType v10.Entity) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportsEntity", entType)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SupportsEntity indicates an expected call of SupportsEntity.
func (mr *MockProviderMockRecorder) SupportsEntity(entType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportsEntity", reflect.TypeOf((*MockProvider)(nil).SupportsEntity), entType)
}

// MockGit is a mock of Git interface.
type MockGit struct {
	ctrl     *gomock.Controller
	recorder *MockGitMockRecorder
	isgomock struct{}
}

// MockGitMockRecorder is the mock recorder for MockGit.
type MockGitMockRecorder struct {
	mock *MockGit
}

// NewMockGit creates a new mock instance.
func NewMockGit(ctrl *gomock.Controller) *MockGit {
	mock := &MockGit{ctrl: ctrl}
	mock.recorder = &MockGitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGit) EXPECT() *MockGitMockRecorder {
	return m.recorder
}

// CanImplement mocks base method.
func (m *MockGit) CanImplement(trait v10.ProviderType) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanImplement", trait)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanImplement indicates an expected call of CanImplement.
func (mr *MockGitMockRecorder) CanImplement(trait any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanImplement", reflect.TypeOf((*MockGit)(nil).CanImplement), trait)
}

// Clone mocks base method.
func (m *MockGit) Clone(ctx context.Context, url, branch string) (*git.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone", ctx, url, branch)
	ret0, _ := ret[0].(*git.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Clone indicates an expected call of Clone.
func (mr *MockGitMockRecorder) Clone(ctx, url, branch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockGit)(nil).Clone), ctx, url, branch)
}

// DeregisterEntity mocks base method.
func (m *MockGit) DeregisterEntity(ctx context.Context, entType v10.Entity, props *properties.Properties) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterEntity", ctx, entType, props)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeregisterEntity indicates an expected call of DeregisterEntity.
func (mr *MockGitMockRecorder) DeregisterEntity(ctx, entType, props any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterEntity", reflect.TypeOf((*MockGit)(nil).DeregisterEntity), ctx, entType, props)
}

// FetchAllProperties mocks base method.
func (m *MockGit) FetchAllProperties(ctx context.Context, getByProps *properties.Properties, entType v10.Entity, cachedProps *properties.Properties) (*properties.Properties, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAllProperties", ctx, getByProps, entType, cachedProps)
	ret0, _ := ret[0].(*properties.Properties)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAllProperties indicates an expected call of FetchAllProperties.
func (mr *MockGitMockRecorder) FetchAllProperties(ctx, getByProps, entType, cachedProps any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllProperties", reflect.TypeOf((*MockGit)(nil).FetchAllProperties), ctx, getByProps, entType, cachedProps)
}

// FetchProperty mocks base method.
func (m *MockGit) FetchProperty(ctx context.Context, getByProps *properties.Properties, entType v10.Entity, key string) (*properties.Property, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchProperty", ctx, getByProps, entType, key)
	ret0, _ := ret[0].(*properties.Property)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchProperty indicates an expected call of FetchProperty.
func (mr *MockGitMockRecorder) FetchProperty(ctx, getByProps, entType, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchProperty", reflect.TypeOf((*MockGit)(nil).FetchProperty), ctx, getByProps, entType, key)
}

// GetEntityName mocks base method.
func (m *MockGit) GetEntityName(entType v10.Entity, props *properties.Properties) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityName", entType, props)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityName indicates an expected call of GetEntityName.
func (mr *MockGitMockRecorder) GetEntityName(entType, props any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityName", reflect.TypeOf((*MockGit)(nil).GetEntityName), entType, props)
}

// PropertiesToProtoMessage mocks base method.
func (m *MockGit) PropertiesToProtoMessage(entType v10.Entity, props *properties.Properties) (protoreflect.ProtoMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PropertiesToProtoMessage", entType, props)
	ret0, _ := ret[0].(protoreflect.ProtoMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PropertiesToProtoMessage indicates an expected call of PropertiesToProtoMessage.
func (mr *MockGitMockRecorder) PropertiesToProtoMessage(entType, props any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PropertiesToProtoMessage", reflect.TypeOf((*MockGit)(nil).PropertiesToProtoMessage), entType, props)
}

// RegisterEntity mocks base method.
func (m *MockGit) RegisterEntity(ctx context.Context, entType v10.Entity, props *properties.Properties) (*properties.Properties, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterEntity", ctx, entType, props)
	ret0, _ := ret[0].(*properties.Properties)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterEntity indicates an expected call of RegisterEntity.
func (mr *MockGitMockRecorder) RegisterEntity(ctx, entType, props any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterEntity", reflect.TypeOf((*MockGit)(nil).RegisterEntity), ctx, entType, props)
}

// ReregisterEntity mocks base method.
func (m *MockGit) ReregisterEntity(ctx context.Context, entType v10.Entity, props *properties.Properties) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReregisterEntity", ctx, entType, props)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReregisterEntity indicates an expected call of ReregisterEntity.
func (mr *MockGitMockRecorder) ReregisterEntity(ctx, entType, props any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReregisterEntity", reflect.TypeOf((*MockGit)(nil).ReregisterEntity), ctx, entType, props)
}

// SupportsEntity mocks base method.
func (m *MockGit) SupportsEntity(entType v10.Entity) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportsEntity", entType)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SupportsEntity indicates an expected call of SupportsEntity.
func (mr *MockGitMockRecorder) SupportsEntity(entType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportsEntity", reflect.TypeOf((*MockGit)(nil).SupportsEntity), entType)
}

// MockREST is a mock of REST interface.
type MockREST struct {
	ctrl     *gomock.Controller
	recorder *MockRESTMockRecorder
	isgomock struct{}
}

// MockRESTMockRecorder is the mock recorder for MockREST.
type MockRESTMockRecorder struct {
	mock *MockREST
}

// NewMockREST creates a new mock instance.
func NewMockREST(ctrl *gomock.Controller) *MockREST {
	mock := &MockREST{ctrl: ctrl}
	mock.recorder = &MockRESTMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockREST) EXPECT() *MockRESTMockRecorder {
	return m.recorder
}

// CanImplement mocks base method.
func (m *MockREST) CanImplement(trait v10.ProviderType) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanImplement", trait)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanImplement indicates an expected call of CanImplement.
func (mr *MockRESTMockRecorder) CanImplement(trait any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanImplement", reflect.TypeOf((*MockREST)(nil).CanImplement), trait)
}

// DeregisterEntity mocks base method.
func (m *MockREST) DeregisterEntity(ctx context.Context, entType v10.Entity, props *properties.Properties) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterEntity", ctx, entType, props)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeregisterEntity indicates an expected call of DeregisterEntity.
func (mr *MockRESTMockRecorder) DeregisterEntity(ctx, entType, props any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterEntity", reflect.TypeOf((*MockREST)(nil).DeregisterEntity), ctx, entType, props)
}

// Do mocks base method.
func (m *MockREST) Do(ctx context.Context, req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx, req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockRESTMockRecorder) Do(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockREST)(nil).Do), ctx, req)
}

// FetchAllProperties mocks base method.
func (m *MockREST) FetchAllProperties(ctx context.Context, getByProps *properties.Properties, entType v10.Entity, cachedProps *properties.Properties) (*properties.Properties, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAllProperties", ctx, getByProps, entType, cachedProps)
	ret0, _ := ret[0].(*properties.Properties)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAllProperties indicates an expected call of FetchAllProperties.
func (mr *MockRESTMockRecorder) FetchAllProperties(ctx, getByProps, entType, cachedProps any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllProperties", reflect.TypeOf((*MockREST)(nil).FetchAllProperties), ctx, getByProps, entType, cachedProps)
}

// FetchProperty mocks base method.
func (m *MockREST) FetchProperty(ctx context.Context, getByProps *properties.Properties, entType v10.Entity, key string) (*properties.Property, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchProperty", ctx, getByProps, entType, key)
	ret0, _ := ret[0].(*properties.Property)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchProperty indicates an expected call of FetchProperty.
func (mr *MockRESTMockRecorder) FetchProperty(ctx, getByProps, entType, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchProperty", reflect.TypeOf((*MockREST)(nil).FetchProperty), ctx, getByProps, entType, key)
}

// GetBaseURL mocks base method.
func (m *MockREST) GetBaseURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBaseURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetBaseURL indicates an expected call of GetBaseURL.
func (mr *MockRESTMockRecorder) GetBaseURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBaseURL", reflect.TypeOf((*MockREST)(nil).GetBaseURL))
}

// GetEntityName mocks base method.
func (m *MockREST) GetEntityName(entType v10.Entity, props *properties.Properties) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityName", entType, props)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityName indicates an expected call of GetEntityName.
func (mr *MockRESTMockRecorder) GetEntityName(entType, props any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityName", reflect.TypeOf((*MockREST)(nil).GetEntityName), entType, props)
}

// NewRequest mocks base method.
func (m *MockREST) NewRequest(method, url string, body any) (*http.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRequest", method, url, body)
	ret0, _ := ret[0].(*http.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewRequest indicates an expected call of NewRequest.
func (mr *MockRESTMockRecorder) NewRequest(method, url, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRequest", reflect.TypeOf((*MockREST)(nil).NewRequest), method, url, body)
}

// PropertiesToProtoMessage mocks base method.
func (m *MockREST) PropertiesToProtoMessage(entType v10.Entity, props *properties.Properties) (protoreflect.ProtoMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PropertiesToProtoMessage", entType, props)
	ret0, _ := ret[0].(protoreflect.ProtoMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PropertiesToProtoMessage indicates an expected call of PropertiesToProtoMessage.
func (mr *MockRESTMockRecorder) PropertiesToProtoMessage(entType, props any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PropertiesToProtoMessage", reflect.TypeOf((*MockREST)(nil).PropertiesToProtoMessage), entType, props)
}

// RegisterEntity mocks base method.
func (m *MockREST) RegisterEntity(ctx context.Context, entType v10.Entity, props *properties.Properties) (*properties.Properties, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterEntity", ctx, entType, props)
	ret0, _ := ret[0].(*properties.Properties)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterEntity indicates an expected call of RegisterEntity.
func (mr *MockRESTMockRecorder) RegisterEntity(ctx, entType, props any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterEntity", reflect.TypeOf((*MockREST)(nil).RegisterEntity), ctx, entType, props)
}

// ReregisterEntity mocks base method.
func (m *MockREST) ReregisterEntity(ctx context.Context, entType v10.Entity, props *properties.Properties) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReregisterEntity", ctx, entType, props)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReregisterEntity indicates an expected call of ReregisterEntity.
func (mr *MockRESTMockRecorder) ReregisterEntity(ctx, entType, props any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReregisterEntity", reflect.TypeOf((*MockREST)(nil).ReregisterEntity), ctx, entType, props)
}

// SupportsEntity mocks base method.
func (m *MockREST) SupportsEntity(entType v10.Entity) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportsEntity", entType)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SupportsEntity indicates an expected call of SupportsEntity.
func (mr *MockRESTMockRecorder) SupportsEntity(entType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportsEntity", reflect.TypeOf((*MockREST)(nil).SupportsEntity), entType)
}

// MockRepoLister is a mock of RepoLister interface.
type MockRepoLister struct {
	ctrl     *gomock.Controller
	recorder *MockRepoListerMockRecorder
	isgomock struct{}
}

// MockRepoListerMockRecorder is the mock recorder for MockRepoLister.
type MockRepoListerMockRecorder struct {
	mock *MockRepoLister
}

// NewMockRepoLister creates a new mock instance.
func NewMockRepoLister(ctrl *gomock.Controller) *MockRepoLister {
	mock := &MockRepoLister{ctrl: ctrl}
	mock.recorder = &MockRepoListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepoLister) EXPECT() *MockRepoListerMockRecorder {
	return m.recorder
}

// CanImplement mocks base method.
func (m *MockRepoLister) CanImplement(trait v10.ProviderType) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanImplement", trait)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanImplement indicates an expected call of CanImplement.
func (mr *MockRepoListerMockRecorder) CanImplement(trait any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanImplement", reflect.TypeOf((*MockRepoLister)(nil).CanImplement), trait)
}

// DeregisterEntity mocks base method.
func (m *MockRepoLister) DeregisterEntity(ctx context.Context, entType v10.Entity, props *properties.Properties) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterEntity", ctx, entType, props)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeregisterEntity indicates an expected call of DeregisterEntity.
func (mr *MockRepoListerMockRecorder) DeregisterEntity(ctx, entType, props any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterEntity", reflect.TypeOf((*MockRepoLister)(nil).DeregisterEntity), ctx, entType, props)
}

// FetchAllProperties mocks base method.
func (m *MockRepoLister) FetchAllProperties(ctx context.Context, getByProps *properties.Properties, entType v10.Entity, cachedProps *properties.Properties) (*properties.Properties, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAllProperties", ctx, getByProps, entType, cachedProps)
	ret0, _ := ret[0].(*properties.Properties)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAllProperties indicates an expected call of FetchAllProperties.
func (mr *MockRepoListerMockRecorder) FetchAllProperties(ctx, getByProps, entType, cachedProps any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllProperties", reflect.TypeOf((*MockRepoLister)(nil).FetchAllProperties), ctx, getByProps, entType, cachedProps)
}

// FetchProperty mocks base method.
func (m *MockRepoLister) FetchProperty(ctx context.Context, getByProps *properties.Properties, entType v10.Entity, key string) (*properties.Property, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchProperty", ctx, getByProps, entType, key)
	ret0, _ := ret[0].(*properties.Property)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchProperty indicates an expected call of FetchProperty.
func (mr *MockRepoListerMockRecorder) FetchProperty(ctx, getByProps, entType, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchProperty", reflect.TypeOf((*MockRepoLister)(nil).FetchProperty), ctx, getByProps, entType, key)
}

// GetEntityName mocks base method.
func (m *MockRepoLister) GetEntityName(entType v10.Entity, props *properties.Properties) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityName", entType, props)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityName indicates an expected call of GetEntityName.
func (mr *MockRepoListerMockRecorder) GetEntityName(entType, props any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityName", reflect.TypeOf((*MockRepoLister)(nil).GetEntityName), entType, props)
}

// ListAllRepositories mocks base method.
func (m *MockRepoLister) ListAllRepositories(arg0 context.Context) ([]*v10.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllRepositories", arg0)
	ret0, _ := ret[0].([]*v10.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllRepositories indicates an expected call of ListAllRepositories.
func (mr *MockRepoListerMockRecorder) ListAllRepositories(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllRepositories", reflect.TypeOf((*MockRepoLister)(nil).ListAllRepositories), arg0)
}

// PropertiesToProtoMessage mocks base method.
func (m *MockRepoLister) PropertiesToProtoMessage(entType v10.Entity, props *properties.Properties) (protoreflect.ProtoMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PropertiesToProtoMessage", entType, props)
	ret0, _ := ret[0].(protoreflect.ProtoMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PropertiesToProtoMessage indicates an expected call of PropertiesToProtoMessage.
func (mr *MockRepoListerMockRecorder) PropertiesToProtoMessage(entType, props any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PropertiesToProtoMessage", reflect.TypeOf((*MockRepoLister)(nil).PropertiesToProtoMessage), entType, props)
}

// RegisterEntity mocks base method.
func (m *MockRepoLister) RegisterEntity(ctx context.Context, entType v10.Entity, props *properties.Properties) (*properties.Properties, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterEntity", ctx, entType, props)
	ret0, _ := ret[0].(*properties.Properties)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterEntity indicates an expected call of RegisterEntity.
func (mr *MockRepoListerMockRecorder) RegisterEntity(ctx, entType, props any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterEntity", reflect.TypeOf((*MockRepoLister)(nil).RegisterEntity), ctx, entType, props)
}

// ReregisterEntity mocks base method.
func (m *MockRepoLister) ReregisterEntity(ctx context.Context, entType v10.Entity, props *properties.Properties) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReregisterEntity", ctx, entType, props)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReregisterEntity indicates an expected call of ReregisterEntity.
func (mr *MockRepoListerMockRecorder) ReregisterEntity(ctx, entType, props any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReregisterEntity", reflect.TypeOf((*MockRepoLister)(nil).ReregisterEntity), ctx, entType, props)
}

// SupportsEntity mocks base method.
func (m *MockRepoLister) SupportsEntity(entType v10.Entity) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportsEntity", entType)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SupportsEntity indicates an expected call of SupportsEntity.
func (mr *MockRepoListerMockRecorder) SupportsEntity(entType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportsEntity", reflect.TypeOf((*MockRepoLister)(nil).SupportsEntity), entType)
}

// MockGetArtifactVersionsFilter is a mock of GetArtifactVersionsFilter interface.
type MockGetArtifactVersionsFilter struct {
	ctrl     *gomock.Controller
	recorder *MockGetArtifactVersionsFilterMockRecorder
	isgomock struct{}
}

// MockGetArtifactVersionsFilterMockRecorder is the mock recorder for MockGetArtifactVersionsFilter.
type MockGetArtifactVersionsFilterMockRecorder struct {
	mock *MockGetArtifactVersionsFilter
}

// NewMockGetArtifactVersionsFilter creates a new mock instance.
func NewMockGetArtifactVersionsFilter(ctrl *gomock.Controller) *MockGetArtifactVersionsFilter {
	mock := &MockGetArtifactVersionsFilter{ctrl: ctrl}
	mock.recorder = &MockGetArtifactVersionsFilterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetArtifactVersionsFilter) EXPECT() *MockGetArtifactVersionsFilterMockRecorder {
	return m.recorder
}

// IsSkippable mocks base method.
func (m *MockGetArtifactVersionsFilter) IsSkippable(createdAt time.Time, tags []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSkippable", createdAt, tags)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsSkippable indicates an expected call of IsSkippable.
func (mr *MockGetArtifactVersionsFilterMockRecorder) IsSkippable(createdAt, tags any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSkippable", reflect.TypeOf((*MockGetArtifactVersionsFilter)(nil).IsSkippable), createdAt, tags)
}

// MockArtifactProvider is a mock of ArtifactProvider interface.
type MockArtifactProvider struct {
	ctrl     *gomock.Controller
	recorder *MockArtifactProviderMockRecorder
	isgomock struct{}
}

// MockArtifactProviderMockRecorder is the mock recorder for MockArtifactProvider.
type MockArtifactProviderMockRecorder struct {
	mock *MockArtifactProvider
}

// NewMockArtifactProvider creates a new mock instance.
func NewMockArtifactProvider(ctrl *gomock.Controller) *MockArtifactProvider {
	mock := &MockArtifactProvider{ctrl: ctrl}
	mock.recorder = &MockArtifactProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArtifactProvider) EXPECT() *MockArtifactProviderMockRecorder {
	return m.recorder
}

// GetArtifactVersions mocks base method.
func (m *MockArtifactProvider) GetArtifactVersions(ctx context.Context, artifact *v10.Artifact, filter v11.GetArtifactVersionsFilter) ([]*v10.ArtifactVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtifactVersions", ctx, artifact, filter)
	ret0, _ := ret[0].([]*v10.ArtifactVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtifactVersions indicates an expected call of GetArtifactVersions.
func (mr *MockArtifactProviderMockRecorder) GetArtifactVersions(ctx, artifact, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtifactVersions", reflect.TypeOf((*MockArtifactProvider)(nil).GetArtifactVersions), ctx, artifact, filter)
}

// MockGitHub is a mock of GitHub interface.
type MockGitHub struct {
	ctrl     *gomock.Controller
	recorder *MockGitHubMockRecorder
	isgomock struct{}
}

// MockGitHubMockRecorder is the mock recorder for MockGitHub.
type MockGitHubMockRecorder struct {
	mock *MockGitHub
}

// NewMockGitHub creates a new mock instance.
func NewMockGitHub(ctrl *gomock.Controller) *MockGitHub {
	mock := &MockGitHub{ctrl: ctrl}
	mock.recorder = &MockGitHubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitHub) EXPECT() *MockGitHubMockRecorder {
	return m.recorder
}

// AddAuthToPushOptions mocks base method.
func (m *MockGitHub) AddAuthToPushOptions(ctx context.Context, options *git.PushOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAuthToPushOptions", ctx, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAuthToPushOptions indicates an expected call of AddAuthToPushOptions.
func (mr *MockGitHubMockRecorder) AddAuthToPushOptions(ctx, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAuthToPushOptions", reflect.TypeOf((*MockGitHub)(nil).AddAuthToPushOptions), ctx, options)
}

// CanImplement mocks base method.
func (m *MockGitHub) CanImplement(trait v10.ProviderType) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanImplement", trait)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanImplement indicates an expected call of CanImplement.
func (mr *MockGitHubMockRecorder) CanImplement(trait any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanImplement", reflect.TypeOf((*MockGitHub)(nil).CanImplement), trait)
}

// Clone mocks base method.
func (m *MockGitHub) Clone(ctx context.Context, url, branch string) (*git.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone", ctx, url, branch)
	ret0, _ := ret[0].(*git.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Clone indicates an expected call of Clone.
func (mr *MockGitHubMockRecorder) Clone(ctx, url, branch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockGitHub)(nil).Clone), ctx, url, branch)
}

// ClosePullRequest mocks base method.
func (m *MockGitHub) ClosePullRequest(ctx context.Context, owner, repo string, number int) (*github.PullRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClosePullRequest", ctx, owner, repo, number)
	ret0, _ := ret[0].(*github.PullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClosePullRequest indicates an expected call of ClosePullRequest.
func (mr *MockGitHubMockRecorder) ClosePullRequest(ctx, owner, repo, number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClosePullRequest", reflect.TypeOf((*MockGitHub)(nil).ClosePullRequest), ctx, owner, repo, number)
}

// CloseSecurityAdvisory mocks base method.
func (m *MockGitHub) CloseSecurityAdvisory(ctx context.Context, owner, repo, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSecurityAdvisory", ctx, owner, repo, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSecurityAdvisory indicates an expected call of CloseSecurityAdvisory.
func (mr *MockGitHubMockRecorder) CloseSecurityAdvisory(ctx, owner, repo, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSecurityAdvisory", reflect.TypeOf((*MockGitHub)(nil).CloseSecurityAdvisory), ctx, owner, repo, id)
}

// CreateHook mocks base method.
func (m *MockGitHub) CreateHook(ctx context.Context, owner, repo string, hook *github.Hook) (*github.Hook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHook", ctx, owner, repo, hook)
	ret0, _ := ret[0].(*github.Hook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHook indicates an expected call of CreateHook.
func (mr *MockGitHubMockRecorder) CreateHook(ctx, owner, repo, hook any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHook", reflect.TypeOf((*MockGitHub)(nil).CreateHook), ctx, owner, repo, hook)
}

// CreateIssueComment mocks base method.
func (m *MockGitHub) CreateIssueComment(ctx context.Context, owner, repo string, number int, comment string) (*github.IssueComment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIssueComment", ctx, owner, repo, number, comment)
	ret0, _ := ret[0].(*github.IssueComment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIssueComment indicates an expected call of CreateIssueComment.
func (mr *MockGitHubMockRecorder) CreateIssueComment(ctx, owner, repo, number, comment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIssueComment", reflect.TypeOf((*MockGitHub)(nil).CreateIssueComment), ctx, owner, repo, number, comment)
}

// CreatePullRequest mocks base method.
func (m *MockGitHub) CreatePullRequest(ctx context.Context, owner, repo, title, body, head, base string) (*github.PullRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePullRequest", ctx, owner, repo, title, body, head, base)
	ret0, _ := ret[0].(*github.PullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePullRequest indicates an expected call of CreatePullRequest.
func (mr *MockGitHubMockRecorder) CreatePullRequest(ctx, owner, repo, title, body, head, base any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePullRequest", reflect.TypeOf((*MockGitHub)(nil).CreatePullRequest), ctx, owner, repo, title, body, head, base)
}

// CreateReview mocks base method.
func (m *MockGitHub) CreateReview(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 *github.PullRequestReviewRequest) (*github.PullRequestReview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReview", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.PullRequestReview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReview indicates an expected call of CreateReview.
func (mr *MockGitHubMockRecorder) CreateReview(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReview", reflect.TypeOf((*MockGitHub)(nil).CreateReview), arg0, arg1, arg2, arg3, arg4)
}

// CreateSecurityAdvisory mocks base method.
func (m *MockGitHub) CreateSecurityAdvisory(ctx context.Context, owner, repo, severity, summary, description string, v []*github.AdvisoryVulnerability) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecurityAdvisory", ctx, owner, repo, severity, summary, description, v)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecurityAdvisory indicates an expected call of CreateSecurityAdvisory.
func (mr *MockGitHubMockRecorder) CreateSecurityAdvisory(ctx, owner, repo, severity, summary, description, v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecurityAdvisory", reflect.TypeOf((*MockGitHub)(nil).CreateSecurityAdvisory), ctx, owner, repo, severity, summary, description, v)
}

// DeleteHook mocks base method.
func (m *MockGitHub) DeleteHook(ctx context.Context, owner, repo string, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHook", ctx, owner, repo, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHook indicates an expected call of DeleteHook.
func (mr *MockGitHubMockRecorder) DeleteHook(ctx, owner, repo, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHook", reflect.TypeOf((*MockGitHub)(nil).DeleteHook), ctx, owner, repo, id)
}

// DeregisterEntity mocks base method.
func (m *MockGitHub) DeregisterEntity(ctx context.Context, entType v10.Entity, props *properties.Properties) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterEntity", ctx, entType, props)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeregisterEntity indicates an expected call of DeregisterEntity.
func (mr *MockGitHubMockRecorder) DeregisterEntity(ctx, entType, props any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterEntity", reflect.TypeOf((*MockGitHub)(nil).DeregisterEntity), ctx, entType, props)
}

// DismissReview mocks base method.
func (m *MockGitHub) DismissReview(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 int64, arg5 *github.PullRequestReviewDismissalRequest) (*github.PullRequestReview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DismissReview", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*github.PullRequestReview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DismissReview indicates an expected call of DismissReview.
func (mr *MockGitHubMockRecorder) DismissReview(arg0, arg1, arg2, arg3, arg4, arg5 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DismissReview", reflect.TypeOf((*MockGitHub)(nil).DismissReview), arg0, arg1, arg2, arg3, arg4, arg5)
}

// Do mocks base method.
func (m *MockGitHub) Do(ctx context.Context, req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx, req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockGitHubMockRecorder) Do(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockGitHub)(nil).Do), ctx, req)
}

// EditHook mocks base method.
func (m *MockGitHub) EditHook(ctx context.Context, owner, repo string, id int64, hook *github.Hook) (*github.Hook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditHook", ctx, owner, repo, id, hook)
	ret0, _ := ret[0].(*github.Hook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditHook indicates an expected call of EditHook.
func (mr *MockGitHubMockRecorder) EditHook(ctx, owner, repo, id, hook any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditHook", reflect.TypeOf((*MockGitHub)(nil).EditHook), ctx, owner, repo, id, hook)
}

// FetchAllProperties mocks base method.
func (m *MockGitHub) FetchAllProperties(ctx context.Context, getByProps *properties.Properties, entType v10.Entity, cachedProps *properties.Properties) (*properties.Properties, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAllProperties", ctx, getByProps, entType, cachedProps)
	ret0, _ := ret[0].(*properties.Properties)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAllProperties indicates an expected call of FetchAllProperties.
func (mr *MockGitHubMockRecorder) FetchAllProperties(ctx, getByProps, entType, cachedProps any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllProperties", reflect.TypeOf((*MockGitHub)(nil).FetchAllProperties), ctx, getByProps, entType, cachedProps)
}

// FetchProperty mocks base method.
func (m *MockGitHub) FetchProperty(ctx context.Context, getByProps *properties.Properties, entType v10.Entity, key string) (*properties.Property, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchProperty", ctx, getByProps, entType, key)
	ret0, _ := ret[0].(*properties.Property)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchProperty indicates an expected call of FetchProperty.
func (mr *MockGitHubMockRecorder) FetchProperty(ctx, getByProps, entType, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchProperty", reflect.TypeOf((*MockGitHub)(nil).FetchProperty), ctx, getByProps, entType, key)
}

// GetArtifactVersions mocks base method.
func (m *MockGitHub) GetArtifactVersions(ctx context.Context, artifact *v10.Artifact, filter v11.GetArtifactVersionsFilter) ([]*v10.ArtifactVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtifactVersions", ctx, artifact, filter)
	ret0, _ := ret[0].([]*v10.ArtifactVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtifactVersions indicates an expected call of GetArtifactVersions.
func (mr *MockGitHubMockRecorder) GetArtifactVersions(ctx, artifact, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtifactVersions", reflect.TypeOf((*MockGitHub)(nil).GetArtifactVersions), ctx, artifact, filter)
}

// GetBaseURL mocks base method.
func (m *MockGitHub) GetBaseURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBaseURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetBaseURL indicates an expected call of GetBaseURL.
func (mr *MockGitHubMockRecorder) GetBaseURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBaseURL", reflect.TypeOf((*MockGitHub)(nil).GetBaseURL))
}

// GetBranchProtection mocks base method.
func (m *MockGitHub) GetBranchProtection(arg0 context.Context, arg1, arg2, arg3 string) (*github.Protection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBranchProtection", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Protection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBranchProtection indicates an expected call of GetBranchProtection.
func (mr *MockGitHubMockRecorder) GetBranchProtection(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBranchProtection", reflect.TypeOf((*MockGitHub)(nil).GetBranchProtection), arg0, arg1, arg2, arg3)
}

// GetCredential mocks base method.
func (m *MockGitHub) GetCredential() v11.GitHubCredential {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredential")
	ret0, _ := ret[0].(v11.GitHubCredential)
	return ret0
}

// GetCredential indicates an expected call of GetCredential.
func (mr *MockGitHubMockRecorder) GetCredential() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredential", reflect.TypeOf((*MockGitHub)(nil).GetCredential))
}

// GetEntityName mocks base method.
func (m *MockGitHub) GetEntityName(entType v10.Entity, props *properties.Properties) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityName", entType, props)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityName indicates an expected call of GetEntityName.
func (mr *MockGitHubMockRecorder) GetEntityName(entType, props any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityName", reflect.TypeOf((*MockGitHub)(nil).GetEntityName), entType, props)
}

// GetLogin mocks base method.
func (m *MockGitHub) GetLogin(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogin", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogin indicates an expected call of GetLogin.
func (mr *MockGitHubMockRecorder) GetLogin(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogin", reflect.TypeOf((*MockGitHub)(nil).GetLogin), ctx)
}

// GetName mocks base method.
func (m *MockGitHub) GetName(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetName indicates an expected call of GetName.
func (mr *MockGitHubMockRecorder) GetName(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockGitHub)(nil).GetName), ctx)
}

// GetNamespaceURL mocks base method.
func (m *MockGitHub) GetNamespaceURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespaceURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNamespaceURL indicates an expected call of GetNamespaceURL.
func (mr *MockGitHubMockRecorder) GetNamespaceURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespaceURL", reflect.TypeOf((*MockGitHub)(nil).GetNamespaceURL))
}

// GetPackageByName mocks base method.
func (m *MockGitHub) GetPackageByName(arg0 context.Context, arg1, arg2, arg3 string) (*github.Package, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPackageByName", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Package)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPackageByName indicates an expected call of GetPackageByName.
func (mr *MockGitHubMockRecorder) GetPackageByName(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackageByName", reflect.TypeOf((*MockGitHub)(nil).GetPackageByName), arg0, arg1, arg2, arg3)
}

// GetPackageVersionById mocks base method.
func (m *MockGitHub) GetPackageVersionById(arg0 context.Context, arg1, arg2, arg3 string, arg4 int64) (*github.PackageVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPackageVersionById", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.PackageVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPackageVersionById indicates an expected call of GetPackageVersionById.
func (mr *MockGitHubMockRecorder) GetPackageVersionById(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackageVersionById", reflect.TypeOf((*MockGitHub)(nil).GetPackageVersionById), arg0, arg1, arg2, arg3, arg4)
}

// GetPrimaryEmail mocks base method.
func (m *MockGitHub) GetPrimaryEmail(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrimaryEmail", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrimaryEmail indicates an expected call of GetPrimaryEmail.
func (mr *MockGitHubMockRecorder) GetPrimaryEmail(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrimaryEmail", reflect.TypeOf((*MockGitHub)(nil).GetPrimaryEmail), ctx)
}

// GetPullRequest mocks base method.
func (m *MockGitHub) GetPullRequest(arg0 context.Context, arg1, arg2 string, arg3 int) (*github.PullRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequest", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.PullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequest indicates an expected call of GetPullRequest.
func (mr *MockGitHubMockRecorder) GetPullRequest(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequest", reflect.TypeOf((*MockGitHub)(nil).GetPullRequest), arg0, arg1, arg2, arg3)
}

// GetRepository mocks base method.
func (m *MockGitHub) GetRepository(arg0 context.Context, arg1, arg2 string) (*github.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepository", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepository indicates an expected call of GetRepository.
func (mr *MockGitHubMockRecorder) GetRepository(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepository", reflect.TypeOf((*MockGitHub)(nil).GetRepository), arg0, arg1, arg2)
}

// GetUserId mocks base method.
func (m *MockGitHub) GetUserId(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserId", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserId indicates an expected call of GetUserId.
func (mr *MockGitHubMockRecorder) GetUserId(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserId", reflect.TypeOf((*MockGitHub)(nil).GetUserId), ctx)
}

// IsOrg mocks base method.
func (m *MockGitHub) IsOrg() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOrg")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsOrg indicates an expected call of IsOrg.
func (mr *MockGitHubMockRecorder) IsOrg() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOrg", reflect.TypeOf((*MockGitHub)(nil).IsOrg))
}

// ListAllRepositories mocks base method.
func (m *MockGitHub) ListAllRepositories(arg0 context.Context) ([]*v10.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllRepositories", arg0)
	ret0, _ := ret[0].([]*v10.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllRepositories indicates an expected call of ListAllRepositories.
func (mr *MockGitHubMockRecorder) ListAllRepositories(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllRepositories", reflect.TypeOf((*MockGitHub)(nil).ListAllRepositories), arg0)
}

// ListFiles mocks base method.
func (m *MockGitHub) ListFiles(ctx context.Context, owner, repo string, prNumber, perPage, pageNumber int) ([]*github.CommitFile, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFiles", ctx, owner, repo, prNumber, perPage, pageNumber)
	ret0, _ := ret[0].([]*github.CommitFile)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListFiles indicates an expected call of ListFiles.
func (mr *MockGitHubMockRecorder) ListFiles(ctx, owner, repo, prNumber, perPage, pageNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFiles", reflect.TypeOf((*MockGitHub)(nil).ListFiles), ctx, owner, repo, prNumber, perPage, pageNumber)
}

// ListHooks mocks base method.
func (m *MockGitHub) ListHooks(ctx context.Context, owner, repo string) ([]*github.Hook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHooks", ctx, owner, repo)
	ret0, _ := ret[0].([]*github.Hook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHooks indicates an expected call of ListHooks.
func (mr *MockGitHubMockRecorder) ListHooks(ctx, owner, repo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHooks", reflect.TypeOf((*MockGitHub)(nil).ListHooks), ctx, owner, repo)
}

// ListImages mocks base method.
func (m *MockGitHub) ListImages(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListImages", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListImages indicates an expected call of ListImages.
func (mr *MockGitHubMockRecorder) ListImages(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImages", reflect.TypeOf((*MockGitHub)(nil).ListImages), ctx)
}

// ListIssueComments mocks base method.
func (m *MockGitHub) ListIssueComments(ctx context.Context, owner, repo string, number int, opts *github.IssueListCommentsOptions) ([]*github.IssueComment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIssueComments", ctx, owner, repo, number, opts)
	ret0, _ := ret[0].([]*github.IssueComment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIssueComments indicates an expected call of ListIssueComments.
func (mr *MockGitHubMockRecorder) ListIssueComments(ctx, owner, repo, number, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIssueComments", reflect.TypeOf((*MockGitHub)(nil).ListIssueComments), ctx, owner, repo, number, opts)
}

// ListPackagesByRepository mocks base method.
func (m *MockGitHub) ListPackagesByRepository(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4, arg5 int) ([]*github.Package, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPackagesByRepository", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].([]*github.Package)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPackagesByRepository indicates an expected call of ListPackagesByRepository.
func (mr *MockGitHubMockRecorder) ListPackagesByRepository(arg0, arg1, arg2, arg3, arg4, arg5 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPackagesByRepository", reflect.TypeOf((*MockGitHub)(nil).ListPackagesByRepository), arg0, arg1, arg2, arg3, arg4, arg5)
}

// ListPullRequests mocks base method.
func (m *MockGitHub) ListPullRequests(ctx context.Context, owner, repo string, opt *github.PullRequestListOptions) ([]*github.PullRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPullRequests", ctx, owner, repo, opt)
	ret0, _ := ret[0].([]*github.PullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPullRequests indicates an expected call of ListPullRequests.
func (mr *MockGitHubMockRecorder) ListPullRequests(ctx, owner, repo, opt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPullRequests", reflect.TypeOf((*MockGitHub)(nil).ListPullRequests), ctx, owner, repo, opt)
}

// ListReviews mocks base method.
func (m *MockGitHub) ListReviews(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 *github.ListOptions) ([]*github.PullRequestReview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReviews", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*github.PullRequestReview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReviews indicates an expected call of ListReviews.
func (mr *MockGitHubMockRecorder) ListReviews(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReviews", reflect.TypeOf((*MockGitHub)(nil).ListReviews), arg0, arg1, arg2, arg3, arg4)
}

// NewRequest mocks base method.
func (m *MockGitHub) NewRequest(method, url string, body any) (*http.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRequest", method, url, body)
	ret0, _ := ret[0].(*http.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewRequest indicates an expected call of NewRequest.
func (mr *MockGitHubMockRecorder) NewRequest(method, url, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRequest", reflect.TypeOf((*MockGitHub)(nil).NewRequest), method, url, body)
}

// PropertiesToProtoMessage mocks base method.
func (m *MockGitHub) PropertiesToProtoMessage(entType v10.Entity, props *properties.Properties) (protoreflect.ProtoMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PropertiesToProtoMessage", entType, props)
	ret0, _ := ret[0].(protoreflect.ProtoMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PropertiesToProtoMessage indicates an expected call of PropertiesToProtoMessage.
func (mr *MockGitHubMockRecorder) PropertiesToProtoMessage(entType, props any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PropertiesToProtoMessage", reflect.TypeOf((*MockGitHub)(nil).PropertiesToProtoMessage), entType, props)
}

// RegisterEntity mocks base method.
func (m *MockGitHub) RegisterEntity(ctx context.Context, entType v10.Entity, props *properties.Properties) (*properties.Properties, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterEntity", ctx, entType, props)
	ret0, _ := ret[0].(*properties.Properties)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterEntity indicates an expected call of RegisterEntity.
func (mr *MockGitHubMockRecorder) RegisterEntity(ctx, entType, props any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterEntity", reflect.TypeOf((*MockGitHub)(nil).RegisterEntity), ctx, entType, props)
}

// ReregisterEntity mocks base method.
func (m *MockGitHub) ReregisterEntity(ctx context.Context, entType v10.Entity, props *properties.Properties) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReregisterEntity", ctx, entType, props)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReregisterEntity indicates an expected call of ReregisterEntity.
func (mr *MockGitHubMockRecorder) ReregisterEntity(ctx, entType, props any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReregisterEntity", reflect.TypeOf((*MockGitHub)(nil).ReregisterEntity), ctx, entType, props)
}

// SetCommitStatus mocks base method.
func (m *MockGitHub) SetCommitStatus(arg0 context.Context, arg1, arg2, arg3 string, arg4 *github.RepoStatus) (*github.RepoStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCommitStatus", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.RepoStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetCommitStatus indicates an expected call of SetCommitStatus.
func (mr *MockGitHubMockRecorder) SetCommitStatus(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCommitStatus", reflect.TypeOf((*MockGitHub)(nil).SetCommitStatus), arg0, arg1, arg2, arg3, arg4)
}

// StartCheckRun mocks base method.
func (m *MockGitHub) StartCheckRun(arg0 context.Context, arg1, arg2 string, arg3 *github.CreateCheckRunOptions) (*github.CheckRun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartCheckRun", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.CheckRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartCheckRun indicates an expected call of StartCheckRun.
func (mr *MockGitHubMockRecorder) StartCheckRun(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCheckRun", reflect.TypeOf((*MockGitHub)(nil).StartCheckRun), arg0, arg1, arg2, arg3)
}

// SupportsEntity mocks base method.
func (m *MockGitHub) SupportsEntity(entType v10.Entity) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportsEntity", entType)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SupportsEntity indicates an expected call of SupportsEntity.
func (mr *MockGitHubMockRecorder) SupportsEntity(entType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportsEntity", reflect.TypeOf((*MockGitHub)(nil).SupportsEntity), entType)
}

// UpdateBranchProtection mocks base method.
func (m *MockGitHub) UpdateBranchProtection(arg0 context.Context, arg1, arg2, arg3 string, arg4 *github.ProtectionRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBranchProtection", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBranchProtection indicates an expected call of UpdateBranchProtection.
func (mr *MockGitHubMockRecorder) UpdateBranchProtection(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBranchProtection", reflect.TypeOf((*MockGitHub)(nil).UpdateBranchProtection), arg0, arg1, arg2, arg3, arg4)
}

// UpdateCheckRun mocks base method.
func (m *MockGitHub) UpdateCheckRun(arg0 context.Context, arg1, arg2 string, arg3 int64, arg4 *github.UpdateCheckRunOptions) (*github.CheckRun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCheckRun", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.CheckRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCheckRun indicates an expected call of UpdateCheckRun.
func (mr *MockGitHubMockRecorder) UpdateCheckRun(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCheckRun", reflect.TypeOf((*MockGitHub)(nil).UpdateCheckRun), arg0, arg1, arg2, arg3, arg4)
}

// UpdateIssueComment mocks base method.
func (m *MockGitHub) UpdateIssueComment(ctx context.Context, owner, repo string, number int64, comment string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIssueComment", ctx, owner, repo, number, comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIssueComment indicates an expected call of UpdateIssueComment.
func (mr *MockGitHubMockRecorder) UpdateIssueComment(ctx, owner, repo, number, comment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIssueComment", reflect.TypeOf((*MockGitHub)(nil).UpdateIssueComment), ctx, owner, repo, number, comment)
}

// UpdateReview mocks base method.
func (m *MockGitHub) UpdateReview(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 int64, arg5 string) (*github.PullRequestReview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReview", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*github.PullRequestReview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReview indicates an expected call of UpdateReview.
func (mr *MockGitHubMockRecorder) UpdateReview(arg0, arg1, arg2, arg3, arg4, arg5 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReview", reflect.TypeOf((*MockGitHub)(nil).UpdateReview), arg0, arg1, arg2, arg3, arg4, arg5)
}

// MockImageLister is a mock of ImageLister interface.
type MockImageLister struct {
	ctrl     *gomock.Controller
	recorder *MockImageListerMockRecorder
	isgomock struct{}
}

// MockImageListerMockRecorder is the mock recorder for MockImageLister.
type MockImageListerMockRecorder struct {
	mock *MockImageLister
}

// NewMockImageLister creates a new mock instance.
func NewMockImageLister(ctrl *gomock.Controller) *MockImageLister {
	mock := &MockImageLister{ctrl: ctrl}
	mock.recorder = &MockImageListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageLister) EXPECT() *MockImageListerMockRecorder {
	return m.recorder
}

// CanImplement mocks base method.
func (m *MockImageLister) CanImplement(trait v10.ProviderType) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanImplement", trait)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanImplement indicates an expected call of CanImplement.
func (mr *MockImageListerMockRecorder) CanImplement(trait any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanImplement", reflect.TypeOf((*MockImageLister)(nil).CanImplement), trait)
}

// DeregisterEntity mocks base method.
func (m *MockImageLister) DeregisterEntity(ctx context.Context, entType v10.Entity, props *properties.Properties) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterEntity", ctx, entType, props)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeregisterEntity indicates an expected call of DeregisterEntity.
func (mr *MockImageListerMockRecorder) DeregisterEntity(ctx, entType, props any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterEntity", reflect.TypeOf((*MockImageLister)(nil).DeregisterEntity), ctx, entType, props)
}

// FetchAllProperties mocks base method.
func (m *MockImageLister) FetchAllProperties(ctx context.Context, getByProps *properties.Properties, entType v10.Entity, cachedProps *properties.Properties) (*properties.Properties, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAllProperties", ctx, getByProps, entType, cachedProps)
	ret0, _ := ret[0].(*properties.Properties)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAllProperties indicates an expected call of FetchAllProperties.
func (mr *MockImageListerMockRecorder) FetchAllProperties(ctx, getByProps, entType, cachedProps any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllProperties", reflect.TypeOf((*MockImageLister)(nil).FetchAllProperties), ctx, getByProps, entType, cachedProps)
}

// FetchProperty mocks base method.
func (m *MockImageLister) FetchProperty(ctx context.Context, getByProps *properties.Properties, entType v10.Entity, key string) (*properties.Property, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchProperty", ctx, getByProps, entType, key)
	ret0, _ := ret[0].(*properties.Property)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchProperty indicates an expected call of FetchProperty.
func (mr *MockImageListerMockRecorder) FetchProperty(ctx, getByProps, entType, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchProperty", reflect.TypeOf((*MockImageLister)(nil).FetchProperty), ctx, getByProps, entType, key)
}

// GetEntityName mocks base method.
func (m *MockImageLister) GetEntityName(entType v10.Entity, props *properties.Properties) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityName", entType, props)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityName indicates an expected call of GetEntityName.
func (mr *MockImageListerMockRecorder) GetEntityName(entType, props any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityName", reflect.TypeOf((*MockImageLister)(nil).GetEntityName), entType, props)
}

// GetNamespaceURL mocks base method.
func (m *MockImageLister) GetNamespaceURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespaceURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNamespaceURL indicates an expected call of GetNamespaceURL.
func (mr *MockImageListerMockRecorder) GetNamespaceURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespaceURL", reflect.TypeOf((*MockImageLister)(nil).GetNamespaceURL))
}

// ListImages mocks base method.
func (m *MockImageLister) ListImages(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListImages", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListImages indicates an expected call of ListImages.
func (mr *MockImageListerMockRecorder) ListImages(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImages", reflect.TypeOf((*MockImageLister)(nil).ListImages), ctx)
}

// PropertiesToProtoMessage mocks base method.
func (m *MockImageLister) PropertiesToProtoMessage(entType v10.Entity, props *properties.Properties) (protoreflect.ProtoMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PropertiesToProtoMessage", entType, props)
	ret0, _ := ret[0].(protoreflect.ProtoMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PropertiesToProtoMessage indicates an expected call of PropertiesToProtoMessage.
func (mr *MockImageListerMockRecorder) PropertiesToProtoMessage(entType, props any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PropertiesToProtoMessage", reflect.TypeOf((*MockImageLister)(nil).PropertiesToProtoMessage), entType, props)
}

// RegisterEntity mocks base method.
func (m *MockImageLister) RegisterEntity(ctx context.Context, entType v10.Entity, props *properties.Properties) (*properties.Properties, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterEntity", ctx, entType, props)
	ret0, _ := ret[0].(*properties.Properties)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterEntity indicates an expected call of RegisterEntity.
func (mr *MockImageListerMockRecorder) RegisterEntity(ctx, entType, props any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterEntity", reflect.TypeOf((*MockImageLister)(nil).RegisterEntity), ctx, entType, props)
}

// ReregisterEntity mocks base method.
func (m *MockImageLister) ReregisterEntity(ctx context.Context, entType v10.Entity, props *properties.Properties) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReregisterEntity", ctx, entType, props)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReregisterEntity indicates an expected call of ReregisterEntity.
func (mr *MockImageListerMockRecorder) ReregisterEntity(ctx, entType, props any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReregisterEntity", reflect.TypeOf((*MockImageLister)(nil).ReregisterEntity), ctx, entType, props)
}

// SupportsEntity mocks base method.
func (m *MockImageLister) SupportsEntity(entType v10.Entity) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportsEntity", entType)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SupportsEntity indicates an expected call of SupportsEntity.
func (mr *MockImageListerMockRecorder) SupportsEntity(entType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportsEntity", reflect.TypeOf((*MockImageLister)(nil).SupportsEntity), entType)
}

// MockOCI is a mock of OCI interface.
type MockOCI struct {
	ctrl     *gomock.Controller
	recorder *MockOCIMockRecorder
	isgomock struct{}
}

// MockOCIMockRecorder is the mock recorder for MockOCI.
type MockOCIMockRecorder struct {
	mock *MockOCI
}

// NewMockOCI creates a new mock instance.
func NewMockOCI(ctrl *gomock.Controller) *MockOCI {
	mock := &MockOCI{ctrl: ctrl}
	mock.recorder = &MockOCIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOCI) EXPECT() *MockOCIMockRecorder {
	return m.recorder
}

// CanImplement mocks base method.
func (m *MockOCI) CanImplement(trait v10.ProviderType) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanImplement", trait)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanImplement indicates an expected call of CanImplement.
func (mr *MockOCIMockRecorder) CanImplement(trait any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanImplement", reflect.TypeOf((*MockOCI)(nil).CanImplement), trait)
}

// DeregisterEntity mocks base method.
func (m *MockOCI) DeregisterEntity(ctx context.Context, entType v10.Entity, props *properties.Properties) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterEntity", ctx, entType, props)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeregisterEntity indicates an expected call of DeregisterEntity.
func (mr *MockOCIMockRecorder) DeregisterEntity(ctx, entType, props any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterEntity", reflect.TypeOf((*MockOCI)(nil).DeregisterEntity), ctx, entType, props)
}

// FetchAllProperties mocks base method.
func (m *MockOCI) FetchAllProperties(ctx context.Context, getByProps *properties.Properties, entType v10.Entity, cachedProps *properties.Properties) (*properties.Properties, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAllProperties", ctx, getByProps, entType, cachedProps)
	ret0, _ := ret[0].(*properties.Properties)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAllProperties indicates an expected call of FetchAllProperties.
func (mr *MockOCIMockRecorder) FetchAllProperties(ctx, getByProps, entType, cachedProps any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllProperties", reflect.TypeOf((*MockOCI)(nil).FetchAllProperties), ctx, getByProps, entType, cachedProps)
}

// FetchProperty mocks base method.
func (m *MockOCI) FetchProperty(ctx context.Context, getByProps *properties.Properties, entType v10.Entity, key string) (*properties.Property, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchProperty", ctx, getByProps, entType, key)
	ret0, _ := ret[0].(*properties.Property)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchProperty indicates an expected call of FetchProperty.
func (mr *MockOCIMockRecorder) FetchProperty(ctx, getByProps, entType, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchProperty", reflect.TypeOf((*MockOCI)(nil).FetchProperty), ctx, getByProps, entType, key)
}

// GetArtifactVersions mocks base method.
func (m *MockOCI) GetArtifactVersions(ctx context.Context, artifact *v10.Artifact, filter v11.GetArtifactVersionsFilter) ([]*v10.ArtifactVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtifactVersions", ctx, artifact, filter)
	ret0, _ := ret[0].([]*v10.ArtifactVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtifactVersions indicates an expected call of GetArtifactVersions.
func (mr *MockOCIMockRecorder) GetArtifactVersions(ctx, artifact, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtifactVersions", reflect.TypeOf((*MockOCI)(nil).GetArtifactVersions), ctx, artifact, filter)
}

// GetAuthenticator mocks base method.
func (m *MockOCI) GetAuthenticator() (authn.Authenticator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthenticator")
	ret0, _ := ret[0].(authn.Authenticator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthenticator indicates an expected call of GetAuthenticator.
func (mr *MockOCIMockRecorder) GetAuthenticator() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthenticator", reflect.TypeOf((*MockOCI)(nil).GetAuthenticator))
}

// GetDigest mocks base method.
func (m *MockOCI) GetDigest(ctx context.Context, name, tag string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDigest", ctx, name, tag)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDigest indicates an expected call of GetDigest.
func (mr *MockOCIMockRecorder) GetDigest(ctx, name, tag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDigest", reflect.TypeOf((*MockOCI)(nil).GetDigest), ctx, name, tag)
}

// GetEntityName mocks base method.
func (m *MockOCI) GetEntityName(entType v10.Entity, props *properties.Properties) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityName", entType, props)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityName indicates an expected call of GetEntityName.
func (mr *MockOCIMockRecorder) GetEntityName(entType, props any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityName", reflect.TypeOf((*MockOCI)(nil).GetEntityName), entType, props)
}

// GetManifest mocks base method.
func (m *MockOCI) GetManifest(ctx context.Context, name, tag string) (*v1.Manifest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManifest", ctx, name, tag)
	ret0, _ := ret[0].(*v1.Manifest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManifest indicates an expected call of GetManifest.
func (mr *MockOCIMockRecorder) GetManifest(ctx, name, tag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManifest", reflect.TypeOf((*MockOCI)(nil).GetManifest), ctx, name, tag)
}

// GetReferrer mocks base method.
func (m *MockOCI) GetReferrer(ctx context.Context, name, tag, artifactType string) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReferrer", ctx, name, tag, artifactType)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReferrer indicates an expected call of GetReferrer.
func (mr *MockOCIMockRecorder) GetReferrer(ctx, name, tag, artifactType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReferrer", reflect.TypeOf((*MockOCI)(nil).GetReferrer), ctx, name, tag, artifactType)
}

// GetRegistry mocks base method.
func (m *MockOCI) GetRegistry() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegistry")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRegistry indicates an expected call of GetRegistry.
func (mr *MockOCIMockRecorder) GetRegistry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegistry", reflect.TypeOf((*MockOCI)(nil).GetRegistry))
}

// ListTags mocks base method.
func (m *MockOCI) ListTags(ctx context.Context, name string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTags", ctx, name)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTags indicates an expected call of ListTags.
func (mr *MockOCIMockRecorder) ListTags(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTags", reflect.TypeOf((*MockOCI)(nil).ListTags), ctx, name)
}

// PropertiesToProtoMessage mocks base method.
func (m *MockOCI) PropertiesToProtoMessage(entType v10.Entity, props *properties.Properties) (protoreflect.ProtoMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PropertiesToProtoMessage", entType, props)
	ret0, _ := ret[0].(protoreflect.ProtoMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PropertiesToProtoMessage indicates an expected call of PropertiesToProtoMessage.
func (mr *MockOCIMockRecorder) PropertiesToProtoMessage(entType, props any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PropertiesToProtoMessage", reflect.TypeOf((*MockOCI)(nil).PropertiesToProtoMessage), entType, props)
}

// RegisterEntity mocks base method.
func (m *MockOCI) RegisterEntity(ctx context.Context, entType v10.Entity, props *properties.Properties) (*properties.Properties, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterEntity", ctx, entType, props)
	ret0, _ := ret[0].(*properties.Properties)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterEntity indicates an expected call of RegisterEntity.
func (mr *MockOCIMockRecorder) RegisterEntity(ctx, entType, props any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterEntity", reflect.TypeOf((*MockOCI)(nil).RegisterEntity), ctx, entType, props)
}

// ReregisterEntity mocks base method.
func (m *MockOCI) ReregisterEntity(ctx context.Context, entType v10.Entity, props *properties.Properties) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReregisterEntity", ctx, entType, props)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReregisterEntity indicates an expected call of ReregisterEntity.
func (mr *MockOCIMockRecorder) ReregisterEntity(ctx, entType, props any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReregisterEntity", reflect.TypeOf((*MockOCI)(nil).ReregisterEntity), ctx, entType, props)
}

// SupportsEntity mocks base method.
func (m *MockOCI) SupportsEntity(entType v10.Entity) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportsEntity", entType)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SupportsEntity indicates an expected call of SupportsEntity.
func (mr *MockOCIMockRecorder) SupportsEntity(entType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportsEntity", reflect.TypeOf((*MockOCI)(nil).SupportsEntity), entType)
}

// MockPullRequestCommenter is a mock of PullRequestCommenter interface.
type MockPullRequestCommenter struct {
	ctrl     *gomock.Controller
	recorder *MockPullRequestCommenterMockRecorder
	isgomock struct{}
}

// MockPullRequestCommenterMockRecorder is the mock recorder for MockPullRequestCommenter.
type MockPullRequestCommenterMockRecorder struct {
	mock *MockPullRequestCommenter
}

// NewMockPullRequestCommenter creates a new mock instance.
func NewMockPullRequestCommenter(ctrl *gomock.Controller) *MockPullRequestCommenter {
	mock := &MockPullRequestCommenter{ctrl: ctrl}
	mock.recorder = &MockPullRequestCommenterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPullRequestCommenter) EXPECT() *MockPullRequestCommenterMockRecorder {
	return m.recorder
}

// CanImplement mocks base method.
func (m *MockPullRequestCommenter) CanImplement(trait v10.ProviderType) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanImplement", trait)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanImplement indicates an expected call of CanImplement.
func (mr *MockPullRequestCommenterMockRecorder) CanImplement(trait any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanImplement", reflect.TypeOf((*MockPullRequestCommenter)(nil).CanImplement), trait)
}

// CommentOnPullRequest mocks base method.
func (m *MockPullRequestCommenter) CommentOnPullRequest(ctx context.Context, getByProps *properties.Properties, comment v11.PullRequestCommentInfo) (*v11.CommentResultMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommentOnPullRequest", ctx, getByProps, comment)
	ret0, _ := ret[0].(*v11.CommentResultMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommentOnPullRequest indicates an expected call of CommentOnPullRequest.
func (mr *MockPullRequestCommenterMockRecorder) CommentOnPullRequest(ctx, getByProps, comment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommentOnPullRequest", reflect.TypeOf((*MockPullRequestCommenter)(nil).CommentOnPullRequest), ctx, getByProps, comment)
}

// DeregisterEntity mocks base method.
func (m *MockPullRequestCommenter) DeregisterEntity(ctx context.Context, entType v10.Entity, props *properties.Properties) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterEntity", ctx, entType, props)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeregisterEntity indicates an expected call of DeregisterEntity.
func (mr *MockPullRequestCommenterMockRecorder) DeregisterEntity(ctx, entType, props any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterEntity", reflect.TypeOf((*MockPullRequestCommenter)(nil).DeregisterEntity), ctx, entType, props)
}

// FetchAllProperties mocks base method.
func (m *MockPullRequestCommenter) FetchAllProperties(ctx context.Context, getByProps *properties.Properties, entType v10.Entity, cachedProps *properties.Properties) (*properties.Properties, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAllProperties", ctx, getByProps, entType, cachedProps)
	ret0, _ := ret[0].(*properties.Properties)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAllProperties indicates an expected call of FetchAllProperties.
func (mr *MockPullRequestCommenterMockRecorder) FetchAllProperties(ctx, getByProps, entType, cachedProps any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllProperties", reflect.TypeOf((*MockPullRequestCommenter)(nil).FetchAllProperties), ctx, getByProps, entType, cachedProps)
}

// FetchProperty mocks base method.
func (m *MockPullRequestCommenter) FetchProperty(ctx context.Context, getByProps *properties.Properties, entType v10.Entity, key string) (*properties.Property, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchProperty", ctx, getByProps, entType, key)
	ret0, _ := ret[0].(*properties.Property)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchProperty indicates an expected call of FetchProperty.
func (mr *MockPullRequestCommenterMockRecorder) FetchProperty(ctx, getByProps, entType, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchProperty", reflect.TypeOf((*MockPullRequestCommenter)(nil).FetchProperty), ctx, getByProps, entType, key)
}

// GetEntityName mocks base method.
func (m *MockPullRequestCommenter) GetEntityName(entType v10.Entity, props *properties.Properties) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityName", entType, props)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityName indicates an expected call of GetEntityName.
func (mr *MockPullRequestCommenterMockRecorder) GetEntityName(entType, props any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityName", reflect.TypeOf((*MockPullRequestCommenter)(nil).GetEntityName), entType, props)
}

// PropertiesToProtoMessage mocks base method.
func (m *MockPullRequestCommenter) PropertiesToProtoMessage(entType v10.Entity, props *properties.Properties) (protoreflect.ProtoMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PropertiesToProtoMessage", entType, props)
	ret0, _ := ret[0].(protoreflect.ProtoMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PropertiesToProtoMessage indicates an expected call of PropertiesToProtoMessage.
func (mr *MockPullRequestCommenterMockRecorder) PropertiesToProtoMessage(entType, props any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PropertiesToProtoMessage", reflect.TypeOf((*MockPullRequestCommenter)(nil).PropertiesToProtoMessage), entType, props)
}

// RegisterEntity mocks base method.
func (m *MockPullRequestCommenter) RegisterEntity(ctx context.Context, entType v10.Entity, props *properties.Properties) (*properties.Properties, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterEntity", ctx, entType, props)
	ret0, _ := ret[0].(*properties.Properties)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterEntity indicates an expected call of RegisterEntity.
func (mr *MockPullRequestCommenterMockRecorder) RegisterEntity(ctx, entType, props any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterEntity", reflect.TypeOf((*MockPullRequestCommenter)(nil).RegisterEntity), ctx, entType, props)
}

// ReregisterEntity mocks base method.
func (m *MockPullRequestCommenter) ReregisterEntity(ctx context.Context, entType v10.Entity, props *properties.Properties) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReregisterEntity", ctx, entType, props)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReregisterEntity indicates an expected call of ReregisterEntity.
func (mr *MockPullRequestCommenterMockRecorder) ReregisterEntity(ctx, entType, props any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReregisterEntity", reflect.TypeOf((*MockPullRequestCommenter)(nil).ReregisterEntity), ctx, entType, props)
}

// SupportsEntity mocks base method.
func (m *MockPullRequestCommenter) SupportsEntity(entType v10.Entity) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportsEntity", entType)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SupportsEntity indicates an expected call of SupportsEntity.
func (mr *MockPullRequestCommenterMockRecorder) SupportsEntity(entType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportsEntity", reflect.TypeOf((*MockPullRequestCommenter)(nil).SupportsEntity), entType)
}
