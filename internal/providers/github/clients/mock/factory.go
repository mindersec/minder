// Code generated by MockGen. DO NOT EDIT.
// Source: ./factory.go
//
// Generated by this command:
//
//	mockgen -package mock_clients -destination=./mock/factory.go -source=./factory.go
//

// Package mock_clients is a generated GoMock package.
package mock_clients

import (
	reflect "reflect"

	github "github.com/google/go-github/v63/github"
	github0 "github.com/stacklok/minder/internal/providers/github"
	v1 "github.com/stacklok/minder/pkg/providers/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockGitHubClientFactory is a mock of GitHubClientFactory interface.
type MockGitHubClientFactory struct {
	ctrl     *gomock.Controller
	recorder *MockGitHubClientFactoryMockRecorder
}

// MockGitHubClientFactoryMockRecorder is the mock recorder for MockGitHubClientFactory.
type MockGitHubClientFactoryMockRecorder struct {
	mock *MockGitHubClientFactory
}

// NewMockGitHubClientFactory creates a new mock instance.
func NewMockGitHubClientFactory(ctrl *gomock.Controller) *MockGitHubClientFactory {
	mock := &MockGitHubClientFactory{ctrl: ctrl}
	mock.recorder = &MockGitHubClientFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitHubClientFactory) EXPECT() *MockGitHubClientFactoryMockRecorder {
	return m.recorder
}

// BuildAppClient mocks base method.
func (m *MockGitHubClientFactory) BuildAppClient(baseURL string, credential v1.GitHubCredential, appName string, userID int64, isOrg bool) (*github.Client, github0.Delegate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildAppClient", baseURL, credential, appName, userID, isOrg)
	ret0, _ := ret[0].(*github.Client)
	ret1, _ := ret[1].(github0.Delegate)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// BuildAppClient indicates an expected call of BuildAppClient.
func (mr *MockGitHubClientFactoryMockRecorder) BuildAppClient(baseURL, credential, appName, userID, isOrg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildAppClient", reflect.TypeOf((*MockGitHubClientFactory)(nil).BuildAppClient), baseURL, credential, appName, userID, isOrg)
}

// BuildOAuthClient mocks base method.
func (m *MockGitHubClientFactory) BuildOAuthClient(baseURL string, credential v1.GitHubCredential, owner string) (*github.Client, github0.Delegate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildOAuthClient", baseURL, credential, owner)
	ret0, _ := ret[0].(*github.Client)
	ret1, _ := ret[1].(github0.Delegate)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// BuildOAuthClient indicates an expected call of BuildOAuthClient.
func (mr *MockGitHubClientFactoryMockRecorder) BuildOAuthClient(baseURL, credential, owner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildOAuthClient", reflect.TypeOf((*MockGitHubClientFactory)(nil).BuildOAuthClient), baseURL, credential, owner)
}
