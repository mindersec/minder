// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stacklok/minder/internal/providers/github/service (interfaces: GitHubProviderService)
//
// Generated by this command:
//
//	mockgen -package mockghprovsvc -destination internal/providers/github/service/mock/service.go github.com/stacklok/minder/internal/providers/github/service GitHubProviderService
//

// Package mockghprovsvc is a generated GoMock package.
package mockghprovsvc

import (
	context "context"
	http "net/http"
	reflect "reflect"

	db "github.com/stacklok/minder/internal/db"
	gomock "go.uber.org/mock/gomock"
	oauth2 "golang.org/x/oauth2"
)

// MockGitHubProviderService is a mock of GitHubProviderService interface.
type MockGitHubProviderService struct {
	ctrl     *gomock.Controller
	recorder *MockGitHubProviderServiceMockRecorder
}

// MockGitHubProviderServiceMockRecorder is the mock recorder for MockGitHubProviderService.
type MockGitHubProviderServiceMockRecorder struct {
	mock *MockGitHubProviderService
}

// NewMockGitHubProviderService creates a new mock instance.
func NewMockGitHubProviderService(ctrl *gomock.Controller) *MockGitHubProviderService {
	mock := &MockGitHubProviderService{ctrl: ctrl}
	mock.recorder = &MockGitHubProviderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitHubProviderService) EXPECT() *MockGitHubProviderServiceMockRecorder {
	return m.recorder
}

// CreateGitHubAppProvider mocks base method.
func (m *MockGitHubProviderService) CreateGitHubAppProvider(arg0 context.Context, arg1 oauth2.Token, arg2 db.GetProjectIDBySessionStateRow, arg3 int64, arg4 string) (*db.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGitHubAppProvider", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*db.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGitHubAppProvider indicates an expected call of CreateGitHubAppProvider.
func (mr *MockGitHubProviderServiceMockRecorder) CreateGitHubAppProvider(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGitHubAppProvider", reflect.TypeOf((*MockGitHubProviderService)(nil).CreateGitHubAppProvider), arg0, arg1, arg2, arg3, arg4)
}

// CreateGitHubAppWithoutInvitation mocks base method.
func (m *MockGitHubProviderService) CreateGitHubAppWithoutInvitation(arg0 context.Context, arg1 db.Querier, arg2, arg3 int64) (*db.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGitHubAppWithoutInvitation", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*db.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGitHubAppWithoutInvitation indicates an expected call of CreateGitHubAppWithoutInvitation.
func (mr *MockGitHubProviderServiceMockRecorder) CreateGitHubAppWithoutInvitation(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGitHubAppWithoutInvitation", reflect.TypeOf((*MockGitHubProviderService)(nil).CreateGitHubAppWithoutInvitation), arg0, arg1, arg2, arg3)
}

// CreateGitHubOAuthProvider mocks base method.
func (m *MockGitHubProviderService) CreateGitHubOAuthProvider(arg0 context.Context, arg1 string, arg2 db.ProviderClass, arg3 oauth2.Token, arg4 db.GetProjectIDBySessionStateRow, arg5 string) (*db.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGitHubOAuthProvider", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*db.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGitHubOAuthProvider indicates an expected call of CreateGitHubOAuthProvider.
func (mr *MockGitHubProviderServiceMockRecorder) CreateGitHubOAuthProvider(arg0, arg1, arg2, arg3, arg4, arg5 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGitHubOAuthProvider", reflect.TypeOf((*MockGitHubProviderService)(nil).CreateGitHubOAuthProvider), arg0, arg1, arg2, arg3, arg4, arg5)
}

// DeleteGitHubAppInstallation mocks base method.
func (m *MockGitHubProviderService) DeleteGitHubAppInstallation(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGitHubAppInstallation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGitHubAppInstallation indicates an expected call of DeleteGitHubAppInstallation.
func (mr *MockGitHubProviderServiceMockRecorder) DeleteGitHubAppInstallation(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGitHubAppInstallation", reflect.TypeOf((*MockGitHubProviderService)(nil).DeleteGitHubAppInstallation), arg0, arg1)
}

// DeleteProvider mocks base method.
func (m *MockGitHubProviderService) DeleteProvider(arg0 context.Context, arg1 *db.Provider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProvider", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProvider indicates an expected call of DeleteProvider.
func (mr *MockGitHubProviderServiceMockRecorder) DeleteProvider(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProvider", reflect.TypeOf((*MockGitHubProviderService)(nil).DeleteProvider), arg0, arg1)
}

// ValidateGitHubAppWebhookPayload mocks base method.
func (m *MockGitHubProviderService) ValidateGitHubAppWebhookPayload(arg0 *http.Request) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateGitHubAppWebhookPayload", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateGitHubAppWebhookPayload indicates an expected call of ValidateGitHubAppWebhookPayload.
func (mr *MockGitHubProviderServiceMockRecorder) ValidateGitHubAppWebhookPayload(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateGitHubAppWebhookPayload", reflect.TypeOf((*MockGitHubProviderService)(nil).ValidateGitHubAppWebhookPayload), arg0)
}

// ValidateGitHubInstallationId mocks base method.
func (m *MockGitHubProviderService) ValidateGitHubInstallationId(arg0 context.Context, arg1 *oauth2.Token, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateGitHubInstallationId", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateGitHubInstallationId indicates an expected call of ValidateGitHubInstallationId.
func (mr *MockGitHubProviderServiceMockRecorder) ValidateGitHubInstallationId(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateGitHubInstallationId", reflect.TypeOf((*MockGitHubProviderService)(nil).ValidateGitHubInstallationId), arg0, arg1, arg2)
}
