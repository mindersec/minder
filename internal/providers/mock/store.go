// Code generated by MockGen. DO NOT EDIT.
// Source: ./store.go
//
// Generated by this command:
//
//	mockgen -package mock_providers -destination=./mock/store.go -source=./store.go
//

// Package mock_providers is a generated GoMock package.
package mock_providers

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	db "github.com/stacklok/minder/internal/db"
	gomock "go.uber.org/mock/gomock"
)

// MockProviderStore is a mock of ProviderStore interface.
type MockProviderStore struct {
	ctrl     *gomock.Controller
	recorder *MockProviderStoreMockRecorder
}

// MockProviderStoreMockRecorder is the mock recorder for MockProviderStore.
type MockProviderStoreMockRecorder struct {
	mock *MockProviderStore
}

// NewMockProviderStore creates a new mock instance.
func NewMockProviderStore(ctrl *gomock.Controller) *MockProviderStore {
	mock := &MockProviderStore{ctrl: ctrl}
	mock.recorder = &MockProviderStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProviderStore) EXPECT() *MockProviderStoreMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockProviderStore) GetByID(ctx context.Context, providerID uuid.UUID) (*db.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, providerID)
	ret0, _ := ret[0].(*db.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockProviderStoreMockRecorder) GetByID(ctx, providerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockProviderStore)(nil).GetByID), ctx, providerID)
}

// GetByName mocks base method.
func (m *MockProviderStore) GetByName(ctx context.Context, projectID uuid.UUID, name string) (*db.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, projectID, name)
	ret0, _ := ret[0].(*db.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockProviderStoreMockRecorder) GetByName(ctx, projectID, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockProviderStore)(nil).GetByName), ctx, projectID, name)
}

// GetByNameAndTrait mocks base method.
func (m *MockProviderStore) GetByNameAndTrait(ctx context.Context, projectID uuid.UUID, name string, trait db.ProviderType) ([]db.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByNameAndTrait", ctx, projectID, name, trait)
	ret0, _ := ret[0].([]db.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByNameAndTrait indicates an expected call of GetByNameAndTrait.
func (mr *MockProviderStoreMockRecorder) GetByNameAndTrait(ctx, projectID, name, trait any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByNameAndTrait", reflect.TypeOf((*MockProviderStore)(nil).GetByNameAndTrait), ctx, projectID, name, trait)
}

// GetByNameInSpecificProject mocks base method.
func (m *MockProviderStore) GetByNameInSpecificProject(ctx context.Context, projectID uuid.UUID, name string) (*db.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByNameInSpecificProject", ctx, projectID, name)
	ret0, _ := ret[0].(*db.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByNameInSpecificProject indicates an expected call of GetByNameInSpecificProject.
func (mr *MockProviderStoreMockRecorder) GetByNameInSpecificProject(ctx, projectID, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByNameInSpecificProject", reflect.TypeOf((*MockProviderStore)(nil).GetByNameInSpecificProject), ctx, projectID, name)
}
