// Code generated by MockGen. DO NOT EDIT.
// Source: ./auth_manager.go
//
// Generated by this command:
//
//	mockgen -package mock_manager -destination=./mock/auth_manager.go -source=./auth_manager.go
//

// Package mock_manager is a generated GoMock package.
package mock_manager

import (
	context "context"
	json "encoding/json"
	reflect "reflect"

	db "github.com/stacklok/minder/internal/db"
	manager "github.com/stacklok/minder/internal/providers/manager"
	v1 "github.com/stacklok/minder/pkg/providers/v1"
	gomock "go.uber.org/mock/gomock"
	oauth2 "golang.org/x/oauth2"
)

// MockAuthManager is a mock of AuthManager interface.
type MockAuthManager struct {
	ctrl     *gomock.Controller
	recorder *MockAuthManagerMockRecorder
}

// MockAuthManagerMockRecorder is the mock recorder for MockAuthManager.
type MockAuthManagerMockRecorder struct {
	mock *MockAuthManager
}

// NewMockAuthManager creates a new mock instance.
func NewMockAuthManager(ctrl *gomock.Controller) *MockAuthManager {
	mock := &MockAuthManager{ctrl: ctrl}
	mock.recorder = &MockAuthManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthManager) EXPECT() *MockAuthManagerMockRecorder {
	return m.recorder
}

// NewOAuthConfig mocks base method.
func (m *MockAuthManager) NewOAuthConfig(providerClass db.ProviderClass, cli bool) (*oauth2.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewOAuthConfig", providerClass, cli)
	ret0, _ := ret[0].(*oauth2.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewOAuthConfig indicates an expected call of NewOAuthConfig.
func (mr *MockAuthManagerMockRecorder) NewOAuthConfig(providerClass, cli any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewOAuthConfig", reflect.TypeOf((*MockAuthManager)(nil).NewOAuthConfig), providerClass, cli)
}

// ValidateCredentials mocks base method.
func (m *MockAuthManager) ValidateCredentials(ctx context.Context, providerClass db.ProviderClass, cred v1.Credential, opts ...manager.CredentialVerifyOptFn) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, providerClass, cred}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidateCredentials", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateCredentials indicates an expected call of ValidateCredentials.
func (mr *MockAuthManagerMockRecorder) ValidateCredentials(ctx, providerClass, cred any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, providerClass, cred}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateCredentials", reflect.TypeOf((*MockAuthManager)(nil).ValidateCredentials), varargs...)
}

// MockproviderClassAuthManager is a mock of providerClassAuthManager interface.
type MockproviderClassAuthManager struct {
	ctrl     *gomock.Controller
	recorder *MockproviderClassAuthManagerMockRecorder
}

// MockproviderClassAuthManagerMockRecorder is the mock recorder for MockproviderClassAuthManager.
type MockproviderClassAuthManagerMockRecorder struct {
	mock *MockproviderClassAuthManager
}

// NewMockproviderClassAuthManager creates a new mock instance.
func NewMockproviderClassAuthManager(ctrl *gomock.Controller) *MockproviderClassAuthManager {
	mock := &MockproviderClassAuthManager{ctrl: ctrl}
	mock.recorder = &MockproviderClassAuthManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockproviderClassAuthManager) EXPECT() *MockproviderClassAuthManagerMockRecorder {
	return m.recorder
}

// MockproviderClassOAuthManager is a mock of providerClassOAuthManager interface.
type MockproviderClassOAuthManager struct {
	ctrl     *gomock.Controller
	recorder *MockproviderClassOAuthManagerMockRecorder
}

// MockproviderClassOAuthManagerMockRecorder is the mock recorder for MockproviderClassOAuthManager.
type MockproviderClassOAuthManagerMockRecorder struct {
	mock *MockproviderClassOAuthManager
}

// NewMockproviderClassOAuthManager creates a new mock instance.
func NewMockproviderClassOAuthManager(ctrl *gomock.Controller) *MockproviderClassOAuthManager {
	mock := &MockproviderClassOAuthManager{ctrl: ctrl}
	mock.recorder = &MockproviderClassOAuthManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockproviderClassOAuthManager) EXPECT() *MockproviderClassOAuthManagerMockRecorder {
	return m.recorder
}

// Build mocks base method.
func (m *MockproviderClassOAuthManager) Build(ctx context.Context, config *db.Provider) (v1.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build", ctx, config)
	ret0, _ := ret[0].(v1.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Build indicates an expected call of Build.
func (mr *MockproviderClassOAuthManagerMockRecorder) Build(ctx, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockproviderClassOAuthManager)(nil).Build), ctx, config)
}

// Delete mocks base method.
func (m *MockproviderClassOAuthManager) Delete(ctx context.Context, config *db.Provider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockproviderClassOAuthManagerMockRecorder) Delete(ctx, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockproviderClassOAuthManager)(nil).Delete), ctx, config)
}

// GetConfig mocks base method.
func (m *MockproviderClassOAuthManager) GetConfig(ctx context.Context, class db.ProviderClass, userConfig json.RawMessage) (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig", ctx, class, userConfig)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockproviderClassOAuthManagerMockRecorder) GetConfig(ctx, class, userConfig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockproviderClassOAuthManager)(nil).GetConfig), ctx, class, userConfig)
}

// GetSupportedClasses mocks base method.
func (m *MockproviderClassOAuthManager) GetSupportedClasses() []db.ProviderClass {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportedClasses")
	ret0, _ := ret[0].([]db.ProviderClass)
	return ret0
}

// GetSupportedClasses indicates an expected call of GetSupportedClasses.
func (mr *MockproviderClassOAuthManagerMockRecorder) GetSupportedClasses() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportedClasses", reflect.TypeOf((*MockproviderClassOAuthManager)(nil).GetSupportedClasses))
}

// MarshallConfig mocks base method.
func (m *MockproviderClassOAuthManager) MarshallConfig(ctx context.Context, class db.ProviderClass, config json.RawMessage) (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshallConfig", ctx, class, config)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshallConfig indicates an expected call of MarshallConfig.
func (mr *MockproviderClassOAuthManagerMockRecorder) MarshallConfig(ctx, class, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshallConfig", reflect.TypeOf((*MockproviderClassOAuthManager)(nil).MarshallConfig), ctx, class, config)
}

// NewOAuthConfig mocks base method.
func (m *MockproviderClassOAuthManager) NewOAuthConfig(providerClass db.ProviderClass, cli bool) (*oauth2.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewOAuthConfig", providerClass, cli)
	ret0, _ := ret[0].(*oauth2.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewOAuthConfig indicates an expected call of NewOAuthConfig.
func (mr *MockproviderClassOAuthManagerMockRecorder) NewOAuthConfig(providerClass, cli any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewOAuthConfig", reflect.TypeOf((*MockproviderClassOAuthManager)(nil).NewOAuthConfig), providerClass, cli)
}

// ValidateCredentials mocks base method.
func (m *MockproviderClassOAuthManager) ValidateCredentials(ctx context.Context, cred v1.Credential, params *manager.CredentialVerifyParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateCredentials", ctx, cred, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateCredentials indicates an expected call of ValidateCredentials.
func (mr *MockproviderClassOAuthManagerMockRecorder) ValidateCredentials(ctx, cred, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateCredentials", reflect.TypeOf((*MockproviderClassOAuthManager)(nil).ValidateCredentials), ctx, cred, params)
}
