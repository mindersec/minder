// Code generated by MockGen. DO NOT EDIT.
// Source: ./interface.go
//
// Generated by this command:
//
//	mockgen -package mock_selectors -destination=./mock/interface.go -source=./interface.go
//

// Package mock_selectors is a generated GoMock package.
package mock_selectors

import (
	context "context"
	reflect "reflect"

	properties "github.com/stacklok/minder/internal/entities/properties"
	proto "github.com/stacklok/minder/internal/proto"
	v1 "github.com/stacklok/minder/pkg/api/protobuf/go/minder/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockRepoSelectorConverter is a mock of RepoSelectorConverter interface.
type MockRepoSelectorConverter struct {
	ctrl     *gomock.Controller
	recorder *MockRepoSelectorConverterMockRecorder
}

// MockRepoSelectorConverterMockRecorder is the mock recorder for MockRepoSelectorConverter.
type MockRepoSelectorConverterMockRecorder struct {
	mock *MockRepoSelectorConverter
}

// NewMockRepoSelectorConverter creates a new mock instance.
func NewMockRepoSelectorConverter(ctrl *gomock.Controller) *MockRepoSelectorConverter {
	mock := &MockRepoSelectorConverter{ctrl: ctrl}
	mock.recorder = &MockRepoSelectorConverterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepoSelectorConverter) EXPECT() *MockRepoSelectorConverterMockRecorder {
	return m.recorder
}

// CanImplement mocks base method.
func (m *MockRepoSelectorConverter) CanImplement(trait v1.ProviderType) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanImplement", trait)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanImplement indicates an expected call of CanImplement.
func (mr *MockRepoSelectorConverterMockRecorder) CanImplement(trait any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanImplement", reflect.TypeOf((*MockRepoSelectorConverter)(nil).CanImplement), trait)
}

// FetchAllProperties mocks base method.
func (m *MockRepoSelectorConverter) FetchAllProperties(ctx context.Context, getByProps *properties.Properties, entType v1.Entity, cachedProps *properties.Properties) (*properties.Properties, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAllProperties", ctx, getByProps, entType, cachedProps)
	ret0, _ := ret[0].(*properties.Properties)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAllProperties indicates an expected call of FetchAllProperties.
func (mr *MockRepoSelectorConverterMockRecorder) FetchAllProperties(ctx, getByProps, entType, cachedProps any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllProperties", reflect.TypeOf((*MockRepoSelectorConverter)(nil).FetchAllProperties), ctx, getByProps, entType, cachedProps)
}

// FetchProperty mocks base method.
func (m *MockRepoSelectorConverter) FetchProperty(ctx context.Context, getByProps *properties.Properties, entType v1.Entity, key string) (*properties.Property, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchProperty", ctx, getByProps, entType, key)
	ret0, _ := ret[0].(*properties.Property)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchProperty indicates an expected call of FetchProperty.
func (mr *MockRepoSelectorConverterMockRecorder) FetchProperty(ctx, getByProps, entType, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchProperty", reflect.TypeOf((*MockRepoSelectorConverter)(nil).FetchProperty), ctx, getByProps, entType, key)
}

// GetEntityName mocks base method.
func (m *MockRepoSelectorConverter) GetEntityName(entType v1.Entity, props *properties.Properties) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityName", entType, props)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityName indicates an expected call of GetEntityName.
func (mr *MockRepoSelectorConverterMockRecorder) GetEntityName(entType, props any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityName", reflect.TypeOf((*MockRepoSelectorConverter)(nil).GetEntityName), entType, props)
}

// RepoToSelectorEntity mocks base method.
func (m *MockRepoSelectorConverter) RepoToSelectorEntity(ctx context.Context, repo *v1.Repository) *proto.SelectorEntity {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RepoToSelectorEntity", ctx, repo)
	ret0, _ := ret[0].(*proto.SelectorEntity)
	return ret0
}

// RepoToSelectorEntity indicates an expected call of RepoToSelectorEntity.
func (mr *MockRepoSelectorConverterMockRecorder) RepoToSelectorEntity(ctx, repo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepoToSelectorEntity", reflect.TypeOf((*MockRepoSelectorConverter)(nil).RepoToSelectorEntity), ctx, repo)
}

// MockArtifactSelectorConverter is a mock of ArtifactSelectorConverter interface.
type MockArtifactSelectorConverter struct {
	ctrl     *gomock.Controller
	recorder *MockArtifactSelectorConverterMockRecorder
}

// MockArtifactSelectorConverterMockRecorder is the mock recorder for MockArtifactSelectorConverter.
type MockArtifactSelectorConverterMockRecorder struct {
	mock *MockArtifactSelectorConverter
}

// NewMockArtifactSelectorConverter creates a new mock instance.
func NewMockArtifactSelectorConverter(ctrl *gomock.Controller) *MockArtifactSelectorConverter {
	mock := &MockArtifactSelectorConverter{ctrl: ctrl}
	mock.recorder = &MockArtifactSelectorConverterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArtifactSelectorConverter) EXPECT() *MockArtifactSelectorConverterMockRecorder {
	return m.recorder
}

// ArtifactToSelectorEntity mocks base method.
func (m *MockArtifactSelectorConverter) ArtifactToSelectorEntity(ctx context.Context, artifact *v1.Artifact) *proto.SelectorEntity {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ArtifactToSelectorEntity", ctx, artifact)
	ret0, _ := ret[0].(*proto.SelectorEntity)
	return ret0
}

// ArtifactToSelectorEntity indicates an expected call of ArtifactToSelectorEntity.
func (mr *MockArtifactSelectorConverterMockRecorder) ArtifactToSelectorEntity(ctx, artifact any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArtifactToSelectorEntity", reflect.TypeOf((*MockArtifactSelectorConverter)(nil).ArtifactToSelectorEntity), ctx, artifact)
}

// CanImplement mocks base method.
func (m *MockArtifactSelectorConverter) CanImplement(trait v1.ProviderType) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanImplement", trait)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanImplement indicates an expected call of CanImplement.
func (mr *MockArtifactSelectorConverterMockRecorder) CanImplement(trait any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanImplement", reflect.TypeOf((*MockArtifactSelectorConverter)(nil).CanImplement), trait)
}

// FetchAllProperties mocks base method.
func (m *MockArtifactSelectorConverter) FetchAllProperties(ctx context.Context, getByProps *properties.Properties, entType v1.Entity, cachedProps *properties.Properties) (*properties.Properties, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAllProperties", ctx, getByProps, entType, cachedProps)
	ret0, _ := ret[0].(*properties.Properties)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAllProperties indicates an expected call of FetchAllProperties.
func (mr *MockArtifactSelectorConverterMockRecorder) FetchAllProperties(ctx, getByProps, entType, cachedProps any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllProperties", reflect.TypeOf((*MockArtifactSelectorConverter)(nil).FetchAllProperties), ctx, getByProps, entType, cachedProps)
}

// FetchProperty mocks base method.
func (m *MockArtifactSelectorConverter) FetchProperty(ctx context.Context, getByProps *properties.Properties, entType v1.Entity, key string) (*properties.Property, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchProperty", ctx, getByProps, entType, key)
	ret0, _ := ret[0].(*properties.Property)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchProperty indicates an expected call of FetchProperty.
func (mr *MockArtifactSelectorConverterMockRecorder) FetchProperty(ctx, getByProps, entType, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchProperty", reflect.TypeOf((*MockArtifactSelectorConverter)(nil).FetchProperty), ctx, getByProps, entType, key)
}

// GetEntityName mocks base method.
func (m *MockArtifactSelectorConverter) GetEntityName(entType v1.Entity, props *properties.Properties) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityName", entType, props)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityName indicates an expected call of GetEntityName.
func (mr *MockArtifactSelectorConverterMockRecorder) GetEntityName(entType, props any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityName", reflect.TypeOf((*MockArtifactSelectorConverter)(nil).GetEntityName), entType, props)
}

// MockPullRequestSelectorConverter is a mock of PullRequestSelectorConverter interface.
type MockPullRequestSelectorConverter struct {
	ctrl     *gomock.Controller
	recorder *MockPullRequestSelectorConverterMockRecorder
}

// MockPullRequestSelectorConverterMockRecorder is the mock recorder for MockPullRequestSelectorConverter.
type MockPullRequestSelectorConverterMockRecorder struct {
	mock *MockPullRequestSelectorConverter
}

// NewMockPullRequestSelectorConverter creates a new mock instance.
func NewMockPullRequestSelectorConverter(ctrl *gomock.Controller) *MockPullRequestSelectorConverter {
	mock := &MockPullRequestSelectorConverter{ctrl: ctrl}
	mock.recorder = &MockPullRequestSelectorConverterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPullRequestSelectorConverter) EXPECT() *MockPullRequestSelectorConverterMockRecorder {
	return m.recorder
}

// CanImplement mocks base method.
func (m *MockPullRequestSelectorConverter) CanImplement(trait v1.ProviderType) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanImplement", trait)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanImplement indicates an expected call of CanImplement.
func (mr *MockPullRequestSelectorConverterMockRecorder) CanImplement(trait any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanImplement", reflect.TypeOf((*MockPullRequestSelectorConverter)(nil).CanImplement), trait)
}

// FetchAllProperties mocks base method.
func (m *MockPullRequestSelectorConverter) FetchAllProperties(ctx context.Context, getByProps *properties.Properties, entType v1.Entity, cachedProps *properties.Properties) (*properties.Properties, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAllProperties", ctx, getByProps, entType, cachedProps)
	ret0, _ := ret[0].(*properties.Properties)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAllProperties indicates an expected call of FetchAllProperties.
func (mr *MockPullRequestSelectorConverterMockRecorder) FetchAllProperties(ctx, getByProps, entType, cachedProps any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllProperties", reflect.TypeOf((*MockPullRequestSelectorConverter)(nil).FetchAllProperties), ctx, getByProps, entType, cachedProps)
}

// FetchProperty mocks base method.
func (m *MockPullRequestSelectorConverter) FetchProperty(ctx context.Context, getByProps *properties.Properties, entType v1.Entity, key string) (*properties.Property, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchProperty", ctx, getByProps, entType, key)
	ret0, _ := ret[0].(*properties.Property)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchProperty indicates an expected call of FetchProperty.
func (mr *MockPullRequestSelectorConverterMockRecorder) FetchProperty(ctx, getByProps, entType, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchProperty", reflect.TypeOf((*MockPullRequestSelectorConverter)(nil).FetchProperty), ctx, getByProps, entType, key)
}

// GetEntityName mocks base method.
func (m *MockPullRequestSelectorConverter) GetEntityName(entType v1.Entity, props *properties.Properties) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityName", entType, props)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityName indicates an expected call of GetEntityName.
func (mr *MockPullRequestSelectorConverterMockRecorder) GetEntityName(entType, props any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityName", reflect.TypeOf((*MockPullRequestSelectorConverter)(nil).GetEntityName), entType, props)
}

// PullRequestToSelectorEntity mocks base method.
func (m *MockPullRequestSelectorConverter) PullRequestToSelectorEntity(ctx context.Context, pullRequest *v1.PullRequest) *proto.SelectorEntity {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PullRequestToSelectorEntity", ctx, pullRequest)
	ret0, _ := ret[0].(*proto.SelectorEntity)
	return ret0
}

// PullRequestToSelectorEntity indicates an expected call of PullRequestToSelectorEntity.
func (mr *MockPullRequestSelectorConverterMockRecorder) PullRequestToSelectorEntity(ctx, pullRequest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PullRequestToSelectorEntity", reflect.TypeOf((*MockPullRequestSelectorConverter)(nil).PullRequestToSelectorEntity), ctx, pullRequest)
}
