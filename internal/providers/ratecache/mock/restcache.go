// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stacklok/minder/internal/providers/ratecache (interfaces: RestClientCache)
//
// Generated by this command:
//
//	mockgen -package mockratecache -destination internal/providers/ratecache/mock/restcache.go github.com/stacklok/minder/internal/providers/ratecache RestClientCache
//

// Package mockratecache is a generated GoMock package.
package mockratecache

import (
	reflect "reflect"

	db "github.com/stacklok/minder/internal/db"
	v1 "github.com/stacklok/minder/pkg/providers/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockRestClientCache is a mock of RestClientCache interface.
type MockRestClientCache struct {
	ctrl     *gomock.Controller
	recorder *MockRestClientCacheMockRecorder
}

// MockRestClientCacheMockRecorder is the mock recorder for MockRestClientCache.
type MockRestClientCacheMockRecorder struct {
	mock *MockRestClientCache
}

// NewMockRestClientCache creates a new mock instance.
func NewMockRestClientCache(ctrl *gomock.Controller) *MockRestClientCache {
	mock := &MockRestClientCache{ctrl: ctrl}
	mock.recorder = &MockRestClientCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRestClientCache) EXPECT() *MockRestClientCacheMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRestClientCache) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockRestClientCacheMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRestClientCache)(nil).Close))
}

// Get mocks base method.
func (m *MockRestClientCache) Get(arg0, arg1 string, arg2 db.ProviderType) (v1.REST, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(v1.REST)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRestClientCacheMockRecorder) Get(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRestClientCache)(nil).Get), arg0, arg1, arg2)
}

// Set mocks base method.
func (m *MockRestClientCache) Set(arg0, arg1 string, arg2 db.ProviderType, arg3 v1.REST) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", arg0, arg1, arg2, arg3)
}

// Set indicates an expected call of Set.
func (mr *MockRestClientCacheMockRecorder) Set(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockRestClientCache)(nil).Set), arg0, arg1, arg2, arg3)
}
