// Code generated by MockGen. DO NOT EDIT.
// Source: ./keystore.go
//
// Generated by this command:
//
//	mockgen -package mock_keystores -destination=./mock/keystore.go -source=./keystore.go
//

// Package mock_keystores is a generated GoMock package.
package mock_keystores

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockKeyStore is a mock of KeyStore interface.
type MockKeyStore struct {
	ctrl     *gomock.Controller
	recorder *MockKeyStoreMockRecorder
}

// MockKeyStoreMockRecorder is the mock recorder for MockKeyStore.
type MockKeyStoreMockRecorder struct {
	mock *MockKeyStore
}

// NewMockKeyStore creates a new mock instance.
func NewMockKeyStore(ctrl *gomock.Controller) *MockKeyStore {
	mock := &MockKeyStore{ctrl: ctrl}
	mock.recorder = &MockKeyStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyStore) EXPECT() *MockKeyStoreMockRecorder {
	return m.recorder
}

// GetKey mocks base method.
func (m *MockKeyStore) GetKey(id string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKey", id)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKey indicates an expected call of GetKey.
func (mr *MockKeyStoreMockRecorder) GetKey(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKey", reflect.TypeOf((*MockKeyStore)(nil).GetKey), id)
}
