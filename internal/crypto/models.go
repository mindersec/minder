// SPDX-FileCopyrightText: Copyright 2024 The Minder Authors
// SPDX-License-Identifier: Apache-2.0

package crypto

import (
	"encoding/json"
	"fmt"

	"github.com/mindersec/minder/internal/crypto/algorithms"
)

// EncryptedData represents the structure we use to store encrypted data in the
// database.
type EncryptedData struct {
	// The type of encryption used.
	Algorithm algorithms.Type
	// The encrypted data represented as a base64 encoded string.
	EncodedData string
	// An identifier which specifies the key used.
	// Used to handle multiple keys during key rotation.
	KeyVersion string
}

// Serialize converts the contents to JSON.
// This is intended for storage in the database.
func (e *EncryptedData) Serialize() (json.RawMessage, error) {
	return json.Marshal(e)
}

// NewBackwardsCompatibleEncryptedData creates an instance of EncryptedData
// with appropriate defaults plugged in. This is used for existing secrets
// and should be removed once we migrate to the new encryption model.
func NewBackwardsCompatibleEncryptedData(encryptedData string) EncryptedData {
	return EncryptedData{
		Algorithm:   algorithms.Aes256Cfb,
		EncodedData: encryptedData,
		KeyVersion:  "",
	}
}

// DeserializeEncryptedData deserialized the data generated by EncryptedData.Serialize()
func DeserializeEncryptedData(contents json.RawMessage) (EncryptedData, error) {
	var data EncryptedData
	err := json.Unmarshal(contents, &data)
	if err != nil {
		return EncryptedData{}, fmt.Errorf("unable to deserialize data: %w", err)
	}
	return data, nil
}
