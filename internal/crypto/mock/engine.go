// Code generated by MockGen. DO NOT EDIT.
// Source: ./engine.go
//
// Generated by this command:
//
//	mockgen -package mock_crypto -destination=./mock/engine.go -source=./engine.go
//

// Package mock_crypto is a generated GoMock package.
package mock_crypto

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	oauth2 "golang.org/x/oauth2"
)

// MockEngine is a mock of Engine interface.
type MockEngine struct {
	ctrl     *gomock.Controller
	recorder *MockEngineMockRecorder
}

// MockEngineMockRecorder is the mock recorder for MockEngine.
type MockEngineMockRecorder struct {
	mock *MockEngine
}

// NewMockEngine creates a new mock instance.
func NewMockEngine(ctrl *gomock.Controller) *MockEngine {
	mock := &MockEngine{ctrl: ctrl}
	mock.recorder = &MockEngineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEngine) EXPECT() *MockEngineMockRecorder {
	return m.recorder
}

// DecryptOAuthToken mocks base method.
func (m *MockEngine) DecryptOAuthToken(encToken string) (oauth2.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecryptOAuthToken", encToken)
	ret0, _ := ret[0].(oauth2.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecryptOAuthToken indicates an expected call of DecryptOAuthToken.
func (mr *MockEngineMockRecorder) DecryptOAuthToken(encToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecryptOAuthToken", reflect.TypeOf((*MockEngine)(nil).DecryptOAuthToken), encToken)
}

// DecryptString mocks base method.
func (m *MockEngine) DecryptString(encData string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecryptString", encData)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecryptString indicates an expected call of DecryptString.
func (mr *MockEngineMockRecorder) DecryptString(encData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecryptString", reflect.TypeOf((*MockEngine)(nil).DecryptString), encData)
}

// EncryptOAuthToken mocks base method.
func (m *MockEngine) EncryptOAuthToken(token *oauth2.Token) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncryptOAuthToken", token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncryptOAuthToken indicates an expected call of EncryptOAuthToken.
func (mr *MockEngineMockRecorder) EncryptOAuthToken(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncryptOAuthToken", reflect.TypeOf((*MockEngine)(nil).EncryptOAuthToken), token)
}

// EncryptString mocks base method.
func (m *MockEngine) EncryptString(data string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncryptString", data)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncryptString indicates an expected call of EncryptString.
func (mr *MockEngineMockRecorder) EncryptString(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncryptString", reflect.TypeOf((*MockEngine)(nil).EncryptString), data)
}
