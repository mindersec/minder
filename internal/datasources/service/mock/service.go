// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go
//
// Generated by this command:
//
//	mockgen -package mock_service -destination=./mock/service.go -source=./service.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	service "github.com/mindersec/minder/internal/datasources/service"
	v1 "github.com/mindersec/minder/pkg/api/protobuf/go/minder/v1"
	v10 "github.com/mindersec/minder/pkg/datasources/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockDataSourcesService is a mock of DataSourcesService interface.
type MockDataSourcesService struct {
	ctrl     *gomock.Controller
	recorder *MockDataSourcesServiceMockRecorder
	isgomock struct{}
}

// MockDataSourcesServiceMockRecorder is the mock recorder for MockDataSourcesService.
type MockDataSourcesServiceMockRecorder struct {
	mock *MockDataSourcesService
}

// NewMockDataSourcesService creates a new mock instance.
func NewMockDataSourcesService(ctrl *gomock.Controller) *MockDataSourcesService {
	mock := &MockDataSourcesService{ctrl: ctrl}
	mock.recorder = &MockDataSourcesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataSourcesService) EXPECT() *MockDataSourcesServiceMockRecorder {
	return m.recorder
}

// BuildDataSourceRegistry mocks base method.
func (m *MockDataSourcesService) BuildDataSourceRegistry(ctx context.Context, rt *v1.RuleType, opts *service.Options) (*v10.DataSourceRegistry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildDataSourceRegistry", ctx, rt, opts)
	ret0, _ := ret[0].(*v10.DataSourceRegistry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildDataSourceRegistry indicates an expected call of BuildDataSourceRegistry.
func (mr *MockDataSourcesServiceMockRecorder) BuildDataSourceRegistry(ctx, rt, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildDataSourceRegistry", reflect.TypeOf((*MockDataSourcesService)(nil).BuildDataSourceRegistry), ctx, rt, opts)
}

// Create mocks base method.
func (m *MockDataSourcesService) Create(ctx context.Context, ds *v1.DataSource, opts *service.Options) (*v1.DataSource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, ds, opts)
	ret0, _ := ret[0].(*v1.DataSource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockDataSourcesServiceMockRecorder) Create(ctx, ds, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDataSourcesService)(nil).Create), ctx, ds, opts)
}

// Delete mocks base method.
func (m *MockDataSourcesService) Delete(ctx context.Context, id, project uuid.UUID, opts *service.Options) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id, project, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDataSourcesServiceMockRecorder) Delete(ctx, id, project, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDataSourcesService)(nil).Delete), ctx, id, project, opts)
}

// GetByID mocks base method.
func (m *MockDataSourcesService) GetByID(ctx context.Context, id, project uuid.UUID, opts *service.ReadOptions) (*v1.DataSource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id, project, opts)
	ret0, _ := ret[0].(*v1.DataSource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockDataSourcesServiceMockRecorder) GetByID(ctx, id, project, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockDataSourcesService)(nil).GetByID), ctx, id, project, opts)
}

// GetByName mocks base method.
func (m *MockDataSourcesService) GetByName(ctx context.Context, name string, project uuid.UUID, opts *service.ReadOptions) (*v1.DataSource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, name, project, opts)
	ret0, _ := ret[0].(*v1.DataSource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockDataSourcesServiceMockRecorder) GetByName(ctx, name, project, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockDataSourcesService)(nil).GetByName), ctx, name, project, opts)
}

// List mocks base method.
func (m *MockDataSourcesService) List(ctx context.Context, project uuid.UUID, opts *service.ReadOptions) ([]*v1.DataSource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, project, opts)
	ret0, _ := ret[0].([]*v1.DataSource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockDataSourcesServiceMockRecorder) List(ctx, project, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockDataSourcesService)(nil).List), ctx, project, opts)
}

// Update mocks base method.
func (m *MockDataSourcesService) Update(ctx context.Context, ds *v1.DataSource, opts *service.Options) (*v1.DataSource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, ds, opts)
	ret0, _ := ret[0].(*v1.DataSource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockDataSourcesServiceMockRecorder) Update(ctx, ds, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDataSourcesService)(nil).Update), ctx, ds, opts)
}
