// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stacklok/minder/internal/repositories/github/webhooks (interfaces: GitHubWebhookClient)
//
// Generated by this command:
//
//	mockgen -package mockghhook -destination internal/repositories/github/webhooks/mock/client.go github.com/stacklok/minder/internal/repositories/github/webhooks GitHubWebhookClient
//

// Package mockghhook is a generated GoMock package.
package mockghhook

import (
	context "context"
	reflect "reflect"

	github "github.com/google/go-github/v56/github"
	gomock "go.uber.org/mock/gomock"
)

// MockGitHubWebhookClient is a mock of GitHubWebhookClient interface.
type MockGitHubWebhookClient struct {
	ctrl     *gomock.Controller
	recorder *MockGitHubWebhookClientMockRecorder
}

// MockGitHubWebhookClientMockRecorder is the mock recorder for MockGitHubWebhookClient.
type MockGitHubWebhookClientMockRecorder struct {
	mock *MockGitHubWebhookClient
}

// NewMockGitHubWebhookClient creates a new mock instance.
func NewMockGitHubWebhookClient(ctrl *gomock.Controller) *MockGitHubWebhookClient {
	mock := &MockGitHubWebhookClient{ctrl: ctrl}
	mock.recorder = &MockGitHubWebhookClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitHubWebhookClient) EXPECT() *MockGitHubWebhookClientMockRecorder {
	return m.recorder
}

// CreateHook mocks base method.
func (m *MockGitHubWebhookClient) CreateHook(arg0 context.Context, arg1, arg2 string, arg3 *github.Hook) (*github.Hook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHook", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Hook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHook indicates an expected call of CreateHook.
func (mr *MockGitHubWebhookClientMockRecorder) CreateHook(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHook", reflect.TypeOf((*MockGitHubWebhookClient)(nil).CreateHook), arg0, arg1, arg2, arg3)
}

// DeleteHook mocks base method.
func (m *MockGitHubWebhookClient) DeleteHook(arg0 context.Context, arg1, arg2 string, arg3 int64) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHook", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteHook indicates an expected call of DeleteHook.
func (mr *MockGitHubWebhookClientMockRecorder) DeleteHook(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHook", reflect.TypeOf((*MockGitHubWebhookClient)(nil).DeleteHook), arg0, arg1, arg2, arg3)
}

// ListHooks mocks base method.
func (m *MockGitHubWebhookClient) ListHooks(arg0 context.Context, arg1, arg2 string) ([]*github.Hook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHooks", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*github.Hook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHooks indicates an expected call of ListHooks.
func (mr *MockGitHubWebhookClientMockRecorder) ListHooks(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHooks", reflect.TypeOf((*MockGitHubWebhookClient)(nil).ListHooks), arg0, arg1, arg2)
}
