// Code generated by MockGen. DO NOT EDIT.
// Source: ./manager.go
//
// Generated by this command:
//
//	mockgen -package mock_webhooks -destination=./mock/manager.go -source=./manager.go
//

// Package mock_webhooks is a generated GoMock package.
package mock_webhooks

import (
	context "context"
	reflect "reflect"

	properties "github.com/stacklok/minder/internal/entities/properties"
	clients "github.com/stacklok/minder/internal/repositories/github/clients"
	gomock "go.uber.org/mock/gomock"
)

// MockWebhookManager is a mock of WebhookManager interface.
type MockWebhookManager struct {
	ctrl     *gomock.Controller
	recorder *MockWebhookManagerMockRecorder
}

// MockWebhookManagerMockRecorder is the mock recorder for MockWebhookManager.
type MockWebhookManagerMockRecorder struct {
	mock *MockWebhookManager
}

// NewMockWebhookManager creates a new mock instance.
func NewMockWebhookManager(ctrl *gomock.Controller) *MockWebhookManager {
	mock := &MockWebhookManager{ctrl: ctrl}
	mock.recorder = &MockWebhookManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebhookManager) EXPECT() *MockWebhookManagerMockRecorder {
	return m.recorder
}

// CreateWebhook mocks base method.
func (m *MockWebhookManager) CreateWebhook(ctx context.Context, client clients.GitHubRepoClient, repoOwner, repoName string) (*properties.Properties, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWebhook", ctx, client, repoOwner, repoName)
	ret0, _ := ret[0].(*properties.Properties)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWebhook indicates an expected call of CreateWebhook.
func (mr *MockWebhookManagerMockRecorder) CreateWebhook(ctx, client, repoOwner, repoName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWebhook", reflect.TypeOf((*MockWebhookManager)(nil).CreateWebhook), ctx, client, repoOwner, repoName)
}

// DeleteWebhook mocks base method.
func (m *MockWebhookManager) DeleteWebhook(ctx context.Context, client clients.GitHubRepoClient, repoOwner, repoName string, hookID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWebhook", ctx, client, repoOwner, repoName, hookID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWebhook indicates an expected call of DeleteWebhook.
func (mr *MockWebhookManagerMockRecorder) DeleteWebhook(ctx, client, repoOwner, repoName, hookID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWebhook", reflect.TypeOf((*MockWebhookManager)(nil).DeleteWebhook), ctx, client, repoOwner, repoName, hookID)
}
