// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stacklok/minder/internal/repositories/github/webhooks (interfaces: WebhookManager)
//
// Generated by this command:
//
//	mockgen -package mockghhook -destination internal/repositories/github/webhooks/mock/manager.go github.com/stacklok/minder/internal/repositories/github/webhooks WebhookManager
//

// Package mockghhook is a generated GoMock package.
package mockghhook

import (
	context "context"
	reflect "reflect"

	github "github.com/google/go-github/v56/github"
	clients "github.com/stacklok/minder/internal/repositories/github/clients"
	gomock "go.uber.org/mock/gomock"
)

// MockWebhookManager is a mock of WebhookManager interface.
type MockWebhookManager struct {
	ctrl     *gomock.Controller
	recorder *MockWebhookManagerMockRecorder
}

// MockWebhookManagerMockRecorder is the mock recorder for MockWebhookManager.
type MockWebhookManagerMockRecorder struct {
	mock *MockWebhookManager
}

// NewMockWebhookManager creates a new mock instance.
func NewMockWebhookManager(ctrl *gomock.Controller) *MockWebhookManager {
	mock := &MockWebhookManager{ctrl: ctrl}
	mock.recorder = &MockWebhookManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebhookManager) EXPECT() *MockWebhookManagerMockRecorder {
	return m.recorder
}

// CreateWebhook mocks base method.
func (m *MockWebhookManager) CreateWebhook(arg0 context.Context, arg1 clients.GitHubRepoClient, arg2, arg3 string) (string, *github.Hook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWebhook", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*github.Hook)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateWebhook indicates an expected call of CreateWebhook.
func (mr *MockWebhookManagerMockRecorder) CreateWebhook(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWebhook", reflect.TypeOf((*MockWebhookManager)(nil).CreateWebhook), arg0, arg1, arg2, arg3)
}

// DeleteWebhook mocks base method.
func (m *MockWebhookManager) DeleteWebhook(arg0 context.Context, arg1 clients.GitHubRepoClient, arg2, arg3 string, arg4 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWebhook", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWebhook indicates an expected call of DeleteWebhook.
func (mr *MockWebhookManagerMockRecorder) DeleteWebhook(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWebhook", reflect.TypeOf((*MockWebhookManager)(nil).DeleteWebhook), arg0, arg1, arg2, arg3, arg4)
}
