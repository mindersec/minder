// Code generated by MockGen. DO NOT EDIT.
// Source: ./selectors.go
//
// Generated by this command:
//
//	mockgen -package mock_selectors -destination=./mock/selectors.go -source=./selectors.go
//

// Package mock_selectors is a generated GoMock package.
package mock_selectors

import (
	reflect "reflect"

	selectors "github.com/stacklok/minder/internal/engine/selectors"
	proto "github.com/stacklok/minder/internal/proto"
	v1 "github.com/stacklok/minder/pkg/api/protobuf/go/minder/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockSelectionBuilder is a mock of SelectionBuilder interface.
type MockSelectionBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockSelectionBuilderMockRecorder
}

// MockSelectionBuilderMockRecorder is the mock recorder for MockSelectionBuilder.
type MockSelectionBuilderMockRecorder struct {
	mock *MockSelectionBuilder
}

// NewMockSelectionBuilder creates a new mock instance.
func NewMockSelectionBuilder(ctrl *gomock.Controller) *MockSelectionBuilder {
	mock := &MockSelectionBuilder{ctrl: ctrl}
	mock.recorder = &MockSelectionBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSelectionBuilder) EXPECT() *MockSelectionBuilderMockRecorder {
	return m.recorder
}

// NewSelectionFromProfile mocks base method.
func (m *MockSelectionBuilder) NewSelectionFromProfile(arg0 v1.Entity, arg1 []*v1.Profile_Selector) (selectors.Selection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSelectionFromProfile", arg0, arg1)
	ret0, _ := ret[0].(selectors.Selection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewSelectionFromProfile indicates an expected call of NewSelectionFromProfile.
func (mr *MockSelectionBuilderMockRecorder) NewSelectionFromProfile(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSelectionFromProfile", reflect.TypeOf((*MockSelectionBuilder)(nil).NewSelectionFromProfile), arg0, arg1)
}

// MockSelection is a mock of Selection interface.
type MockSelection struct {
	ctrl     *gomock.Controller
	recorder *MockSelectionMockRecorder
}

// MockSelectionMockRecorder is the mock recorder for MockSelection.
type MockSelectionMockRecorder struct {
	mock *MockSelection
}

// NewMockSelection creates a new mock instance.
func NewMockSelection(ctrl *gomock.Controller) *MockSelection {
	mock := &MockSelection{ctrl: ctrl}
	mock.recorder = &MockSelectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSelection) EXPECT() *MockSelectionMockRecorder {
	return m.recorder
}

// Select mocks base method.
func (m *MockSelection) Select(arg0 *proto.SelectorEntity, arg1 ...selectors.SelectOption) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Select", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Select indicates an expected call of Select.
func (mr *MockSelectionMockRecorder) Select(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockSelection)(nil).Select), varargs...)
}
