// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go
//
// Generated by this command:
//
//	mockgen -package mock_profiles -destination=./mock/service.go -source=./service.go
//

// Package mock_profiles is a generated GoMock package.
package mock_profiles

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	db "github.com/mindersec/minder/internal/db"
	v1 "github.com/mindersec/minder/pkg/api/protobuf/go/minder/v1"
	gomock "go.uber.org/mock/gomock"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
)

// MockProfileService is a mock of ProfileService interface.
type MockProfileService struct {
	ctrl     *gomock.Controller
	recorder *MockProfileServiceMockRecorder
}

// MockProfileServiceMockRecorder is the mock recorder for MockProfileService.
type MockProfileServiceMockRecorder struct {
	mock *MockProfileService
}

// NewMockProfileService creates a new mock instance.
func NewMockProfileService(ctrl *gomock.Controller) *MockProfileService {
	mock := &MockProfileService{ctrl: ctrl}
	mock.recorder = &MockProfileServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProfileService) EXPECT() *MockProfileServiceMockRecorder {
	return m.recorder
}

// CreateProfile mocks base method.
func (m *MockProfileService) CreateProfile(ctx context.Context, projectID, subscriptionID uuid.UUID, profile *v1.Profile, qtx db.Querier) (*v1.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProfile", ctx, projectID, subscriptionID, profile, qtx)
	ret0, _ := ret[0].(*v1.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProfile indicates an expected call of CreateProfile.
func (mr *MockProfileServiceMockRecorder) CreateProfile(ctx, projectID, subscriptionID, profile, qtx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfile", reflect.TypeOf((*MockProfileService)(nil).CreateProfile), ctx, projectID, subscriptionID, profile, qtx)
}

// PatchProfile mocks base method.
func (m *MockProfileService) PatchProfile(ctx context.Context, projectID, profileID uuid.UUID, profile *v1.Profile, updateMask *fieldmaskpb.FieldMask, qtx db.Querier) (*v1.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchProfile", ctx, projectID, profileID, profile, updateMask, qtx)
	ret0, _ := ret[0].(*v1.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchProfile indicates an expected call of PatchProfile.
func (mr *MockProfileServiceMockRecorder) PatchProfile(ctx, projectID, profileID, profile, updateMask, qtx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchProfile", reflect.TypeOf((*MockProfileService)(nil).PatchProfile), ctx, projectID, profileID, profile, updateMask, qtx)
}

// UpdateProfile mocks base method.
func (m *MockProfileService) UpdateProfile(ctx context.Context, projectID, subscriptionID uuid.UUID, profile *v1.Profile, qtx db.Querier) (*v1.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", ctx, projectID, subscriptionID, profile, qtx)
	ret0, _ := ret[0].(*v1.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockProfileServiceMockRecorder) UpdateProfile(ctx, projectID, subscriptionID, profile, qtx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockProfileService)(nil).UpdateProfile), ctx, projectID, subscriptionID, profile, qtx)
}
