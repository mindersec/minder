// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: signing_keys.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSigningKey = `-- name: CreateSigningKey :one
INSERT INTO signing_keys (project_id, private_key, public_key, passphrase, key_identifier, created_at) VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, project_id, private_key, public_key, passphrase, key_identifier, created_at, updated_at
`

type CreateSigningKeyParams struct {
	ProjectID     uuid.UUID `json:"project_id"`
	PrivateKey    string    `json:"private_key"`
	PublicKey     string    `json:"public_key"`
	Passphrase    string    `json:"passphrase"`
	KeyIdentifier string    `json:"key_identifier"`
	CreatedAt     time.Time `json:"created_at"`
}

func (q *Queries) CreateSigningKey(ctx context.Context, arg CreateSigningKeyParams) (SigningKey, error) {
	row := q.db.QueryRowContext(ctx, createSigningKey,
		arg.ProjectID,
		arg.PrivateKey,
		arg.PublicKey,
		arg.Passphrase,
		arg.KeyIdentifier,
		arg.CreatedAt,
	)
	var i SigningKey
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.PrivateKey,
		&i.PublicKey,
		&i.Passphrase,
		&i.KeyIdentifier,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSigningKey = `-- name: DeleteSigningKey :exec
DELETE FROM signing_keys WHERE project_id = $1 AND key_identifier = $2
`

type DeleteSigningKeyParams struct {
	ProjectID     uuid.UUID `json:"project_id"`
	KeyIdentifier string    `json:"key_identifier"`
}

func (q *Queries) DeleteSigningKey(ctx context.Context, arg DeleteSigningKeyParams) error {
	_, err := q.db.ExecContext(ctx, deleteSigningKey, arg.ProjectID, arg.KeyIdentifier)
	return err
}

const getSigningKeyByIdentifier = `-- name: GetSigningKeyByIdentifier :one
SELECT id, project_id, private_key, public_key, passphrase, key_identifier, created_at, updated_at FROM signing_keys WHERE key_identifier = $1
`

func (q *Queries) GetSigningKeyByIdentifier(ctx context.Context, keyIdentifier string) (SigningKey, error) {
	row := q.db.QueryRowContext(ctx, getSigningKeyByIdentifier, keyIdentifier)
	var i SigningKey
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.PrivateKey,
		&i.PublicKey,
		&i.Passphrase,
		&i.KeyIdentifier,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSigningKeyByProjectID = `-- name: GetSigningKeyByProjectID :one
SELECT id, project_id, private_key, public_key, passphrase, key_identifier, created_at, updated_at FROM signing_keys WHERE project_id = $1
`

func (q *Queries) GetSigningKeyByProjectID(ctx context.Context, projectID uuid.UUID) (SigningKey, error) {
	row := q.db.QueryRowContext(ctx, getSigningKeyByProjectID, projectID)
	var i SigningKey
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.PrivateKey,
		&i.PublicKey,
		&i.Passphrase,
		&i.KeyIdentifier,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
