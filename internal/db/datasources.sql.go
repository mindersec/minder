// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: datasources.sql

package db

import (
	"context"
	"encoding/json"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createDataSource = `-- name: CreateDataSource :one


INSERT INTO data_sources (
    name, project_id,display_name
) VALUES (
    $1, $2, $3
) RETURNING id, name, display_name, project_id, created_at, updated_at
`

type CreateDataSourceParams struct {
	Name        string    `json:"name"`
	ProjectID   uuid.UUID `json:"project_id"`
	DisplayName string    `json:"display_name"`
}

// SPDX-FileCopyrightText: Copyright 2024 The Minder Authors
// SPDX-License-Identifier: Apache-2.0
// Data Sources Queries
func (q *Queries) CreateDataSource(ctx context.Context, arg CreateDataSourceParams) (DataSource, error) {
	row := q.db.QueryRowContext(ctx, createDataSource, arg.Name, arg.ProjectID, arg.DisplayName)
	var i DataSource
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.DisplayName,
		&i.ProjectID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createDataSourceFunction = `-- name: CreateDataSourceFunction :one

INSERT INTO data_sources_functions (
    name, type, data_source_id, definition
) VALUES (
    $1, $2, $3, $4::jsonb
) RETURNING id, name, type, data_source_id, definition, created_at, updated_at
`

type CreateDataSourceFunctionParams struct {
	Name        string          `json:"name"`
	Type        string          `json:"type"`
	DisplayName uuid.UUID       `json:"display_name"`
	Definition  json.RawMessage `json:"definition"`
}

// Data Source Functions Queries
func (q *Queries) CreateDataSourceFunction(ctx context.Context, arg CreateDataSourceFunctionParams) (DataSourcesFunction, error) {
	row := q.db.QueryRowContext(ctx, createDataSourceFunction,
		arg.Name,
		arg.Type,
		arg.DisplayName,
		arg.Definition,
	)
	var i DataSourcesFunction
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.DataSourceID,
		&i.Definition,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteDataSource = `-- name: DeleteDataSource :exec
DELETE FROM data_sources WHERE id = $1
`

func (q *Queries) DeleteDataSource(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteDataSource, id)
	return err
}

const deleteDataSourceFunction = `-- name: DeleteDataSourceFunction :exec
DELETE FROM data_sources_functions WHERE id = $1
`

func (q *Queries) DeleteDataSourceFunction(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteDataSourceFunction, id)
	return err
}

const getDataSourceByID = `-- name: GetDataSourceByID :one
SELECT id, name, display_name, project_id, created_at, updated_at FROM data_sources WHERE id = $1
`

func (q *Queries) GetDataSourceByID(ctx context.Context, id uuid.UUID) (DataSource, error) {
	row := q.db.QueryRowContext(ctx, getDataSourceByID, id)
	var i DataSource
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.DisplayName,
		&i.ProjectID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDataSourceByName = `-- name: GetDataSourceByName :one
SELECT id, name, display_name, project_id, created_at, updated_at FROM data_sources WHERE  project_id = ANY($1::uuid[]) AND lower(name) = lower($2)
`

type GetDataSourceByNameParams struct {
	Projects []uuid.UUID `json:"projects"`
	Name     string      `json:"name"`
}

func (q *Queries) GetDataSourceByName(ctx context.Context, arg GetDataSourceByNameParams) (DataSource, error) {
	row := q.db.QueryRowContext(ctx, getDataSourceByName, pq.Array(arg.Projects), arg.Name)
	var i DataSource
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.DisplayName,
		&i.ProjectID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDataSourceFunctions = `-- name: GetDataSourceFunctions :many
SELECT id, name, type, data_source_id, definition, created_at, updated_at FROM data_sources_functions WHERE data_source_id = $1
`

func (q *Queries) GetDataSourceFunctions(ctx context.Context, dataSourceID uuid.UUID) ([]DataSourcesFunction, error) {
	rows, err := q.db.QueryContext(ctx, getDataSourceFunctions, dataSourceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DataSourcesFunction{}
	for rows.Next() {
		var i DataSourcesFunction
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.DataSourceID,
			&i.Definition,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDataSourcesByProject = `-- name: ListDataSourcesByProject :many
SELECT id, name, display_name, project_id, created_at, updated_at FROM data_sources WHERE project_id = $1
`

func (q *Queries) ListDataSourcesByProject(ctx context.Context, projectID uuid.UUID) ([]DataSource, error) {
	rows, err := q.db.QueryContext(ctx, listDataSourcesByProject, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DataSource{}
	for rows.Next() {
		var i DataSource
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.DisplayName,
			&i.ProjectID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDataSource = `-- name: UpdateDataSource :one
UPDATE data_sources
    SET name = $2, display_name = $3, updated_at = NOW()
    WHERE id = $1
    RETURNING id, name, display_name, project_id, created_at, updated_at
`

type UpdateDataSourceParams struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	DisplayName string    `json:"display_name"`
}

func (q *Queries) UpdateDataSource(ctx context.Context, arg UpdateDataSourceParams) (DataSource, error) {
	row := q.db.QueryRowContext(ctx, updateDataSource, arg.ID, arg.Name, arg.DisplayName)
	var i DataSource
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.DisplayName,
		&i.ProjectID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateDataSourceFunction = `-- name: UpdateDataSourceFunction :one
UPDATE data_sources_functions
    SET name = $2, type = $3, definition = $4::jsonb, updated_at = NOW()
    WHERE id = $1
    RETURNING id, name, type, data_source_id, definition, created_at, updated_at
`

type UpdateDataSourceFunctionParams struct {
	ID         uuid.UUID       `json:"id"`
	Name       string          `json:"name"`
	Type       string          `json:"type"`
	Definition json.RawMessage `json:"definition"`
}

func (q *Queries) UpdateDataSourceFunction(ctx context.Context, arg UpdateDataSourceFunctionParams) (DataSourcesFunction, error) {
	row := q.db.QueryRowContext(ctx, updateDataSourceFunction,
		arg.ID,
		arg.Name,
		arg.Type,
		arg.Definition,
	)
	var i DataSourcesFunction
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.DataSourceID,
		&i.Definition,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
