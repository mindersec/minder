// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: pull_requests.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createPullRequest = `-- name: CreatePullRequest :one
INSERT INTO pull_requests (
    repository_id,
    pr_number
) VALUES ($1, $2) RETURNING id, repository_id, pr_number, created_at, updated_at
`

type CreatePullRequestParams struct {
	RepositoryID uuid.UUID `json:"repository_id"`
	PrNumber     int64     `json:"pr_number"`
}

func (q *Queries) CreatePullRequest(ctx context.Context, arg CreatePullRequestParams) (PullRequest, error) {
	row := q.db.QueryRowContext(ctx, createPullRequest, arg.RepositoryID, arg.PrNumber)
	var i PullRequest
	err := row.Scan(
		&i.ID,
		&i.RepositoryID,
		&i.PrNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePullRequest = `-- name: DeletePullRequest :exec
DELETE FROM pull_requests
WHERE repository_id = $1 AND pr_number = $2
`

type DeletePullRequestParams struct {
	RepositoryID uuid.UUID `json:"repository_id"`
	PrNumber     int64     `json:"pr_number"`
}

func (q *Queries) DeletePullRequest(ctx context.Context, arg DeletePullRequestParams) error {
	_, err := q.db.ExecContext(ctx, deletePullRequest, arg.RepositoryID, arg.PrNumber)
	return err
}

const getPullRequest = `-- name: GetPullRequest :one
SELECT id, repository_id, pr_number, created_at, updated_at FROM pull_requests
WHERE repository_id = $1 AND pr_number = $2
`

type GetPullRequestParams struct {
	RepositoryID uuid.UUID `json:"repository_id"`
	PrNumber     int64     `json:"pr_number"`
}

func (q *Queries) GetPullRequest(ctx context.Context, arg GetPullRequestParams) (PullRequest, error) {
	row := q.db.QueryRowContext(ctx, getPullRequest, arg.RepositoryID, arg.PrNumber)
	var i PullRequest
	err := row.Scan(
		&i.ID,
		&i.RepositoryID,
		&i.PrNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPullRequestByID = `-- name: GetPullRequestByID :one
SELECT id, repository_id, pr_number, created_at, updated_at FROM pull_requests
WHERE id = $1
`

func (q *Queries) GetPullRequestByID(ctx context.Context, id uuid.UUID) (PullRequest, error) {
	row := q.db.QueryRowContext(ctx, getPullRequestByID, id)
	var i PullRequest
	err := row.Scan(
		&i.ID,
		&i.RepositoryID,
		&i.PrNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertPullRequest = `-- name: UpsertPullRequest :one
INSERT INTO pull_requests (
    repository_id,
    pr_number
) VALUES ($1, $2)
ON CONFLICT (repository_id, pr_number)
DO UPDATE SET
    updated_at = NOW()
WHERE pull_requests.repository_id = $1 AND pull_requests.pr_number = $2
RETURNING id, repository_id, pr_number, created_at, updated_at
`

type UpsertPullRequestParams struct {
	RepositoryID uuid.UUID `json:"repository_id"`
	PrNumber     int64     `json:"pr_number"`
}

func (q *Queries) UpsertPullRequest(ctx context.Context, arg UpsertPullRequestParams) (PullRequest, error) {
	row := q.db.QueryRowContext(ctx, upsertPullRequest, arg.RepositoryID, arg.PrNumber)
	var i PullRequest
	err := row.Scan(
		&i.ID,
		&i.RepositoryID,
		&i.PrNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
