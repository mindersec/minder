// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: session_store.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createSessionState = `-- name: CreateSessionState :one
INSERT INTO session_store (provider, project_id, port, session_state, owner_filter, redirect_url) VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, provider, project_id, port, owner_filter, session_state, created_at, redirect_url
`

type CreateSessionStateParams struct {
	Provider     string         `json:"provider"`
	ProjectID    uuid.UUID      `json:"project_id"`
	Port         sql.NullInt32  `json:"port"`
	SessionState string         `json:"session_state"`
	OwnerFilter  sql.NullString `json:"owner_filter"`
	RedirectUrl  sql.NullString `json:"redirect_url"`
}

func (q *Queries) CreateSessionState(ctx context.Context, arg CreateSessionStateParams) (SessionStore, error) {
	row := q.db.QueryRowContext(ctx, createSessionState,
		arg.Provider,
		arg.ProjectID,
		arg.Port,
		arg.SessionState,
		arg.OwnerFilter,
		arg.RedirectUrl,
	)
	var i SessionStore
	err := row.Scan(
		&i.ID,
		&i.Provider,
		&i.ProjectID,
		&i.Port,
		&i.OwnerFilter,
		&i.SessionState,
		&i.CreatedAt,
		&i.RedirectUrl,
	)
	return i, err
}

const deleteExpiredSessionStates = `-- name: DeleteExpiredSessionStates :exec
DELETE FROM session_store WHERE created_at < NOW() - INTERVAL '1 day'
`

func (q *Queries) DeleteExpiredSessionStates(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteExpiredSessionStates)
	return err
}

const deleteSessionState = `-- name: DeleteSessionState :exec
DELETE FROM session_store WHERE id = $1
`

func (q *Queries) DeleteSessionState(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteSessionState, id)
	return err
}

const deleteSessionStateByProjectID = `-- name: DeleteSessionStateByProjectID :exec
DELETE FROM session_store WHERE provider=$1 AND project_id = $2
`

type DeleteSessionStateByProjectIDParams struct {
	Provider  string    `json:"provider"`
	ProjectID uuid.UUID `json:"project_id"`
}

func (q *Queries) DeleteSessionStateByProjectID(ctx context.Context, arg DeleteSessionStateByProjectIDParams) error {
	_, err := q.db.ExecContext(ctx, deleteSessionStateByProjectID, arg.Provider, arg.ProjectID)
	return err
}

const getProjectIDPortBySessionState = `-- name: GetProjectIDPortBySessionState :one
SELECT provider, project_id, port, owner_filter, redirect_url FROM session_store WHERE session_state = $1
`

type GetProjectIDPortBySessionStateRow struct {
	Provider    string         `json:"provider"`
	ProjectID   uuid.UUID      `json:"project_id"`
	Port        sql.NullInt32  `json:"port"`
	OwnerFilter sql.NullString `json:"owner_filter"`
	RedirectUrl sql.NullString `json:"redirect_url"`
}

func (q *Queries) GetProjectIDPortBySessionState(ctx context.Context, sessionState string) (GetProjectIDPortBySessionStateRow, error) {
	row := q.db.QueryRowContext(ctx, getProjectIDPortBySessionState, sessionState)
	var i GetProjectIDPortBySessionStateRow
	err := row.Scan(
		&i.Provider,
		&i.ProjectID,
		&i.Port,
		&i.OwnerFilter,
		&i.RedirectUrl,
	)
	return i, err
}

const getSessionState = `-- name: GetSessionState :one
SELECT id, provider, project_id, port, owner_filter, session_state, created_at, redirect_url FROM session_store WHERE id = $1
`

func (q *Queries) GetSessionState(ctx context.Context, id int32) (SessionStore, error) {
	row := q.db.QueryRowContext(ctx, getSessionState, id)
	var i SessionStore
	err := row.Scan(
		&i.ID,
		&i.Provider,
		&i.ProjectID,
		&i.Port,
		&i.OwnerFilter,
		&i.SessionState,
		&i.CreatedAt,
		&i.RedirectUrl,
	)
	return i, err
}

const getSessionStateByProjectID = `-- name: GetSessionStateByProjectID :one
SELECT id, provider, project_id, port, owner_filter, session_state, created_at, redirect_url FROM session_store WHERE project_id = $1
`

func (q *Queries) GetSessionStateByProjectID(ctx context.Context, projectID uuid.UUID) (SessionStore, error) {
	row := q.db.QueryRowContext(ctx, getSessionStateByProjectID, projectID)
	var i SessionStore
	err := row.Scan(
		&i.ID,
		&i.Provider,
		&i.ProjectID,
		&i.Port,
		&i.OwnerFilter,
		&i.SessionState,
		&i.CreatedAt,
		&i.RedirectUrl,
	)
	return i, err
}
