// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: artifacts.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createArtifact = `-- name: CreateArtifact :one
INSERT INTO artifacts (
    repository_id,
    artifact_name,
    artifact_type,
    artifact_visibility) VALUES ($1, $2, $3, $4) RETURNING id, repository_id, artifact_name, artifact_type, artifact_visibility, created_at, updated_at
`

type CreateArtifactParams struct {
	RepositoryID       uuid.UUID `json:"repository_id"`
	ArtifactName       string    `json:"artifact_name"`
	ArtifactType       string    `json:"artifact_type"`
	ArtifactVisibility string    `json:"artifact_visibility"`
}

func (q *Queries) CreateArtifact(ctx context.Context, arg CreateArtifactParams) (Artifact, error) {
	row := q.db.QueryRowContext(ctx, createArtifact,
		arg.RepositoryID,
		arg.ArtifactName,
		arg.ArtifactType,
		arg.ArtifactVisibility,
	)
	var i Artifact
	err := row.Scan(
		&i.ID,
		&i.RepositoryID,
		&i.ArtifactName,
		&i.ArtifactType,
		&i.ArtifactVisibility,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteArtifact = `-- name: DeleteArtifact :exec
DELETE FROM artifacts
WHERE id = $1
`

func (q *Queries) DeleteArtifact(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteArtifact, id)
	return err
}

const getArtifactByID = `-- name: GetArtifactByID :one
SELECT artifacts.id, artifacts.repository_id, artifacts.artifact_name, artifacts.artifact_type,
artifacts.artifact_visibility, artifacts.created_at,
repositories.provider, repositories.project_id, repositories.repo_owner, repositories.repo_name
FROM artifacts INNER JOIN repositories ON repositories.id = artifacts.repository_id
WHERE artifacts.id = $1
`

type GetArtifactByIDRow struct {
	ID                 uuid.UUID `json:"id"`
	RepositoryID       uuid.UUID `json:"repository_id"`
	ArtifactName       string    `json:"artifact_name"`
	ArtifactType       string    `json:"artifact_type"`
	ArtifactVisibility string    `json:"artifact_visibility"`
	CreatedAt          time.Time `json:"created_at"`
	Provider           string    `json:"provider"`
	ProjectID          uuid.UUID `json:"project_id"`
	RepoOwner          string    `json:"repo_owner"`
	RepoName           string    `json:"repo_name"`
}

func (q *Queries) GetArtifactByID(ctx context.Context, id uuid.UUID) (GetArtifactByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getArtifactByID, id)
	var i GetArtifactByIDRow
	err := row.Scan(
		&i.ID,
		&i.RepositoryID,
		&i.ArtifactName,
		&i.ArtifactType,
		&i.ArtifactVisibility,
		&i.CreatedAt,
		&i.Provider,
		&i.ProjectID,
		&i.RepoOwner,
		&i.RepoName,
	)
	return i, err
}

const getArtifactByName = `-- name: GetArtifactByName :one
SELECT artifacts.id, artifacts.repository_id, artifacts.artifact_name, artifacts.artifact_type,
       artifacts.artifact_visibility, artifacts.created_at,
       repositories.provider, repositories.project_id, repositories.repo_owner, repositories.repo_name
FROM artifacts INNER JOIN repositories ON repositories.id = artifacts.repository_id
WHERE artifacts.artifact_name = $1 AND artifacts.repository_id = $2
`

type GetArtifactByNameParams struct {
	ArtifactName string    `json:"artifact_name"`
	RepositoryID uuid.UUID `json:"repository_id"`
}

type GetArtifactByNameRow struct {
	ID                 uuid.UUID `json:"id"`
	RepositoryID       uuid.UUID `json:"repository_id"`
	ArtifactName       string    `json:"artifact_name"`
	ArtifactType       string    `json:"artifact_type"`
	ArtifactVisibility string    `json:"artifact_visibility"`
	CreatedAt          time.Time `json:"created_at"`
	Provider           string    `json:"provider"`
	ProjectID          uuid.UUID `json:"project_id"`
	RepoOwner          string    `json:"repo_owner"`
	RepoName           string    `json:"repo_name"`
}

func (q *Queries) GetArtifactByName(ctx context.Context, arg GetArtifactByNameParams) (GetArtifactByNameRow, error) {
	row := q.db.QueryRowContext(ctx, getArtifactByName, arg.ArtifactName, arg.RepositoryID)
	var i GetArtifactByNameRow
	err := row.Scan(
		&i.ID,
		&i.RepositoryID,
		&i.ArtifactName,
		&i.ArtifactType,
		&i.ArtifactVisibility,
		&i.CreatedAt,
		&i.Provider,
		&i.ProjectID,
		&i.RepoOwner,
		&i.RepoName,
	)
	return i, err
}

const listArtifactsByRepoID = `-- name: ListArtifactsByRepoID :many
SELECT id, repository_id, artifact_name, artifact_type, artifact_visibility, created_at, updated_at FROM artifacts
WHERE repository_id = $1
ORDER BY id
`

func (q *Queries) ListArtifactsByRepoID(ctx context.Context, repositoryID uuid.UUID) ([]Artifact, error) {
	rows, err := q.db.QueryContext(ctx, listArtifactsByRepoID, repositoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Artifact{}
	for rows.Next() {
		var i Artifact
		if err := rows.Scan(
			&i.ID,
			&i.RepositoryID,
			&i.ArtifactName,
			&i.ArtifactType,
			&i.ArtifactVisibility,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertArtifact = `-- name: UpsertArtifact :one
INSERT INTO artifacts (
    repository_id,
    artifact_name,
    artifact_type,
    artifact_visibility
) VALUES ($1, $2, $3, $4)
ON CONFLICT (repository_id, LOWER(artifact_name))
DO UPDATE SET
    artifact_type = $3,
    artifact_visibility = $4
WHERE artifacts.repository_id = $1 AND artifacts.artifact_name = $2
RETURNING id, repository_id, artifact_name, artifact_type, artifact_visibility, created_at, updated_at
`

type UpsertArtifactParams struct {
	RepositoryID       uuid.UUID `json:"repository_id"`
	ArtifactName       string    `json:"artifact_name"`
	ArtifactType       string    `json:"artifact_type"`
	ArtifactVisibility string    `json:"artifact_visibility"`
}

func (q *Queries) UpsertArtifact(ctx context.Context, arg UpsertArtifactParams) (Artifact, error) {
	row := q.db.QueryRowContext(ctx, upsertArtifact,
		arg.RepositoryID,
		arg.ArtifactName,
		arg.ArtifactType,
		arg.ArtifactVisibility,
	)
	var i Artifact
	err := row.Scan(
		&i.ID,
		&i.RepositoryID,
		&i.ArtifactName,
		&i.ArtifactType,
		&i.ArtifactVisibility,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
