// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: mapped_role_grants.sql

package db

import (
	"context"
	"database/sql"
	"encoding/json"

	"github.com/google/uuid"
)

const addMappedRoleGrant = `-- name: AddMappedRoleGrant :one

INSERT INTO mapped_role_grants (
    project_id,
    role,
    claim_mappings
) VALUES ($1, $2, $3) RETURNING id, project_id, role, claim_mappings, resolved_subject, created_at, updated_at
`

type AddMappedRoleGrantParams struct {
	ProjectID     uuid.UUID       `json:"project_id"`
	Role          string          `json:"role"`
	ClaimMappings json.RawMessage `json:"claim_mappings"`
}

// AddMappedRoleGrant adds a new mapped role grant to the database.
func (q *Queries) AddMappedRoleGrant(ctx context.Context, arg AddMappedRoleGrantParams) (MappedRoleGrant, error) {
	row := q.db.QueryRowContext(ctx, addMappedRoleGrant, arg.ProjectID, arg.Role, arg.ClaimMappings)
	var i MappedRoleGrant
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.Role,
		&i.ClaimMappings,
		&i.ResolvedSubject,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteMappedRoleGrant = `-- name: DeleteMappedRoleGrant :one

DELETE FROM mapped_role_grants
WHERE id = $1 AND project_id = $2 RETURNING id, project_id, role, claim_mappings, resolved_subject, created_at, updated_at
`

type DeleteMappedRoleGrantParams struct {
	ID        uuid.UUID `json:"id"`
	ProjectID uuid.UUID `json:"project_id"`
}

// DeleteMappedRoleGrant deletes a mapped role grant from the database.
func (q *Queries) DeleteMappedRoleGrant(ctx context.Context, arg DeleteMappedRoleGrantParams) (MappedRoleGrant, error) {
	row := q.db.QueryRowContext(ctx, deleteMappedRoleGrant, arg.ID, arg.ProjectID)
	var i MappedRoleGrant
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.Role,
		&i.ClaimMappings,
		&i.ResolvedSubject,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMappedRoleGrant = `-- name: GetMappedRoleGrant :one

SELECT id, project_id, role, claim_mappings, resolved_subject, created_at, updated_at FROM mapped_role_grants
WHERE project_id = $1 AND role = $2 AND resolved_subject = $3
`

type GetMappedRoleGrantParams struct {
	ProjectID       uuid.UUID      `json:"project_id"`
	Role            string         `json:"role"`
	ResolvedSubject sql.NullString `json:"resolved_subject"`
}

// GetMappedRoleGrant retrieves a mapped role grant from the database.
func (q *Queries) GetMappedRoleGrant(ctx context.Context, arg GetMappedRoleGrantParams) (MappedRoleGrant, error) {
	row := q.db.QueryRowContext(ctx, getMappedRoleGrant, arg.ProjectID, arg.Role, arg.ResolvedSubject)
	var i MappedRoleGrant
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.Role,
		&i.ClaimMappings,
		&i.ResolvedSubject,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listMappedRoleGrants = `-- name: ListMappedRoleGrants :many

SELECT id, project_id, role, claim_mappings, resolved_subject, created_at, updated_at FROM mapped_role_grants WHERE project_id = $1
`

// ListMappedRoleGrants retrieves all mapped role grants from the database.
func (q *Queries) ListMappedRoleGrants(ctx context.Context, projectID uuid.UUID) ([]MappedRoleGrant, error) {
	rows, err := q.db.QueryContext(ctx, listMappedRoleGrants, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MappedRoleGrant{}
	for rows.Next() {
		var i MappedRoleGrant
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.Role,
			&i.ClaimMappings,
			&i.ResolvedSubject,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const resolveMappedRoleGrant = `-- name: ResolveMappedRoleGrant :one

UPDATE mapped_role_grants SET resolved_subject = $1 WHERE id = $2 RETURNING id, project_id, role, claim_mappings, resolved_subject, created_at, updated_at
`

type ResolveMappedRoleGrantParams struct {
	ResolvedSubject sql.NullString `json:"resolved_subject"`
	ID              uuid.UUID      `json:"id"`
}

// ResolveMappedRoleGrant resolves the subject of a mapped role grant.
func (q *Queries) ResolveMappedRoleGrant(ctx context.Context, arg ResolveMappedRoleGrantParams) (MappedRoleGrant, error) {
	row := q.db.QueryRowContext(ctx, resolveMappedRoleGrant, arg.ResolvedSubject, arg.ID)
	var i MappedRoleGrant
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.Role,
		&i.ClaimMappings,
		&i.ResolvedSubject,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const searchUnresolvedMappedRoleGrants = `-- name: SearchUnresolvedMappedRoleGrants :many

SELECT id, project_id, role, claim_mappings, resolved_subject, created_at, updated_at FROM mapped_role_grants
WHERE $1::jsonb @> claim_mappings AND resolved_subject IS NULL
`

// SearchUnresolvedMappedRoleGrants searches for unresolved mapped role grants using
// the provided claim mappings.
func (q *Queries) SearchUnresolvedMappedRoleGrants(ctx context.Context, claimMappings json.RawMessage) ([]MappedRoleGrant, error) {
	rows, err := q.db.QueryContext(ctx, searchUnresolvedMappedRoleGrants, claimMappings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MappedRoleGrant{}
	for rows.Next() {
		var i MappedRoleGrant
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.Role,
			&i.ClaimMappings,
			&i.ResolvedSubject,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
