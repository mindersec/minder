// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// Defines values for DecisionEffect.
const (
	DENY   DecisionEffect = "DENY"
	PERMIT DecisionEffect = "PERMIT"
)

// Defines values for DecisionStrategy.
const (
	AFFIRMATIVE DecisionStrategy = "AFFIRMATIVE"
	CONSENSUS   DecisionStrategy = "CONSENSUS"
	UNANIMOUS   DecisionStrategy = "UNANIMOUS"
)

// Defines values for Logic.
const (
	NEGATIVE Logic = "NEGATIVE"
	POSITIVE Logic = "POSITIVE"
)

// Defines values for UnmanagedAttributePolicy.
const (
	ADMINEDIT UnmanagedAttributePolicy = "ADMIN_EDIT"
	ADMINVIEW UnmanagedAttributePolicy = "ADMIN_VIEW"
	ENABLED   UnmanagedAttributePolicy = "ENABLED"
)

// ComponentExportRepresentation defines model for ComponentExportRepresentation.
type ComponentExportRepresentation struct {
	Config        *MultivaluedHashMapStringString                        `json:"config,omitempty"`
	Id            *string                                                `json:"id,omitempty"`
	Name          *string                                                `json:"name,omitempty"`
	ProviderId    *string                                                `json:"providerId,omitempty"`
	SubComponents *MultivaluedHashMapStringComponentExportRepresentation `json:"subComponents,omitempty"`
	SubType       *string                                                `json:"subType,omitempty"`
}

// CredentialRepresentation defines model for CredentialRepresentation.
type CredentialRepresentation struct {
	// Deprecated:
	Algorithm *string `json:"algorithm,omitempty"`
	// Deprecated:
	Config *MultivaluedHashMapStringString `json:"config,omitempty"`
	// Deprecated:
	Counter        *int32  `json:"counter,omitempty"`
	CreatedDate    *int64  `json:"createdDate,omitempty"`
	CredentialData *string `json:"credentialData,omitempty"`
	// Deprecated:
	Device *string `json:"device,omitempty"`
	// Deprecated:
	Digits *int32 `json:"digits,omitempty"`
	// Deprecated:
	HashIterations *int32 `json:"hashIterations,omitempty"`
	// Deprecated:
	HashedSaltedValue *string `json:"hashedSaltedValue,omitempty"`
	Id                *string `json:"id,omitempty"`
	// Deprecated:
	Period   *int32 `json:"period,omitempty"`
	Priority *int32 `json:"priority,omitempty"`
	// Deprecated:
	Salt       *string `json:"salt,omitempty"`
	SecretData *string `json:"secretData,omitempty"`
	Temporary  *bool   `json:"temporary,omitempty"`
	Type       *string `json:"type,omitempty"`
	UserLabel  *string `json:"userLabel,omitempty"`
	Value      *string `json:"value,omitempty"`
}

// DecisionEffect defines model for DecisionEffect.
type DecisionEffect string

// DecisionStrategy defines model for DecisionStrategy.
type DecisionStrategy string

// FederatedIdentityRepresentation defines model for FederatedIdentityRepresentation.
type FederatedIdentityRepresentation struct {
	IdentityProvider *string `json:"identityProvider,omitempty"`
	UserId           *string `json:"userId,omitempty"`
	UserName         *string `json:"userName,omitempty"`
}

// GroupRepresentation defines model for GroupRepresentation.
type GroupRepresentation struct {
	Access        *map[string]bool       `json:"access,omitempty"`
	Attributes    *map[string][]string   `json:"attributes,omitempty"`
	ClientRoles   *map[string][]string   `json:"clientRoles,omitempty"`
	Id            *string                `json:"id,omitempty"`
	Name          *string                `json:"name,omitempty"`
	ParentId      *string                `json:"parentId,omitempty"`
	Path          *string                `json:"path,omitempty"`
	RealmRoles    *[]string              `json:"realmRoles,omitempty"`
	SubGroupCount *int64                 `json:"subGroupCount,omitempty"`
	SubGroups     *[]GroupRepresentation `json:"subGroups,omitempty"`
}

// Logic defines model for Logic.
type Logic string

// MultivaluedHashMapStringComponentExportRepresentation defines model for MultivaluedHashMapStringComponentExportRepresentation.
type MultivaluedHashMapStringComponentExportRepresentation map[string][]ComponentExportRepresentation

// MultivaluedHashMapStringString defines model for MultivaluedHashMapStringString.
type MultivaluedHashMapStringString map[string][]string

// PolicyRepresentation defines model for PolicyRepresentation.
type PolicyRepresentation struct {
	Config           *map[string]string        `json:"config,omitempty"`
	DecisionStrategy *DecisionStrategy         `json:"decisionStrategy,omitempty"`
	Description      *string                   `json:"description,omitempty"`
	Id               *string                   `json:"id,omitempty"`
	Logic            *Logic                    `json:"logic,omitempty"`
	Name             *string                   `json:"name,omitempty"`
	Owner            *string                   `json:"owner,omitempty"`
	Policies         *[]string                 `json:"policies,omitempty"`
	Resources        *[]string                 `json:"resources,omitempty"`
	ResourcesData    *[]ResourceRepresentation `json:"resourcesData,omitempty"`
	Scopes           *[]string                 `json:"scopes,omitempty"`
	ScopesData       *[]ScopeRepresentation    `json:"scopesData,omitempty"`
	Type             *string                   `json:"type,omitempty"`
}

// PolicyResultRepresentation defines model for PolicyResultRepresentation.
type PolicyResultRepresentation struct {
	AssociatedPolicies *[]PolicyResultRepresentation `json:"associatedPolicies,omitempty"`
	Policy             *PolicyRepresentation         `json:"policy,omitempty"`
	Scopes             *[]string                     `json:"scopes,omitempty"`
	Status             *DecisionEffect               `json:"status,omitempty"`
}

// ResourceOwnerRepresentation defines model for ResourceOwnerRepresentation.
type ResourceOwnerRepresentation struct {
	Id   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

// ResourceRepresentation defines model for ResourceRepresentation.
type ResourceRepresentation struct {
	Id                 *string                      `json:"_id,omitempty"`
	Attributes         *map[string][]string         `json:"attributes,omitempty"`
	DisplayName        *string                      `json:"displayName,omitempty"`
	IconUri            *string                      `json:"icon_uri,omitempty"`
	Name               *string                      `json:"name,omitempty"`
	Owner              *ResourceOwnerRepresentation `json:"owner,omitempty"`
	OwnerManagedAccess *bool                        `json:"ownerManagedAccess,omitempty"`
	Scopes             *[]ScopeRepresentation       `json:"scopes,omitempty"`
	ScopesUma          *[]ScopeRepresentation       `json:"scopesUma,omitempty"`
	Type               *string                      `json:"type,omitempty"`
	// Deprecated:
	Uri  *string   `json:"uri,omitempty"`
	Uris *[]string `json:"uris,omitempty"`
}

// ScopeRepresentation defines model for ScopeRepresentation.
type ScopeRepresentation struct {
	DisplayName *string                   `json:"displayName,omitempty"`
	IconUri     *string                   `json:"iconUri,omitempty"`
	Id          *string                   `json:"id,omitempty"`
	Name        *string                   `json:"name,omitempty"`
	Policies    *[]PolicyRepresentation   `json:"policies,omitempty"`
	Resources   *[]ResourceRepresentation `json:"resources,omitempty"`
}

// SocialLinkRepresentation defines model for SocialLinkRepresentation.
type SocialLinkRepresentation struct {
	SocialProvider *string `json:"socialProvider,omitempty"`
	SocialUserId   *string `json:"socialUserId,omitempty"`
	SocialUsername *string `json:"socialUsername,omitempty"`
}

// UPAttribute defines model for UPAttribute.
type UPAttribute struct {
	Annotations *map[string]interface{}            `json:"annotations,omitempty"`
	DisplayName *string                            `json:"displayName,omitempty"`
	Group       *string                            `json:"group,omitempty"`
	Multivalued *bool                              `json:"multivalued,omitempty"`
	Name        *string                            `json:"name,omitempty"`
	Permissions *UPAttributePermissions            `json:"permissions,omitempty"`
	Required    *UPAttributeRequired               `json:"required,omitempty"`
	Selector    *UPAttributeSelector               `json:"selector,omitempty"`
	Validations *map[string]map[string]interface{} `json:"validations,omitempty"`
}

// UPAttributePermissions defines model for UPAttributePermissions.
type UPAttributePermissions struct {
	Edit *[]string `json:"edit,omitempty"`
	View *[]string `json:"view,omitempty"`
}

// UPAttributeRequired defines model for UPAttributeRequired.
type UPAttributeRequired struct {
	Roles  *[]string `json:"roles,omitempty"`
	Scopes *[]string `json:"scopes,omitempty"`
}

// UPAttributeSelector defines model for UPAttributeSelector.
type UPAttributeSelector struct {
	Scopes *[]string `json:"scopes,omitempty"`
}

// UPConfig defines model for UPConfig.
type UPConfig struct {
	Attributes               *[]UPAttribute            `json:"attributes,omitempty"`
	Groups                   *[]UPGroup                `json:"groups,omitempty"`
	UnmanagedAttributePolicy *UnmanagedAttributePolicy `json:"unmanagedAttributePolicy,omitempty"`
}

// UPGroup defines model for UPGroup.
type UPGroup struct {
	Annotations        *map[string]interface{} `json:"annotations,omitempty"`
	DisplayDescription *string                 `json:"displayDescription,omitempty"`
	DisplayHeader      *string                 `json:"displayHeader,omitempty"`
	Name               *string                 `json:"name,omitempty"`
}

// UnmanagedAttributePolicy defines model for UnmanagedAttributePolicy.
type UnmanagedAttributePolicy string

// UserConsentRepresentation defines model for UserConsentRepresentation.
type UserConsentRepresentation struct {
	ClientId            *string   `json:"clientId,omitempty"`
	CreatedDate         *int64    `json:"createdDate,omitempty"`
	GrantedClientScopes *[]string `json:"grantedClientScopes,omitempty"`
	// Deprecated:
	GrantedRealmRoles *[]string `json:"grantedRealmRoles,omitempty"`
	LastUpdatedDate   *int64    `json:"lastUpdatedDate,omitempty"`
}

// UserProfileAttributeGroupMetadata defines model for UserProfileAttributeGroupMetadata.
type UserProfileAttributeGroupMetadata struct {
	Annotations        *map[string]interface{} `json:"annotations,omitempty"`
	DisplayDescription *string                 `json:"displayDescription,omitempty"`
	DisplayHeader      *string                 `json:"displayHeader,omitempty"`
	Name               *string                 `json:"name,omitempty"`
}

// UserProfileAttributeMetadata defines model for UserProfileAttributeMetadata.
type UserProfileAttributeMetadata struct {
	Annotations *map[string]interface{}            `json:"annotations,omitempty"`
	DisplayName *string                            `json:"displayName,omitempty"`
	Group       *string                            `json:"group,omitempty"`
	Multivalued *bool                              `json:"multivalued,omitempty"`
	Name        *string                            `json:"name,omitempty"`
	ReadOnly    *bool                              `json:"readOnly,omitempty"`
	Required    *bool                              `json:"required,omitempty"`
	Validators  *map[string]map[string]interface{} `json:"validators,omitempty"`
}

// UserProfileMetadata defines model for UserProfileMetadata.
type UserProfileMetadata struct {
	Attributes *[]UserProfileAttributeMetadata      `json:"attributes,omitempty"`
	Groups     *[]UserProfileAttributeGroupMetadata `json:"groups,omitempty"`
}

// UserRepresentation defines model for UserRepresentation.
type UserRepresentation struct {
	Access *map[string]bool `json:"access,omitempty"`
	// Deprecated:
	ApplicationRoles           *map[string][]string               `json:"applicationRoles,omitempty"`
	Attributes                 *map[string][]string               `json:"attributes,omitempty"`
	ClientConsents             *[]UserConsentRepresentation       `json:"clientConsents,omitempty"`
	ClientRoles                *map[string][]string               `json:"clientRoles,omitempty"`
	CreatedTimestamp           *int64                             `json:"createdTimestamp,omitempty"`
	Credentials                *[]CredentialRepresentation        `json:"credentials,omitempty"`
	DisableableCredentialTypes *[]string                          `json:"disableableCredentialTypes,omitempty"`
	Email                      *string                            `json:"email,omitempty"`
	EmailVerified              *bool                              `json:"emailVerified,omitempty"`
	Enabled                    *bool                              `json:"enabled,omitempty"`
	FederatedIdentities        *[]FederatedIdentityRepresentation `json:"federatedIdentities,omitempty"`
	FederationLink             *string                            `json:"federationLink,omitempty"`
	FirstName                  *string                            `json:"firstName,omitempty"`
	Groups                     *[]string                          `json:"groups,omitempty"`
	Id                         *string                            `json:"id,omitempty"`
	LastName                   *string                            `json:"lastName,omitempty"`
	NotBefore                  *int32                             `json:"notBefore,omitempty"`
	Origin                     *string                            `json:"origin,omitempty"`
	RealmRoles                 *[]string                          `json:"realmRoles,omitempty"`
	RequiredActions            *[]string                          `json:"requiredActions,omitempty"`
	Self                       *string                            `json:"self,omitempty"`
	ServiceAccountClientId     *string                            `json:"serviceAccountClientId,omitempty"`
	// Deprecated:
	SocialLinks         *[]SocialLinkRepresentation `json:"socialLinks,omitempty"`
	Totp                *bool                       `json:"totp,omitempty"`
	UserProfileMetadata *UserProfileMetadata        `json:"userProfileMetadata,omitempty"`
	Username            *string                     `json:"username,omitempty"`
}

// UserSessionRepresentation defines model for UserSessionRepresentation.
type UserSessionRepresentation struct {
	Clients       *map[string]string `json:"clients,omitempty"`
	Id            *string            `json:"id,omitempty"`
	IpAddress     *string            `json:"ipAddress,omitempty"`
	LastAccess    *int64             `json:"lastAccess,omitempty"`
	RememberMe    *bool              `json:"rememberMe,omitempty"`
	Start         *int64             `json:"start,omitempty"`
	TransientUser *bool              `json:"transientUser,omitempty"`
	UserId        *string            `json:"userId,omitempty"`
	Username      *string            `json:"username,omitempty"`
}

// GetAdminRealmsRealmUsersParams defines parameters for GetAdminRealmsRealmUsers.
type GetAdminRealmsRealmUsersParams struct {
	// BriefRepresentation Boolean which defines whether brief representations are returned (default: false)
	BriefRepresentation *bool `form:"briefRepresentation,omitempty" json:"briefRepresentation,omitempty"`

	// Email A String contained in email, or the complete email, if param "exact" is true
	Email *string `form:"email,omitempty" json:"email,omitempty"`

	// EmailVerified whether the email has been verified
	EmailVerified *bool `form:"emailVerified,omitempty" json:"emailVerified,omitempty"`

	// Enabled Boolean representing if user is enabled or not
	Enabled *bool `form:"enabled,omitempty" json:"enabled,omitempty"`

	// Exact Boolean which defines whether the params "last", "first", "email" and "username" must match exactly
	Exact *bool `form:"exact,omitempty" json:"exact,omitempty"`

	// First Pagination offset
	First *int32 `form:"first,omitempty" json:"first,omitempty"`

	// FirstName A String contained in firstName, or the complete firstName, if param "exact" is true
	FirstName *string `form:"firstName,omitempty" json:"firstName,omitempty"`

	// IdpAlias The alias of an Identity Provider linked to the user
	IdpAlias *string `form:"idpAlias,omitempty" json:"idpAlias,omitempty"`

	// IdpUserId The userId at an Identity Provider linked to the user
	IdpUserId *string `form:"idpUserId,omitempty" json:"idpUserId,omitempty"`

	// LastName A String contained in lastName, or the complete lastName, if param "exact" is true
	LastName *string `form:"lastName,omitempty" json:"lastName,omitempty"`

	// Max Maximum results size (defaults to 100)
	Max *int32 `form:"max,omitempty" json:"max,omitempty"`

	// Q A query to search for custom attributes, in the format 'key1:value2 key2:value2'
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Search A String contained in username, first or last name, or email. Default search behavior is prefix-based (e.g., foo or foo*). Use *foo* for infix search and "foo" for exact search.
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Username A String contained in username, or the complete username, if param "exact" is true
	Username *string `form:"username,omitempty" json:"username,omitempty"`
}

// GetAdminRealmsRealmUsersCountParams defines parameters for GetAdminRealmsRealmUsersCount.
type GetAdminRealmsRealmUsersCountParams struct {
	// Email email filter
	Email         *string `form:"email,omitempty" json:"email,omitempty"`
	EmailVerified *bool   `form:"emailVerified,omitempty" json:"emailVerified,omitempty"`

	// Enabled Boolean representing if user is enabled or not
	Enabled *bool `form:"enabled,omitempty" json:"enabled,omitempty"`

	// FirstName first name filter
	FirstName *string `form:"firstName,omitempty" json:"firstName,omitempty"`

	// LastName last name filter
	LastName *string `form:"lastName,omitempty" json:"lastName,omitempty"`
	Q        *string `form:"q,omitempty" json:"q,omitempty"`

	// Search arbitrary search string for all the fields below. Default search behavior is prefix-based (e.g., foo or foo*). Use *foo* for infix search and "foo" for exact search.
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Username username filter
	Username *string `form:"username,omitempty" json:"username,omitempty"`
}

// GetAdminRealmsRealmUsersUserIdParams defines parameters for GetAdminRealmsRealmUsersUserId.
type GetAdminRealmsRealmUsersUserIdParams struct {
	// UserProfileMetadata Indicates if the user profile metadata should be added to the response
	UserProfileMetadata *bool `form:"userProfileMetadata,omitempty" json:"userProfileMetadata,omitempty"`
}

// PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelTextBody defines parameters for PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabel.
type PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelTextBody = string

// PutAdminRealmsRealmUsersUserIdDisableCredentialTypesJSONBody defines parameters for PutAdminRealmsRealmUsersUserIdDisableCredentialTypes.
type PutAdminRealmsRealmUsersUserIdDisableCredentialTypesJSONBody = []string

// PutAdminRealmsRealmUsersUserIdExecuteActionsEmailJSONBody defines parameters for PutAdminRealmsRealmUsersUserIdExecuteActionsEmail.
type PutAdminRealmsRealmUsersUserIdExecuteActionsEmailJSONBody = []string

// PutAdminRealmsRealmUsersUserIdExecuteActionsEmailParams defines parameters for PutAdminRealmsRealmUsersUserIdExecuteActionsEmail.
type PutAdminRealmsRealmUsersUserIdExecuteActionsEmailParams struct {
	// ClientId Client id
	ClientId *string `form:"client_id,omitempty" json:"client_id,omitempty"`

	// Lifespan Number of seconds after which the generated token expires
	Lifespan *int32 `form:"lifespan,omitempty" json:"lifespan,omitempty"`

	// RedirectUri Redirect uri
	RedirectUri *string `form:"redirect_uri,omitempty" json:"redirect_uri,omitempty"`
}

// GetAdminRealmsRealmUsersUserIdGroupsParams defines parameters for GetAdminRealmsRealmUsersUserIdGroups.
type GetAdminRealmsRealmUsersUserIdGroupsParams struct {
	BriefRepresentation *bool   `form:"briefRepresentation,omitempty" json:"briefRepresentation,omitempty"`
	First               *int32  `form:"first,omitempty" json:"first,omitempty"`
	Max                 *int32  `form:"max,omitempty" json:"max,omitempty"`
	Search              *string `form:"search,omitempty" json:"search,omitempty"`
}

// GetAdminRealmsRealmUsersUserIdGroupsCountParams defines parameters for GetAdminRealmsRealmUsersUserIdGroupsCount.
type GetAdminRealmsRealmUsersUserIdGroupsCountParams struct {
	Search *string `form:"search,omitempty" json:"search,omitempty"`
}

// PutAdminRealmsRealmUsersUserIdResetPasswordEmailParams defines parameters for PutAdminRealmsRealmUsersUserIdResetPasswordEmail.
type PutAdminRealmsRealmUsersUserIdResetPasswordEmailParams struct {
	// ClientId client id
	ClientId *string `form:"client_id,omitempty" json:"client_id,omitempty"`

	// RedirectUri redirect uri
	RedirectUri *string `form:"redirect_uri,omitempty" json:"redirect_uri,omitempty"`
}

// PutAdminRealmsRealmUsersUserIdSendVerifyEmailParams defines parameters for PutAdminRealmsRealmUsersUserIdSendVerifyEmail.
type PutAdminRealmsRealmUsersUserIdSendVerifyEmailParams struct {
	// ClientId Client id
	ClientId *string `form:"client_id,omitempty" json:"client_id,omitempty"`

	// Lifespan Number of seconds after which the generated token expires
	Lifespan *int32 `form:"lifespan,omitempty" json:"lifespan,omitempty"`

	// RedirectUri Redirect uri
	RedirectUri *string `form:"redirect_uri,omitempty" json:"redirect_uri,omitempty"`
}

// PostAdminRealmsRealmUsersJSONRequestBody defines body for PostAdminRealmsRealmUsers for application/json ContentType.
type PostAdminRealmsRealmUsersJSONRequestBody = UserRepresentation

// PutAdminRealmsRealmUsersProfileJSONRequestBody defines body for PutAdminRealmsRealmUsersProfile for application/json ContentType.
type PutAdminRealmsRealmUsersProfileJSONRequestBody = UPConfig

// PutAdminRealmsRealmUsersUserIdJSONRequestBody defines body for PutAdminRealmsRealmUsersUserId for application/json ContentType.
type PutAdminRealmsRealmUsersUserIdJSONRequestBody = UserRepresentation

// PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelTextRequestBody defines body for PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabel for text/plain ContentType.
type PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelTextRequestBody = PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelTextBody

// PutAdminRealmsRealmUsersUserIdDisableCredentialTypesJSONRequestBody defines body for PutAdminRealmsRealmUsersUserIdDisableCredentialTypes for application/json ContentType.
type PutAdminRealmsRealmUsersUserIdDisableCredentialTypesJSONRequestBody = PutAdminRealmsRealmUsersUserIdDisableCredentialTypesJSONBody

// PutAdminRealmsRealmUsersUserIdExecuteActionsEmailJSONRequestBody defines body for PutAdminRealmsRealmUsersUserIdExecuteActionsEmail for application/json ContentType.
type PutAdminRealmsRealmUsersUserIdExecuteActionsEmailJSONRequestBody = PutAdminRealmsRealmUsersUserIdExecuteActionsEmailJSONBody

// PutAdminRealmsRealmUsersUserIdResetPasswordJSONRequestBody defines body for PutAdminRealmsRealmUsersUserIdResetPassword for application/json ContentType.
type PutAdminRealmsRealmUsersUserIdResetPasswordJSONRequestBody = CredentialRepresentation

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAdminRealmsRealmUsers request
	GetAdminRealmsRealmUsers(ctx context.Context, realm string, params *GetAdminRealmsRealmUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmUsersWithBody request with any body
	PostAdminRealmsRealmUsersWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealmsRealmUsers(ctx context.Context, realm string, body PostAdminRealmsRealmUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmUsersCount request
	GetAdminRealmsRealmUsersCount(ctx context.Context, realm string, params *GetAdminRealmsRealmUsersCountParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmUsersProfile request
	GetAdminRealmsRealmUsersProfile(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminRealmsRealmUsersProfileWithBody request with any body
	PutAdminRealmsRealmUsersProfileWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAdminRealmsRealmUsersProfile(ctx context.Context, realm string, body PutAdminRealmsRealmUsersProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmUsersProfileMetadata request
	GetAdminRealmsRealmUsersProfileMetadata(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminRealmsRealmUsersUserId request
	DeleteAdminRealmsRealmUsersUserId(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmUsersUserId request
	GetAdminRealmsRealmUsersUserId(ctx context.Context, realm string, userId string, params *GetAdminRealmsRealmUsersUserIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminRealmsRealmUsersUserIdWithBody request with any body
	PutAdminRealmsRealmUsersUserIdWithBody(ctx context.Context, realm string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAdminRealmsRealmUsersUserId(ctx context.Context, realm string, userId string, body PutAdminRealmsRealmUsersUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypes request
	GetAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypes(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmUsersUserIdConsents request
	GetAdminRealmsRealmUsersUserIdConsents(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminRealmsRealmUsersUserIdConsentsClient request
	DeleteAdminRealmsRealmUsersUserIdConsentsClient(ctx context.Context, realm string, userId string, client string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmUsersUserIdCredentials request
	GetAdminRealmsRealmUsersUserIdCredentials(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminRealmsRealmUsersUserIdCredentialsCredentialId request
	DeleteAdminRealmsRealmUsersUserIdCredentialsCredentialId(ctx context.Context, realm string, userId string, credentialId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialId request
	PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialId(ctx context.Context, realm string, userId string, credentialId string, newPreviousCredentialId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirst request
	PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirst(ctx context.Context, realm string, userId string, credentialId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelWithBody request with any body
	PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelWithBody(ctx context.Context, realm string, userId string, credentialId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelWithTextBody(ctx context.Context, realm string, userId string, credentialId string, body PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminRealmsRealmUsersUserIdDisableCredentialTypesWithBody request with any body
	PutAdminRealmsRealmUsersUserIdDisableCredentialTypesWithBody(ctx context.Context, realm string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAdminRealmsRealmUsersUserIdDisableCredentialTypes(ctx context.Context, realm string, userId string, body PutAdminRealmsRealmUsersUserIdDisableCredentialTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminRealmsRealmUsersUserIdExecuteActionsEmailWithBody request with any body
	PutAdminRealmsRealmUsersUserIdExecuteActionsEmailWithBody(ctx context.Context, realm string, userId string, params *PutAdminRealmsRealmUsersUserIdExecuteActionsEmailParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAdminRealmsRealmUsersUserIdExecuteActionsEmail(ctx context.Context, realm string, userId string, params *PutAdminRealmsRealmUsersUserIdExecuteActionsEmailParams, body PutAdminRealmsRealmUsersUserIdExecuteActionsEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmUsersUserIdFederatedIdentity request
	GetAdminRealmsRealmUsersUserIdFederatedIdentity(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminRealmsRealmUsersUserIdFederatedIdentityProvider request
	DeleteAdminRealmsRealmUsersUserIdFederatedIdentityProvider(ctx context.Context, realm string, userId string, provider string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmUsersUserIdFederatedIdentityProvider request
	PostAdminRealmsRealmUsersUserIdFederatedIdentityProvider(ctx context.Context, realm string, userId string, provider string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmUsersUserIdGroups request
	GetAdminRealmsRealmUsersUserIdGroups(ctx context.Context, realm string, userId string, params *GetAdminRealmsRealmUsersUserIdGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmUsersUserIdGroupsCount request
	GetAdminRealmsRealmUsersUserIdGroupsCount(ctx context.Context, realm string, userId string, params *GetAdminRealmsRealmUsersUserIdGroupsCountParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminRealmsRealmUsersUserIdGroupsGroupId request
	DeleteAdminRealmsRealmUsersUserIdGroupsGroupId(ctx context.Context, realm string, userId string, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminRealmsRealmUsersUserIdGroupsGroupId request
	PutAdminRealmsRealmUsersUserIdGroupsGroupId(ctx context.Context, realm string, userId string, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmUsersUserIdImpersonation request
	PostAdminRealmsRealmUsersUserIdImpersonation(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmUsersUserIdLogout request
	PostAdminRealmsRealmUsersUserIdLogout(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmUsersUserIdOfflineSessionsClientUuid request
	GetAdminRealmsRealmUsersUserIdOfflineSessionsClientUuid(ctx context.Context, realm string, userId string, clientUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminRealmsRealmUsersUserIdResetPasswordWithBody request with any body
	PutAdminRealmsRealmUsersUserIdResetPasswordWithBody(ctx context.Context, realm string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAdminRealmsRealmUsersUserIdResetPassword(ctx context.Context, realm string, userId string, body PutAdminRealmsRealmUsersUserIdResetPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminRealmsRealmUsersUserIdResetPasswordEmail request
	PutAdminRealmsRealmUsersUserIdResetPasswordEmail(ctx context.Context, realm string, userId string, params *PutAdminRealmsRealmUsersUserIdResetPasswordEmailParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminRealmsRealmUsersUserIdSendVerifyEmail request
	PutAdminRealmsRealmUsersUserIdSendVerifyEmail(ctx context.Context, realm string, userId string, params *PutAdminRealmsRealmUsersUserIdSendVerifyEmailParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmUsersUserIdSessions request
	GetAdminRealmsRealmUsersUserIdSessions(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmUsersUserIdUnmanagedAttributes request
	GetAdminRealmsRealmUsersUserIdUnmanagedAttributes(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAdminRealmsRealmUsers(ctx context.Context, realm string, params *GetAdminRealmsRealmUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmUsersRequest(c.Server, realm, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmUsersWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmUsersRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmUsers(ctx context.Context, realm string, body PostAdminRealmsRealmUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmUsersRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmUsersCount(ctx context.Context, realm string, params *GetAdminRealmsRealmUsersCountParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmUsersCountRequest(c.Server, realm, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmUsersProfile(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmUsersProfileRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmUsersProfileWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmUsersProfileRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmUsersProfile(ctx context.Context, realm string, body PutAdminRealmsRealmUsersProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmUsersProfileRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmUsersProfileMetadata(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmUsersProfileMetadataRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmUsersUserId(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmUsersUserIdRequest(c.Server, realm, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmUsersUserId(ctx context.Context, realm string, userId string, params *GetAdminRealmsRealmUsersUserIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmUsersUserIdRequest(c.Server, realm, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmUsersUserIdWithBody(ctx context.Context, realm string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmUsersUserIdRequestWithBody(c.Server, realm, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmUsersUserId(ctx context.Context, realm string, userId string, body PutAdminRealmsRealmUsersUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmUsersUserIdRequest(c.Server, realm, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypes(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesRequest(c.Server, realm, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmUsersUserIdConsents(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmUsersUserIdConsentsRequest(c.Server, realm, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmUsersUserIdConsentsClient(ctx context.Context, realm string, userId string, client string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmUsersUserIdConsentsClientRequest(c.Server, realm, userId, client)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmUsersUserIdCredentials(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmUsersUserIdCredentialsRequest(c.Server, realm, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmUsersUserIdCredentialsCredentialId(ctx context.Context, realm string, userId string, credentialId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmUsersUserIdCredentialsCredentialIdRequest(c.Server, realm, userId, credentialId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialId(ctx context.Context, realm string, userId string, credentialId string, newPreviousCredentialId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdRequest(c.Server, realm, userId, credentialId, newPreviousCredentialId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirst(ctx context.Context, realm string, userId string, credentialId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstRequest(c.Server, realm, userId, credentialId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelWithBody(ctx context.Context, realm string, userId string, credentialId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelRequestWithBody(c.Server, realm, userId, credentialId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelWithTextBody(ctx context.Context, realm string, userId string, credentialId string, body PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelRequestWithTextBody(c.Server, realm, userId, credentialId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmUsersUserIdDisableCredentialTypesWithBody(ctx context.Context, realm string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmUsersUserIdDisableCredentialTypesRequestWithBody(c.Server, realm, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmUsersUserIdDisableCredentialTypes(ctx context.Context, realm string, userId string, body PutAdminRealmsRealmUsersUserIdDisableCredentialTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmUsersUserIdDisableCredentialTypesRequest(c.Server, realm, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmUsersUserIdExecuteActionsEmailWithBody(ctx context.Context, realm string, userId string, params *PutAdminRealmsRealmUsersUserIdExecuteActionsEmailParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmUsersUserIdExecuteActionsEmailRequestWithBody(c.Server, realm, userId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmUsersUserIdExecuteActionsEmail(ctx context.Context, realm string, userId string, params *PutAdminRealmsRealmUsersUserIdExecuteActionsEmailParams, body PutAdminRealmsRealmUsersUserIdExecuteActionsEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmUsersUserIdExecuteActionsEmailRequest(c.Server, realm, userId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmUsersUserIdFederatedIdentity(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmUsersUserIdFederatedIdentityRequest(c.Server, realm, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmUsersUserIdFederatedIdentityProvider(ctx context.Context, realm string, userId string, provider string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmUsersUserIdFederatedIdentityProviderRequest(c.Server, realm, userId, provider)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmUsersUserIdFederatedIdentityProvider(ctx context.Context, realm string, userId string, provider string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmUsersUserIdFederatedIdentityProviderRequest(c.Server, realm, userId, provider)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmUsersUserIdGroups(ctx context.Context, realm string, userId string, params *GetAdminRealmsRealmUsersUserIdGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmUsersUserIdGroupsRequest(c.Server, realm, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmUsersUserIdGroupsCount(ctx context.Context, realm string, userId string, params *GetAdminRealmsRealmUsersUserIdGroupsCountParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmUsersUserIdGroupsCountRequest(c.Server, realm, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmUsersUserIdGroupsGroupId(ctx context.Context, realm string, userId string, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmUsersUserIdGroupsGroupIdRequest(c.Server, realm, userId, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmUsersUserIdGroupsGroupId(ctx context.Context, realm string, userId string, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmUsersUserIdGroupsGroupIdRequest(c.Server, realm, userId, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmUsersUserIdImpersonation(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmUsersUserIdImpersonationRequest(c.Server, realm, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmUsersUserIdLogout(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmUsersUserIdLogoutRequest(c.Server, realm, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmUsersUserIdOfflineSessionsClientUuid(ctx context.Context, realm string, userId string, clientUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmUsersUserIdOfflineSessionsClientUuidRequest(c.Server, realm, userId, clientUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmUsersUserIdResetPasswordWithBody(ctx context.Context, realm string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmUsersUserIdResetPasswordRequestWithBody(c.Server, realm, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmUsersUserIdResetPassword(ctx context.Context, realm string, userId string, body PutAdminRealmsRealmUsersUserIdResetPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmUsersUserIdResetPasswordRequest(c.Server, realm, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmUsersUserIdResetPasswordEmail(ctx context.Context, realm string, userId string, params *PutAdminRealmsRealmUsersUserIdResetPasswordEmailParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmUsersUserIdResetPasswordEmailRequest(c.Server, realm, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmUsersUserIdSendVerifyEmail(ctx context.Context, realm string, userId string, params *PutAdminRealmsRealmUsersUserIdSendVerifyEmailParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmUsersUserIdSendVerifyEmailRequest(c.Server, realm, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmUsersUserIdSessions(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmUsersUserIdSessionsRequest(c.Server, realm, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmUsersUserIdUnmanagedAttributes(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmUsersUserIdUnmanagedAttributesRequest(c.Server, realm, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAdminRealmsRealmUsersRequest generates requests for GetAdminRealmsRealmUsers
func NewGetAdminRealmsRealmUsersRequest(server string, realm string, params *GetAdminRealmsRealmUsersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BriefRepresentation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "briefRepresentation", runtime.ParamLocationQuery, *params.BriefRepresentation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Email != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email", runtime.ParamLocationQuery, *params.Email); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EmailVerified != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "emailVerified", runtime.ParamLocationQuery, *params.EmailVerified); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Enabled != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enabled", runtime.ParamLocationQuery, *params.Enabled); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Exact != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exact", runtime.ParamLocationQuery, *params.Exact); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FirstName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "firstName", runtime.ParamLocationQuery, *params.FirstName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdpAlias != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "idpAlias", runtime.ParamLocationQuery, *params.IdpAlias); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdpUserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "idpUserId", runtime.ParamLocationQuery, *params.IdpUserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lastName", runtime.ParamLocationQuery, *params.LastName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Username != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username", runtime.ParamLocationQuery, *params.Username); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmUsersRequest calls the generic PostAdminRealmsRealmUsers builder with application/json body
func NewPostAdminRealmsRealmUsersRequest(server string, realm string, body PostAdminRealmsRealmUsersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminRealmsRealmUsersRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPostAdminRealmsRealmUsersRequestWithBody generates requests for PostAdminRealmsRealmUsers with any type of body
func NewPostAdminRealmsRealmUsersRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmUsersCountRequest generates requests for GetAdminRealmsRealmUsersCount
func NewGetAdminRealmsRealmUsersCountRequest(server string, realm string, params *GetAdminRealmsRealmUsersCountParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/count", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Email != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email", runtime.ParamLocationQuery, *params.Email); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EmailVerified != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "emailVerified", runtime.ParamLocationQuery, *params.EmailVerified); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Enabled != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enabled", runtime.ParamLocationQuery, *params.Enabled); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FirstName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "firstName", runtime.ParamLocationQuery, *params.FirstName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lastName", runtime.ParamLocationQuery, *params.LastName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Username != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username", runtime.ParamLocationQuery, *params.Username); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmUsersProfileRequest generates requests for GetAdminRealmsRealmUsersProfile
func NewGetAdminRealmsRealmUsersProfileRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/profile", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAdminRealmsRealmUsersProfileRequest calls the generic PutAdminRealmsRealmUsersProfile builder with application/json body
func NewPutAdminRealmsRealmUsersProfileRequest(server string, realm string, body PutAdminRealmsRealmUsersProfileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAdminRealmsRealmUsersProfileRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPutAdminRealmsRealmUsersProfileRequestWithBody generates requests for PutAdminRealmsRealmUsersProfile with any type of body
func NewPutAdminRealmsRealmUsersProfileRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/profile", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmUsersProfileMetadataRequest generates requests for GetAdminRealmsRealmUsersProfileMetadata
func NewGetAdminRealmsRealmUsersProfileMetadataRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/profile/metadata", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAdminRealmsRealmUsersUserIdRequest generates requests for DeleteAdminRealmsRealmUsersUserId
func NewDeleteAdminRealmsRealmUsersUserIdRequest(server string, realm string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmUsersUserIdRequest generates requests for GetAdminRealmsRealmUsersUserId
func NewGetAdminRealmsRealmUsersUserIdRequest(server string, realm string, userId string, params *GetAdminRealmsRealmUsersUserIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UserProfileMetadata != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userProfileMetadata", runtime.ParamLocationQuery, *params.UserProfileMetadata); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAdminRealmsRealmUsersUserIdRequest calls the generic PutAdminRealmsRealmUsersUserId builder with application/json body
func NewPutAdminRealmsRealmUsersUserIdRequest(server string, realm string, userId string, body PutAdminRealmsRealmUsersUserIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAdminRealmsRealmUsersUserIdRequestWithBody(server, realm, userId, "application/json", bodyReader)
}

// NewPutAdminRealmsRealmUsersUserIdRequestWithBody generates requests for PutAdminRealmsRealmUsersUserId with any type of body
func NewPutAdminRealmsRealmUsersUserIdRequestWithBody(server string, realm string, userId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesRequest generates requests for GetAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypes
func NewGetAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesRequest(server string, realm string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s/configured-user-storage-credential-types", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmUsersUserIdConsentsRequest generates requests for GetAdminRealmsRealmUsersUserIdConsents
func NewGetAdminRealmsRealmUsersUserIdConsentsRequest(server string, realm string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s/consents", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAdminRealmsRealmUsersUserIdConsentsClientRequest generates requests for DeleteAdminRealmsRealmUsersUserIdConsentsClient
func NewDeleteAdminRealmsRealmUsersUserIdConsentsClientRequest(server string, realm string, userId string, client string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s/consents/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmUsersUserIdCredentialsRequest generates requests for GetAdminRealmsRealmUsersUserIdCredentials
func NewGetAdminRealmsRealmUsersUserIdCredentialsRequest(server string, realm string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s/credentials", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAdminRealmsRealmUsersUserIdCredentialsCredentialIdRequest generates requests for DeleteAdminRealmsRealmUsersUserIdCredentialsCredentialId
func NewDeleteAdminRealmsRealmUsersUserIdCredentialsCredentialIdRequest(server string, realm string, userId string, credentialId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "credentialId", runtime.ParamLocationPath, credentialId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s/credentials/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdRequest generates requests for PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialId
func NewPostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdRequest(server string, realm string, userId string, credentialId string, newPreviousCredentialId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "credentialId", runtime.ParamLocationPath, credentialId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "newPreviousCredentialId", runtime.ParamLocationPath, newPreviousCredentialId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s/credentials/%s/moveAfter/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstRequest generates requests for PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirst
func NewPostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstRequest(server string, realm string, userId string, credentialId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "credentialId", runtime.ParamLocationPath, credentialId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s/credentials/%s/moveToFirst", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelRequestWithTextBody calls the generic PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabel builder with text/plain body
func NewPutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelRequestWithTextBody(server string, realm string, userId string, credentialId string, body PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelTextRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyReader = strings.NewReader(string(body))
	return NewPutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelRequestWithBody(server, realm, userId, credentialId, "text/plain", bodyReader)
}

// NewPutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelRequestWithBody generates requests for PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabel with any type of body
func NewPutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelRequestWithBody(server string, realm string, userId string, credentialId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "credentialId", runtime.ParamLocationPath, credentialId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s/credentials/%s/userLabel", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutAdminRealmsRealmUsersUserIdDisableCredentialTypesRequest calls the generic PutAdminRealmsRealmUsersUserIdDisableCredentialTypes builder with application/json body
func NewPutAdminRealmsRealmUsersUserIdDisableCredentialTypesRequest(server string, realm string, userId string, body PutAdminRealmsRealmUsersUserIdDisableCredentialTypesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAdminRealmsRealmUsersUserIdDisableCredentialTypesRequestWithBody(server, realm, userId, "application/json", bodyReader)
}

// NewPutAdminRealmsRealmUsersUserIdDisableCredentialTypesRequestWithBody generates requests for PutAdminRealmsRealmUsersUserIdDisableCredentialTypes with any type of body
func NewPutAdminRealmsRealmUsersUserIdDisableCredentialTypesRequestWithBody(server string, realm string, userId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s/disable-credential-types", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutAdminRealmsRealmUsersUserIdExecuteActionsEmailRequest calls the generic PutAdminRealmsRealmUsersUserIdExecuteActionsEmail builder with application/json body
func NewPutAdminRealmsRealmUsersUserIdExecuteActionsEmailRequest(server string, realm string, userId string, params *PutAdminRealmsRealmUsersUserIdExecuteActionsEmailParams, body PutAdminRealmsRealmUsersUserIdExecuteActionsEmailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAdminRealmsRealmUsersUserIdExecuteActionsEmailRequestWithBody(server, realm, userId, params, "application/json", bodyReader)
}

// NewPutAdminRealmsRealmUsersUserIdExecuteActionsEmailRequestWithBody generates requests for PutAdminRealmsRealmUsersUserIdExecuteActionsEmail with any type of body
func NewPutAdminRealmsRealmUsersUserIdExecuteActionsEmailRequestWithBody(server string, realm string, userId string, params *PutAdminRealmsRealmUsersUserIdExecuteActionsEmailParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s/execute-actions-email", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ClientId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "client_id", runtime.ParamLocationQuery, *params.ClientId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Lifespan != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lifespan", runtime.ParamLocationQuery, *params.Lifespan); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RedirectUri != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "redirect_uri", runtime.ParamLocationQuery, *params.RedirectUri); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmUsersUserIdFederatedIdentityRequest generates requests for GetAdminRealmsRealmUsersUserIdFederatedIdentity
func NewGetAdminRealmsRealmUsersUserIdFederatedIdentityRequest(server string, realm string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s/federated-identity", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAdminRealmsRealmUsersUserIdFederatedIdentityProviderRequest generates requests for DeleteAdminRealmsRealmUsersUserIdFederatedIdentityProvider
func NewDeleteAdminRealmsRealmUsersUserIdFederatedIdentityProviderRequest(server string, realm string, userId string, provider string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "provider", runtime.ParamLocationPath, provider)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s/federated-identity/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmUsersUserIdFederatedIdentityProviderRequest generates requests for PostAdminRealmsRealmUsersUserIdFederatedIdentityProvider
func NewPostAdminRealmsRealmUsersUserIdFederatedIdentityProviderRequest(server string, realm string, userId string, provider string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "provider", runtime.ParamLocationPath, provider)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s/federated-identity/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmUsersUserIdGroupsRequest generates requests for GetAdminRealmsRealmUsersUserIdGroups
func NewGetAdminRealmsRealmUsersUserIdGroupsRequest(server string, realm string, userId string, params *GetAdminRealmsRealmUsersUserIdGroupsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s/groups", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BriefRepresentation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "briefRepresentation", runtime.ParamLocationQuery, *params.BriefRepresentation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmUsersUserIdGroupsCountRequest generates requests for GetAdminRealmsRealmUsersUserIdGroupsCount
func NewGetAdminRealmsRealmUsersUserIdGroupsCountRequest(server string, realm string, userId string, params *GetAdminRealmsRealmUsersUserIdGroupsCountParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s/groups/count", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAdminRealmsRealmUsersUserIdGroupsGroupIdRequest generates requests for DeleteAdminRealmsRealmUsersUserIdGroupsGroupId
func NewDeleteAdminRealmsRealmUsersUserIdGroupsGroupIdRequest(server string, realm string, userId string, groupId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s/groups/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAdminRealmsRealmUsersUserIdGroupsGroupIdRequest generates requests for PutAdminRealmsRealmUsersUserIdGroupsGroupId
func NewPutAdminRealmsRealmUsersUserIdGroupsGroupIdRequest(server string, realm string, userId string, groupId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s/groups/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmUsersUserIdImpersonationRequest generates requests for PostAdminRealmsRealmUsersUserIdImpersonation
func NewPostAdminRealmsRealmUsersUserIdImpersonationRequest(server string, realm string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s/impersonation", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmUsersUserIdLogoutRequest generates requests for PostAdminRealmsRealmUsersUserIdLogout
func NewPostAdminRealmsRealmUsersUserIdLogoutRequest(server string, realm string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s/logout", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmUsersUserIdOfflineSessionsClientUuidRequest generates requests for GetAdminRealmsRealmUsersUserIdOfflineSessionsClientUuid
func NewGetAdminRealmsRealmUsersUserIdOfflineSessionsClientUuidRequest(server string, realm string, userId string, clientUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "clientUuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s/offline-sessions/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAdminRealmsRealmUsersUserIdResetPasswordRequest calls the generic PutAdminRealmsRealmUsersUserIdResetPassword builder with application/json body
func NewPutAdminRealmsRealmUsersUserIdResetPasswordRequest(server string, realm string, userId string, body PutAdminRealmsRealmUsersUserIdResetPasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAdminRealmsRealmUsersUserIdResetPasswordRequestWithBody(server, realm, userId, "application/json", bodyReader)
}

// NewPutAdminRealmsRealmUsersUserIdResetPasswordRequestWithBody generates requests for PutAdminRealmsRealmUsersUserIdResetPassword with any type of body
func NewPutAdminRealmsRealmUsersUserIdResetPasswordRequestWithBody(server string, realm string, userId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s/reset-password", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutAdminRealmsRealmUsersUserIdResetPasswordEmailRequest generates requests for PutAdminRealmsRealmUsersUserIdResetPasswordEmail
func NewPutAdminRealmsRealmUsersUserIdResetPasswordEmailRequest(server string, realm string, userId string, params *PutAdminRealmsRealmUsersUserIdResetPasswordEmailParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s/reset-password-email", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ClientId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "client_id", runtime.ParamLocationQuery, *params.ClientId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RedirectUri != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "redirect_uri", runtime.ParamLocationQuery, *params.RedirectUri); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAdminRealmsRealmUsersUserIdSendVerifyEmailRequest generates requests for PutAdminRealmsRealmUsersUserIdSendVerifyEmail
func NewPutAdminRealmsRealmUsersUserIdSendVerifyEmailRequest(server string, realm string, userId string, params *PutAdminRealmsRealmUsersUserIdSendVerifyEmailParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s/send-verify-email", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ClientId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "client_id", runtime.ParamLocationQuery, *params.ClientId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Lifespan != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lifespan", runtime.ParamLocationQuery, *params.Lifespan); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RedirectUri != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "redirect_uri", runtime.ParamLocationQuery, *params.RedirectUri); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmUsersUserIdSessionsRequest generates requests for GetAdminRealmsRealmUsersUserIdSessions
func NewGetAdminRealmsRealmUsersUserIdSessionsRequest(server string, realm string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s/sessions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmUsersUserIdUnmanagedAttributesRequest generates requests for GetAdminRealmsRealmUsersUserIdUnmanagedAttributes
func NewGetAdminRealmsRealmUsersUserIdUnmanagedAttributesRequest(server string, realm string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s/unmanagedAttributes", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAdminRealmsRealmUsersWithResponse request
	GetAdminRealmsRealmUsersWithResponse(ctx context.Context, realm string, params *GetAdminRealmsRealmUsersParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersResponse, error)

	// PostAdminRealmsRealmUsersWithBodyWithResponse request with any body
	PostAdminRealmsRealmUsersWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmUsersResponse, error)

	PostAdminRealmsRealmUsersWithResponse(ctx context.Context, realm string, body PostAdminRealmsRealmUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmUsersResponse, error)

	// GetAdminRealmsRealmUsersCountWithResponse request
	GetAdminRealmsRealmUsersCountWithResponse(ctx context.Context, realm string, params *GetAdminRealmsRealmUsersCountParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersCountResponse, error)

	// GetAdminRealmsRealmUsersProfileWithResponse request
	GetAdminRealmsRealmUsersProfileWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersProfileResponse, error)

	// PutAdminRealmsRealmUsersProfileWithBodyWithResponse request with any body
	PutAdminRealmsRealmUsersProfileWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersProfileResponse, error)

	PutAdminRealmsRealmUsersProfileWithResponse(ctx context.Context, realm string, body PutAdminRealmsRealmUsersProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersProfileResponse, error)

	// GetAdminRealmsRealmUsersProfileMetadataWithResponse request
	GetAdminRealmsRealmUsersProfileMetadataWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersProfileMetadataResponse, error)

	// DeleteAdminRealmsRealmUsersUserIdWithResponse request
	DeleteAdminRealmsRealmUsersUserIdWithResponse(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmUsersUserIdResponse, error)

	// GetAdminRealmsRealmUsersUserIdWithResponse request
	GetAdminRealmsRealmUsersUserIdWithResponse(ctx context.Context, realm string, userId string, params *GetAdminRealmsRealmUsersUserIdParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersUserIdResponse, error)

	// PutAdminRealmsRealmUsersUserIdWithBodyWithResponse request with any body
	PutAdminRealmsRealmUsersUserIdWithBodyWithResponse(ctx context.Context, realm string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersUserIdResponse, error)

	PutAdminRealmsRealmUsersUserIdWithResponse(ctx context.Context, realm string, userId string, body PutAdminRealmsRealmUsersUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersUserIdResponse, error)

	// GetAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesWithResponse request
	GetAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesWithResponse(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesResponse, error)

	// GetAdminRealmsRealmUsersUserIdConsentsWithResponse request
	GetAdminRealmsRealmUsersUserIdConsentsWithResponse(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersUserIdConsentsResponse, error)

	// DeleteAdminRealmsRealmUsersUserIdConsentsClientWithResponse request
	DeleteAdminRealmsRealmUsersUserIdConsentsClientWithResponse(ctx context.Context, realm string, userId string, client string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmUsersUserIdConsentsClientResponse, error)

	// GetAdminRealmsRealmUsersUserIdCredentialsWithResponse request
	GetAdminRealmsRealmUsersUserIdCredentialsWithResponse(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersUserIdCredentialsResponse, error)

	// DeleteAdminRealmsRealmUsersUserIdCredentialsCredentialIdWithResponse request
	DeleteAdminRealmsRealmUsersUserIdCredentialsCredentialIdWithResponse(ctx context.Context, realm string, userId string, credentialId string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmUsersUserIdCredentialsCredentialIdResponse, error)

	// PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdWithResponse request
	PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdWithResponse(ctx context.Context, realm string, userId string, credentialId string, newPreviousCredentialId string, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdResponse, error)

	// PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstWithResponse request
	PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstWithResponse(ctx context.Context, realm string, userId string, credentialId string, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstResponse, error)

	// PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelWithBodyWithResponse request with any body
	PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelWithBodyWithResponse(ctx context.Context, realm string, userId string, credentialId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelResponse, error)

	PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelWithTextBodyWithResponse(ctx context.Context, realm string, userId string, credentialId string, body PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelTextRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelResponse, error)

	// PutAdminRealmsRealmUsersUserIdDisableCredentialTypesWithBodyWithResponse request with any body
	PutAdminRealmsRealmUsersUserIdDisableCredentialTypesWithBodyWithResponse(ctx context.Context, realm string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersUserIdDisableCredentialTypesResponse, error)

	PutAdminRealmsRealmUsersUserIdDisableCredentialTypesWithResponse(ctx context.Context, realm string, userId string, body PutAdminRealmsRealmUsersUserIdDisableCredentialTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersUserIdDisableCredentialTypesResponse, error)

	// PutAdminRealmsRealmUsersUserIdExecuteActionsEmailWithBodyWithResponse request with any body
	PutAdminRealmsRealmUsersUserIdExecuteActionsEmailWithBodyWithResponse(ctx context.Context, realm string, userId string, params *PutAdminRealmsRealmUsersUserIdExecuteActionsEmailParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersUserIdExecuteActionsEmailResponse, error)

	PutAdminRealmsRealmUsersUserIdExecuteActionsEmailWithResponse(ctx context.Context, realm string, userId string, params *PutAdminRealmsRealmUsersUserIdExecuteActionsEmailParams, body PutAdminRealmsRealmUsersUserIdExecuteActionsEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersUserIdExecuteActionsEmailResponse, error)

	// GetAdminRealmsRealmUsersUserIdFederatedIdentityWithResponse request
	GetAdminRealmsRealmUsersUserIdFederatedIdentityWithResponse(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersUserIdFederatedIdentityResponse, error)

	// DeleteAdminRealmsRealmUsersUserIdFederatedIdentityProviderWithResponse request
	DeleteAdminRealmsRealmUsersUserIdFederatedIdentityProviderWithResponse(ctx context.Context, realm string, userId string, provider string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmUsersUserIdFederatedIdentityProviderResponse, error)

	// PostAdminRealmsRealmUsersUserIdFederatedIdentityProviderWithResponse request
	PostAdminRealmsRealmUsersUserIdFederatedIdentityProviderWithResponse(ctx context.Context, realm string, userId string, provider string, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmUsersUserIdFederatedIdentityProviderResponse, error)

	// GetAdminRealmsRealmUsersUserIdGroupsWithResponse request
	GetAdminRealmsRealmUsersUserIdGroupsWithResponse(ctx context.Context, realm string, userId string, params *GetAdminRealmsRealmUsersUserIdGroupsParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersUserIdGroupsResponse, error)

	// GetAdminRealmsRealmUsersUserIdGroupsCountWithResponse request
	GetAdminRealmsRealmUsersUserIdGroupsCountWithResponse(ctx context.Context, realm string, userId string, params *GetAdminRealmsRealmUsersUserIdGroupsCountParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersUserIdGroupsCountResponse, error)

	// DeleteAdminRealmsRealmUsersUserIdGroupsGroupIdWithResponse request
	DeleteAdminRealmsRealmUsersUserIdGroupsGroupIdWithResponse(ctx context.Context, realm string, userId string, groupId string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmUsersUserIdGroupsGroupIdResponse, error)

	// PutAdminRealmsRealmUsersUserIdGroupsGroupIdWithResponse request
	PutAdminRealmsRealmUsersUserIdGroupsGroupIdWithResponse(ctx context.Context, realm string, userId string, groupId string, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersUserIdGroupsGroupIdResponse, error)

	// PostAdminRealmsRealmUsersUserIdImpersonationWithResponse request
	PostAdminRealmsRealmUsersUserIdImpersonationWithResponse(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmUsersUserIdImpersonationResponse, error)

	// PostAdminRealmsRealmUsersUserIdLogoutWithResponse request
	PostAdminRealmsRealmUsersUserIdLogoutWithResponse(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmUsersUserIdLogoutResponse, error)

	// GetAdminRealmsRealmUsersUserIdOfflineSessionsClientUuidWithResponse request
	GetAdminRealmsRealmUsersUserIdOfflineSessionsClientUuidWithResponse(ctx context.Context, realm string, userId string, clientUuid string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersUserIdOfflineSessionsClientUuidResponse, error)

	// PutAdminRealmsRealmUsersUserIdResetPasswordWithBodyWithResponse request with any body
	PutAdminRealmsRealmUsersUserIdResetPasswordWithBodyWithResponse(ctx context.Context, realm string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersUserIdResetPasswordResponse, error)

	PutAdminRealmsRealmUsersUserIdResetPasswordWithResponse(ctx context.Context, realm string, userId string, body PutAdminRealmsRealmUsersUserIdResetPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersUserIdResetPasswordResponse, error)

	// PutAdminRealmsRealmUsersUserIdResetPasswordEmailWithResponse request
	PutAdminRealmsRealmUsersUserIdResetPasswordEmailWithResponse(ctx context.Context, realm string, userId string, params *PutAdminRealmsRealmUsersUserIdResetPasswordEmailParams, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersUserIdResetPasswordEmailResponse, error)

	// PutAdminRealmsRealmUsersUserIdSendVerifyEmailWithResponse request
	PutAdminRealmsRealmUsersUserIdSendVerifyEmailWithResponse(ctx context.Context, realm string, userId string, params *PutAdminRealmsRealmUsersUserIdSendVerifyEmailParams, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersUserIdSendVerifyEmailResponse, error)

	// GetAdminRealmsRealmUsersUserIdSessionsWithResponse request
	GetAdminRealmsRealmUsersUserIdSessionsWithResponse(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersUserIdSessionsResponse, error)

	// GetAdminRealmsRealmUsersUserIdUnmanagedAttributesWithResponse request
	GetAdminRealmsRealmUsersUserIdUnmanagedAttributesWithResponse(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersUserIdUnmanagedAttributesResponse, error)
}

type GetAdminRealmsRealmUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UserRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmUsersCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *int32
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmUsersCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmUsersCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmUsersProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UPConfig
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmUsersProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmUsersProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminRealmsRealmUsersProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UPConfig
}

// Status returns HTTPResponse.Status
func (r PutAdminRealmsRealmUsersProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminRealmsRealmUsersProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmUsersProfileMetadataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserProfileMetadata
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmUsersProfileMetadataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmUsersProfileMetadataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminRealmsRealmUsersUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminRealmsRealmUsersUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminRealmsRealmUsersUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmUsersUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmUsersUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmUsersUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminRealmsRealmUsersUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAdminRealmsRealmUsersUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminRealmsRealmUsersUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmUsersUserIdConsentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmUsersUserIdConsentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmUsersUserIdConsentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminRealmsRealmUsersUserIdConsentsClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminRealmsRealmUsersUserIdConsentsClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminRealmsRealmUsersUserIdConsentsClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmUsersUserIdCredentialsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CredentialRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmUsersUserIdCredentialsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmUsersUserIdCredentialsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminRealmsRealmUsersUserIdCredentialsCredentialIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminRealmsRealmUsersUserIdCredentialsCredentialIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminRealmsRealmUsersUserIdCredentialsCredentialIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminRealmsRealmUsersUserIdDisableCredentialTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAdminRealmsRealmUsersUserIdDisableCredentialTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminRealmsRealmUsersUserIdDisableCredentialTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminRealmsRealmUsersUserIdExecuteActionsEmailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAdminRealmsRealmUsersUserIdExecuteActionsEmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminRealmsRealmUsersUserIdExecuteActionsEmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmUsersUserIdFederatedIdentityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]FederatedIdentityRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmUsersUserIdFederatedIdentityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmUsersUserIdFederatedIdentityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminRealmsRealmUsersUserIdFederatedIdentityProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminRealmsRealmUsersUserIdFederatedIdentityProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminRealmsRealmUsersUserIdFederatedIdentityProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmUsersUserIdFederatedIdentityProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmUsersUserIdFederatedIdentityProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmUsersUserIdFederatedIdentityProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmUsersUserIdGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]GroupRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmUsersUserIdGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmUsersUserIdGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmUsersUserIdGroupsCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]int64
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmUsersUserIdGroupsCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmUsersUserIdGroupsCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminRealmsRealmUsersUserIdGroupsGroupIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminRealmsRealmUsersUserIdGroupsGroupIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminRealmsRealmUsersUserIdGroupsGroupIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminRealmsRealmUsersUserIdGroupsGroupIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAdminRealmsRealmUsersUserIdGroupsGroupIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminRealmsRealmUsersUserIdGroupsGroupIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmUsersUserIdImpersonationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmUsersUserIdImpersonationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmUsersUserIdImpersonationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmUsersUserIdLogoutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmUsersUserIdLogoutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmUsersUserIdLogoutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmUsersUserIdOfflineSessionsClientUuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UserSessionRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmUsersUserIdOfflineSessionsClientUuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmUsersUserIdOfflineSessionsClientUuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminRealmsRealmUsersUserIdResetPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAdminRealmsRealmUsersUserIdResetPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminRealmsRealmUsersUserIdResetPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminRealmsRealmUsersUserIdResetPasswordEmailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAdminRealmsRealmUsersUserIdResetPasswordEmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminRealmsRealmUsersUserIdResetPasswordEmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminRealmsRealmUsersUserIdSendVerifyEmailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAdminRealmsRealmUsersUserIdSendVerifyEmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminRealmsRealmUsersUserIdSendVerifyEmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmUsersUserIdSessionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UserSessionRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmUsersUserIdSessionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmUsersUserIdSessionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmUsersUserIdUnmanagedAttributesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string][]string
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmUsersUserIdUnmanagedAttributesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmUsersUserIdUnmanagedAttributesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAdminRealmsRealmUsersWithResponse request returning *GetAdminRealmsRealmUsersResponse
func (c *ClientWithResponses) GetAdminRealmsRealmUsersWithResponse(ctx context.Context, realm string, params *GetAdminRealmsRealmUsersParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersResponse, error) {
	rsp, err := c.GetAdminRealmsRealmUsers(ctx, realm, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmUsersResponse(rsp)
}

// PostAdminRealmsRealmUsersWithBodyWithResponse request with arbitrary body returning *PostAdminRealmsRealmUsersResponse
func (c *ClientWithResponses) PostAdminRealmsRealmUsersWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmUsersResponse, error) {
	rsp, err := c.PostAdminRealmsRealmUsersWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmUsersResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsRealmUsersWithResponse(ctx context.Context, realm string, body PostAdminRealmsRealmUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmUsersResponse, error) {
	rsp, err := c.PostAdminRealmsRealmUsers(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmUsersResponse(rsp)
}

// GetAdminRealmsRealmUsersCountWithResponse request returning *GetAdminRealmsRealmUsersCountResponse
func (c *ClientWithResponses) GetAdminRealmsRealmUsersCountWithResponse(ctx context.Context, realm string, params *GetAdminRealmsRealmUsersCountParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersCountResponse, error) {
	rsp, err := c.GetAdminRealmsRealmUsersCount(ctx, realm, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmUsersCountResponse(rsp)
}

// GetAdminRealmsRealmUsersProfileWithResponse request returning *GetAdminRealmsRealmUsersProfileResponse
func (c *ClientWithResponses) GetAdminRealmsRealmUsersProfileWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersProfileResponse, error) {
	rsp, err := c.GetAdminRealmsRealmUsersProfile(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmUsersProfileResponse(rsp)
}

// PutAdminRealmsRealmUsersProfileWithBodyWithResponse request with arbitrary body returning *PutAdminRealmsRealmUsersProfileResponse
func (c *ClientWithResponses) PutAdminRealmsRealmUsersProfileWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersProfileResponse, error) {
	rsp, err := c.PutAdminRealmsRealmUsersProfileWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmUsersProfileResponse(rsp)
}

func (c *ClientWithResponses) PutAdminRealmsRealmUsersProfileWithResponse(ctx context.Context, realm string, body PutAdminRealmsRealmUsersProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersProfileResponse, error) {
	rsp, err := c.PutAdminRealmsRealmUsersProfile(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmUsersProfileResponse(rsp)
}

// GetAdminRealmsRealmUsersProfileMetadataWithResponse request returning *GetAdminRealmsRealmUsersProfileMetadataResponse
func (c *ClientWithResponses) GetAdminRealmsRealmUsersProfileMetadataWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersProfileMetadataResponse, error) {
	rsp, err := c.GetAdminRealmsRealmUsersProfileMetadata(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmUsersProfileMetadataResponse(rsp)
}

// DeleteAdminRealmsRealmUsersUserIdWithResponse request returning *DeleteAdminRealmsRealmUsersUserIdResponse
func (c *ClientWithResponses) DeleteAdminRealmsRealmUsersUserIdWithResponse(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmUsersUserIdResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmUsersUserId(ctx, realm, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmUsersUserIdResponse(rsp)
}

// GetAdminRealmsRealmUsersUserIdWithResponse request returning *GetAdminRealmsRealmUsersUserIdResponse
func (c *ClientWithResponses) GetAdminRealmsRealmUsersUserIdWithResponse(ctx context.Context, realm string, userId string, params *GetAdminRealmsRealmUsersUserIdParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersUserIdResponse, error) {
	rsp, err := c.GetAdminRealmsRealmUsersUserId(ctx, realm, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmUsersUserIdResponse(rsp)
}

// PutAdminRealmsRealmUsersUserIdWithBodyWithResponse request with arbitrary body returning *PutAdminRealmsRealmUsersUserIdResponse
func (c *ClientWithResponses) PutAdminRealmsRealmUsersUserIdWithBodyWithResponse(ctx context.Context, realm string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersUserIdResponse, error) {
	rsp, err := c.PutAdminRealmsRealmUsersUserIdWithBody(ctx, realm, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmUsersUserIdResponse(rsp)
}

func (c *ClientWithResponses) PutAdminRealmsRealmUsersUserIdWithResponse(ctx context.Context, realm string, userId string, body PutAdminRealmsRealmUsersUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersUserIdResponse, error) {
	rsp, err := c.PutAdminRealmsRealmUsersUserId(ctx, realm, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmUsersUserIdResponse(rsp)
}

// GetAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesWithResponse request returning *GetAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesResponse
func (c *ClientWithResponses) GetAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesWithResponse(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesResponse, error) {
	rsp, err := c.GetAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypes(ctx, realm, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesResponse(rsp)
}

// GetAdminRealmsRealmUsersUserIdConsentsWithResponse request returning *GetAdminRealmsRealmUsersUserIdConsentsResponse
func (c *ClientWithResponses) GetAdminRealmsRealmUsersUserIdConsentsWithResponse(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersUserIdConsentsResponse, error) {
	rsp, err := c.GetAdminRealmsRealmUsersUserIdConsents(ctx, realm, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmUsersUserIdConsentsResponse(rsp)
}

// DeleteAdminRealmsRealmUsersUserIdConsentsClientWithResponse request returning *DeleteAdminRealmsRealmUsersUserIdConsentsClientResponse
func (c *ClientWithResponses) DeleteAdminRealmsRealmUsersUserIdConsentsClientWithResponse(ctx context.Context, realm string, userId string, client string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmUsersUserIdConsentsClientResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmUsersUserIdConsentsClient(ctx, realm, userId, client, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmUsersUserIdConsentsClientResponse(rsp)
}

// GetAdminRealmsRealmUsersUserIdCredentialsWithResponse request returning *GetAdminRealmsRealmUsersUserIdCredentialsResponse
func (c *ClientWithResponses) GetAdminRealmsRealmUsersUserIdCredentialsWithResponse(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersUserIdCredentialsResponse, error) {
	rsp, err := c.GetAdminRealmsRealmUsersUserIdCredentials(ctx, realm, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmUsersUserIdCredentialsResponse(rsp)
}

// DeleteAdminRealmsRealmUsersUserIdCredentialsCredentialIdWithResponse request returning *DeleteAdminRealmsRealmUsersUserIdCredentialsCredentialIdResponse
func (c *ClientWithResponses) DeleteAdminRealmsRealmUsersUserIdCredentialsCredentialIdWithResponse(ctx context.Context, realm string, userId string, credentialId string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmUsersUserIdCredentialsCredentialIdResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmUsersUserIdCredentialsCredentialId(ctx, realm, userId, credentialId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmUsersUserIdCredentialsCredentialIdResponse(rsp)
}

// PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdWithResponse request returning *PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdResponse
func (c *ClientWithResponses) PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdWithResponse(ctx context.Context, realm string, userId string, credentialId string, newPreviousCredentialId string, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdResponse, error) {
	rsp, err := c.PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialId(ctx, realm, userId, credentialId, newPreviousCredentialId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdResponse(rsp)
}

// PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstWithResponse request returning *PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstResponse
func (c *ClientWithResponses) PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstWithResponse(ctx context.Context, realm string, userId string, credentialId string, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstResponse, error) {
	rsp, err := c.PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirst(ctx, realm, userId, credentialId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstResponse(rsp)
}

// PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelWithBodyWithResponse request with arbitrary body returning *PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelResponse
func (c *ClientWithResponses) PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelWithBodyWithResponse(ctx context.Context, realm string, userId string, credentialId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelResponse, error) {
	rsp, err := c.PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelWithBody(ctx, realm, userId, credentialId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelResponse(rsp)
}

func (c *ClientWithResponses) PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelWithTextBodyWithResponse(ctx context.Context, realm string, userId string, credentialId string, body PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelTextRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelResponse, error) {
	rsp, err := c.PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelWithTextBody(ctx, realm, userId, credentialId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelResponse(rsp)
}

// PutAdminRealmsRealmUsersUserIdDisableCredentialTypesWithBodyWithResponse request with arbitrary body returning *PutAdminRealmsRealmUsersUserIdDisableCredentialTypesResponse
func (c *ClientWithResponses) PutAdminRealmsRealmUsersUserIdDisableCredentialTypesWithBodyWithResponse(ctx context.Context, realm string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersUserIdDisableCredentialTypesResponse, error) {
	rsp, err := c.PutAdminRealmsRealmUsersUserIdDisableCredentialTypesWithBody(ctx, realm, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmUsersUserIdDisableCredentialTypesResponse(rsp)
}

func (c *ClientWithResponses) PutAdminRealmsRealmUsersUserIdDisableCredentialTypesWithResponse(ctx context.Context, realm string, userId string, body PutAdminRealmsRealmUsersUserIdDisableCredentialTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersUserIdDisableCredentialTypesResponse, error) {
	rsp, err := c.PutAdminRealmsRealmUsersUserIdDisableCredentialTypes(ctx, realm, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmUsersUserIdDisableCredentialTypesResponse(rsp)
}

// PutAdminRealmsRealmUsersUserIdExecuteActionsEmailWithBodyWithResponse request with arbitrary body returning *PutAdminRealmsRealmUsersUserIdExecuteActionsEmailResponse
func (c *ClientWithResponses) PutAdminRealmsRealmUsersUserIdExecuteActionsEmailWithBodyWithResponse(ctx context.Context, realm string, userId string, params *PutAdminRealmsRealmUsersUserIdExecuteActionsEmailParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersUserIdExecuteActionsEmailResponse, error) {
	rsp, err := c.PutAdminRealmsRealmUsersUserIdExecuteActionsEmailWithBody(ctx, realm, userId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmUsersUserIdExecuteActionsEmailResponse(rsp)
}

func (c *ClientWithResponses) PutAdminRealmsRealmUsersUserIdExecuteActionsEmailWithResponse(ctx context.Context, realm string, userId string, params *PutAdminRealmsRealmUsersUserIdExecuteActionsEmailParams, body PutAdminRealmsRealmUsersUserIdExecuteActionsEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersUserIdExecuteActionsEmailResponse, error) {
	rsp, err := c.PutAdminRealmsRealmUsersUserIdExecuteActionsEmail(ctx, realm, userId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmUsersUserIdExecuteActionsEmailResponse(rsp)
}

// GetAdminRealmsRealmUsersUserIdFederatedIdentityWithResponse request returning *GetAdminRealmsRealmUsersUserIdFederatedIdentityResponse
func (c *ClientWithResponses) GetAdminRealmsRealmUsersUserIdFederatedIdentityWithResponse(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersUserIdFederatedIdentityResponse, error) {
	rsp, err := c.GetAdminRealmsRealmUsersUserIdFederatedIdentity(ctx, realm, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmUsersUserIdFederatedIdentityResponse(rsp)
}

// DeleteAdminRealmsRealmUsersUserIdFederatedIdentityProviderWithResponse request returning *DeleteAdminRealmsRealmUsersUserIdFederatedIdentityProviderResponse
func (c *ClientWithResponses) DeleteAdminRealmsRealmUsersUserIdFederatedIdentityProviderWithResponse(ctx context.Context, realm string, userId string, provider string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmUsersUserIdFederatedIdentityProviderResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmUsersUserIdFederatedIdentityProvider(ctx, realm, userId, provider, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmUsersUserIdFederatedIdentityProviderResponse(rsp)
}

// PostAdminRealmsRealmUsersUserIdFederatedIdentityProviderWithResponse request returning *PostAdminRealmsRealmUsersUserIdFederatedIdentityProviderResponse
func (c *ClientWithResponses) PostAdminRealmsRealmUsersUserIdFederatedIdentityProviderWithResponse(ctx context.Context, realm string, userId string, provider string, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmUsersUserIdFederatedIdentityProviderResponse, error) {
	rsp, err := c.PostAdminRealmsRealmUsersUserIdFederatedIdentityProvider(ctx, realm, userId, provider, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmUsersUserIdFederatedIdentityProviderResponse(rsp)
}

// GetAdminRealmsRealmUsersUserIdGroupsWithResponse request returning *GetAdminRealmsRealmUsersUserIdGroupsResponse
func (c *ClientWithResponses) GetAdminRealmsRealmUsersUserIdGroupsWithResponse(ctx context.Context, realm string, userId string, params *GetAdminRealmsRealmUsersUserIdGroupsParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersUserIdGroupsResponse, error) {
	rsp, err := c.GetAdminRealmsRealmUsersUserIdGroups(ctx, realm, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmUsersUserIdGroupsResponse(rsp)
}

// GetAdminRealmsRealmUsersUserIdGroupsCountWithResponse request returning *GetAdminRealmsRealmUsersUserIdGroupsCountResponse
func (c *ClientWithResponses) GetAdminRealmsRealmUsersUserIdGroupsCountWithResponse(ctx context.Context, realm string, userId string, params *GetAdminRealmsRealmUsersUserIdGroupsCountParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersUserIdGroupsCountResponse, error) {
	rsp, err := c.GetAdminRealmsRealmUsersUserIdGroupsCount(ctx, realm, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmUsersUserIdGroupsCountResponse(rsp)
}

// DeleteAdminRealmsRealmUsersUserIdGroupsGroupIdWithResponse request returning *DeleteAdminRealmsRealmUsersUserIdGroupsGroupIdResponse
func (c *ClientWithResponses) DeleteAdminRealmsRealmUsersUserIdGroupsGroupIdWithResponse(ctx context.Context, realm string, userId string, groupId string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmUsersUserIdGroupsGroupIdResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmUsersUserIdGroupsGroupId(ctx, realm, userId, groupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmUsersUserIdGroupsGroupIdResponse(rsp)
}

// PutAdminRealmsRealmUsersUserIdGroupsGroupIdWithResponse request returning *PutAdminRealmsRealmUsersUserIdGroupsGroupIdResponse
func (c *ClientWithResponses) PutAdminRealmsRealmUsersUserIdGroupsGroupIdWithResponse(ctx context.Context, realm string, userId string, groupId string, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersUserIdGroupsGroupIdResponse, error) {
	rsp, err := c.PutAdminRealmsRealmUsersUserIdGroupsGroupId(ctx, realm, userId, groupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmUsersUserIdGroupsGroupIdResponse(rsp)
}

// PostAdminRealmsRealmUsersUserIdImpersonationWithResponse request returning *PostAdminRealmsRealmUsersUserIdImpersonationResponse
func (c *ClientWithResponses) PostAdminRealmsRealmUsersUserIdImpersonationWithResponse(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmUsersUserIdImpersonationResponse, error) {
	rsp, err := c.PostAdminRealmsRealmUsersUserIdImpersonation(ctx, realm, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmUsersUserIdImpersonationResponse(rsp)
}

// PostAdminRealmsRealmUsersUserIdLogoutWithResponse request returning *PostAdminRealmsRealmUsersUserIdLogoutResponse
func (c *ClientWithResponses) PostAdminRealmsRealmUsersUserIdLogoutWithResponse(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmUsersUserIdLogoutResponse, error) {
	rsp, err := c.PostAdminRealmsRealmUsersUserIdLogout(ctx, realm, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmUsersUserIdLogoutResponse(rsp)
}

// GetAdminRealmsRealmUsersUserIdOfflineSessionsClientUuidWithResponse request returning *GetAdminRealmsRealmUsersUserIdOfflineSessionsClientUuidResponse
func (c *ClientWithResponses) GetAdminRealmsRealmUsersUserIdOfflineSessionsClientUuidWithResponse(ctx context.Context, realm string, userId string, clientUuid string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersUserIdOfflineSessionsClientUuidResponse, error) {
	rsp, err := c.GetAdminRealmsRealmUsersUserIdOfflineSessionsClientUuid(ctx, realm, userId, clientUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmUsersUserIdOfflineSessionsClientUuidResponse(rsp)
}

// PutAdminRealmsRealmUsersUserIdResetPasswordWithBodyWithResponse request with arbitrary body returning *PutAdminRealmsRealmUsersUserIdResetPasswordResponse
func (c *ClientWithResponses) PutAdminRealmsRealmUsersUserIdResetPasswordWithBodyWithResponse(ctx context.Context, realm string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersUserIdResetPasswordResponse, error) {
	rsp, err := c.PutAdminRealmsRealmUsersUserIdResetPasswordWithBody(ctx, realm, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmUsersUserIdResetPasswordResponse(rsp)
}

func (c *ClientWithResponses) PutAdminRealmsRealmUsersUserIdResetPasswordWithResponse(ctx context.Context, realm string, userId string, body PutAdminRealmsRealmUsersUserIdResetPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersUserIdResetPasswordResponse, error) {
	rsp, err := c.PutAdminRealmsRealmUsersUserIdResetPassword(ctx, realm, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmUsersUserIdResetPasswordResponse(rsp)
}

// PutAdminRealmsRealmUsersUserIdResetPasswordEmailWithResponse request returning *PutAdminRealmsRealmUsersUserIdResetPasswordEmailResponse
func (c *ClientWithResponses) PutAdminRealmsRealmUsersUserIdResetPasswordEmailWithResponse(ctx context.Context, realm string, userId string, params *PutAdminRealmsRealmUsersUserIdResetPasswordEmailParams, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersUserIdResetPasswordEmailResponse, error) {
	rsp, err := c.PutAdminRealmsRealmUsersUserIdResetPasswordEmail(ctx, realm, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmUsersUserIdResetPasswordEmailResponse(rsp)
}

// PutAdminRealmsRealmUsersUserIdSendVerifyEmailWithResponse request returning *PutAdminRealmsRealmUsersUserIdSendVerifyEmailResponse
func (c *ClientWithResponses) PutAdminRealmsRealmUsersUserIdSendVerifyEmailWithResponse(ctx context.Context, realm string, userId string, params *PutAdminRealmsRealmUsersUserIdSendVerifyEmailParams, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersUserIdSendVerifyEmailResponse, error) {
	rsp, err := c.PutAdminRealmsRealmUsersUserIdSendVerifyEmail(ctx, realm, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmUsersUserIdSendVerifyEmailResponse(rsp)
}

// GetAdminRealmsRealmUsersUserIdSessionsWithResponse request returning *GetAdminRealmsRealmUsersUserIdSessionsResponse
func (c *ClientWithResponses) GetAdminRealmsRealmUsersUserIdSessionsWithResponse(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersUserIdSessionsResponse, error) {
	rsp, err := c.GetAdminRealmsRealmUsersUserIdSessions(ctx, realm, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmUsersUserIdSessionsResponse(rsp)
}

// GetAdminRealmsRealmUsersUserIdUnmanagedAttributesWithResponse request returning *GetAdminRealmsRealmUsersUserIdUnmanagedAttributesResponse
func (c *ClientWithResponses) GetAdminRealmsRealmUsersUserIdUnmanagedAttributesWithResponse(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersUserIdUnmanagedAttributesResponse, error) {
	rsp, err := c.GetAdminRealmsRealmUsersUserIdUnmanagedAttributes(ctx, realm, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmUsersUserIdUnmanagedAttributesResponse(rsp)
}

// ParseGetAdminRealmsRealmUsersResponse parses an HTTP response from a GetAdminRealmsRealmUsersWithResponse call
func ParseGetAdminRealmsRealmUsersResponse(rsp *http.Response) (*GetAdminRealmsRealmUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UserRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAdminRealmsRealmUsersResponse parses an HTTP response from a PostAdminRealmsRealmUsersWithResponse call
func ParsePostAdminRealmsRealmUsersResponse(rsp *http.Response) (*PostAdminRealmsRealmUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmUsersCountResponse parses an HTTP response from a GetAdminRealmsRealmUsersCountWithResponse call
func ParseGetAdminRealmsRealmUsersCountResponse(rsp *http.Response) (*GetAdminRealmsRealmUsersCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmUsersCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest int32
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmUsersProfileResponse parses an HTTP response from a GetAdminRealmsRealmUsersProfileWithResponse call
func ParseGetAdminRealmsRealmUsersProfileResponse(rsp *http.Response) (*GetAdminRealmsRealmUsersProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmUsersProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UPConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAdminRealmsRealmUsersProfileResponse parses an HTTP response from a PutAdminRealmsRealmUsersProfileWithResponse call
func ParsePutAdminRealmsRealmUsersProfileResponse(rsp *http.Response) (*PutAdminRealmsRealmUsersProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminRealmsRealmUsersProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UPConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmUsersProfileMetadataResponse parses an HTTP response from a GetAdminRealmsRealmUsersProfileMetadataWithResponse call
func ParseGetAdminRealmsRealmUsersProfileMetadataResponse(rsp *http.Response) (*GetAdminRealmsRealmUsersProfileMetadataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmUsersProfileMetadataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserProfileMetadata
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAdminRealmsRealmUsersUserIdResponse parses an HTTP response from a DeleteAdminRealmsRealmUsersUserIdWithResponse call
func ParseDeleteAdminRealmsRealmUsersUserIdResponse(rsp *http.Response) (*DeleteAdminRealmsRealmUsersUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminRealmsRealmUsersUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmUsersUserIdResponse parses an HTTP response from a GetAdminRealmsRealmUsersUserIdWithResponse call
func ParseGetAdminRealmsRealmUsersUserIdResponse(rsp *http.Response) (*GetAdminRealmsRealmUsersUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmUsersUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAdminRealmsRealmUsersUserIdResponse parses an HTTP response from a PutAdminRealmsRealmUsersUserIdWithResponse call
func ParsePutAdminRealmsRealmUsersUserIdResponse(rsp *http.Response) (*PutAdminRealmsRealmUsersUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminRealmsRealmUsersUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesResponse parses an HTTP response from a GetAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesWithResponse call
func ParseGetAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesResponse(rsp *http.Response) (*GetAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmUsersUserIdConsentsResponse parses an HTTP response from a GetAdminRealmsRealmUsersUserIdConsentsWithResponse call
func ParseGetAdminRealmsRealmUsersUserIdConsentsResponse(rsp *http.Response) (*GetAdminRealmsRealmUsersUserIdConsentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmUsersUserIdConsentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAdminRealmsRealmUsersUserIdConsentsClientResponse parses an HTTP response from a DeleteAdminRealmsRealmUsersUserIdConsentsClientWithResponse call
func ParseDeleteAdminRealmsRealmUsersUserIdConsentsClientResponse(rsp *http.Response) (*DeleteAdminRealmsRealmUsersUserIdConsentsClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminRealmsRealmUsersUserIdConsentsClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmUsersUserIdCredentialsResponse parses an HTTP response from a GetAdminRealmsRealmUsersUserIdCredentialsWithResponse call
func ParseGetAdminRealmsRealmUsersUserIdCredentialsResponse(rsp *http.Response) (*GetAdminRealmsRealmUsersUserIdCredentialsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmUsersUserIdCredentialsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CredentialRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAdminRealmsRealmUsersUserIdCredentialsCredentialIdResponse parses an HTTP response from a DeleteAdminRealmsRealmUsersUserIdCredentialsCredentialIdWithResponse call
func ParseDeleteAdminRealmsRealmUsersUserIdCredentialsCredentialIdResponse(rsp *http.Response) (*DeleteAdminRealmsRealmUsersUserIdCredentialsCredentialIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminRealmsRealmUsersUserIdCredentialsCredentialIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdResponse parses an HTTP response from a PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdWithResponse call
func ParsePostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdResponse(rsp *http.Response) (*PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstResponse parses an HTTP response from a PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstWithResponse call
func ParsePostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstResponse(rsp *http.Response) (*PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelResponse parses an HTTP response from a PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelWithResponse call
func ParsePutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelResponse(rsp *http.Response) (*PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutAdminRealmsRealmUsersUserIdDisableCredentialTypesResponse parses an HTTP response from a PutAdminRealmsRealmUsersUserIdDisableCredentialTypesWithResponse call
func ParsePutAdminRealmsRealmUsersUserIdDisableCredentialTypesResponse(rsp *http.Response) (*PutAdminRealmsRealmUsersUserIdDisableCredentialTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminRealmsRealmUsersUserIdDisableCredentialTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutAdminRealmsRealmUsersUserIdExecuteActionsEmailResponse parses an HTTP response from a PutAdminRealmsRealmUsersUserIdExecuteActionsEmailWithResponse call
func ParsePutAdminRealmsRealmUsersUserIdExecuteActionsEmailResponse(rsp *http.Response) (*PutAdminRealmsRealmUsersUserIdExecuteActionsEmailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminRealmsRealmUsersUserIdExecuteActionsEmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmUsersUserIdFederatedIdentityResponse parses an HTTP response from a GetAdminRealmsRealmUsersUserIdFederatedIdentityWithResponse call
func ParseGetAdminRealmsRealmUsersUserIdFederatedIdentityResponse(rsp *http.Response) (*GetAdminRealmsRealmUsersUserIdFederatedIdentityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmUsersUserIdFederatedIdentityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []FederatedIdentityRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAdminRealmsRealmUsersUserIdFederatedIdentityProviderResponse parses an HTTP response from a DeleteAdminRealmsRealmUsersUserIdFederatedIdentityProviderWithResponse call
func ParseDeleteAdminRealmsRealmUsersUserIdFederatedIdentityProviderResponse(rsp *http.Response) (*DeleteAdminRealmsRealmUsersUserIdFederatedIdentityProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminRealmsRealmUsersUserIdFederatedIdentityProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostAdminRealmsRealmUsersUserIdFederatedIdentityProviderResponse parses an HTTP response from a PostAdminRealmsRealmUsersUserIdFederatedIdentityProviderWithResponse call
func ParsePostAdminRealmsRealmUsersUserIdFederatedIdentityProviderResponse(rsp *http.Response) (*PostAdminRealmsRealmUsersUserIdFederatedIdentityProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmUsersUserIdFederatedIdentityProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmUsersUserIdGroupsResponse parses an HTTP response from a GetAdminRealmsRealmUsersUserIdGroupsWithResponse call
func ParseGetAdminRealmsRealmUsersUserIdGroupsResponse(rsp *http.Response) (*GetAdminRealmsRealmUsersUserIdGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmUsersUserIdGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []GroupRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmUsersUserIdGroupsCountResponse parses an HTTP response from a GetAdminRealmsRealmUsersUserIdGroupsCountWithResponse call
func ParseGetAdminRealmsRealmUsersUserIdGroupsCountResponse(rsp *http.Response) (*GetAdminRealmsRealmUsersUserIdGroupsCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmUsersUserIdGroupsCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]int64
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAdminRealmsRealmUsersUserIdGroupsGroupIdResponse parses an HTTP response from a DeleteAdminRealmsRealmUsersUserIdGroupsGroupIdWithResponse call
func ParseDeleteAdminRealmsRealmUsersUserIdGroupsGroupIdResponse(rsp *http.Response) (*DeleteAdminRealmsRealmUsersUserIdGroupsGroupIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminRealmsRealmUsersUserIdGroupsGroupIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutAdminRealmsRealmUsersUserIdGroupsGroupIdResponse parses an HTTP response from a PutAdminRealmsRealmUsersUserIdGroupsGroupIdWithResponse call
func ParsePutAdminRealmsRealmUsersUserIdGroupsGroupIdResponse(rsp *http.Response) (*PutAdminRealmsRealmUsersUserIdGroupsGroupIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminRealmsRealmUsersUserIdGroupsGroupIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostAdminRealmsRealmUsersUserIdImpersonationResponse parses an HTTP response from a PostAdminRealmsRealmUsersUserIdImpersonationWithResponse call
func ParsePostAdminRealmsRealmUsersUserIdImpersonationResponse(rsp *http.Response) (*PostAdminRealmsRealmUsersUserIdImpersonationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmUsersUserIdImpersonationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAdminRealmsRealmUsersUserIdLogoutResponse parses an HTTP response from a PostAdminRealmsRealmUsersUserIdLogoutWithResponse call
func ParsePostAdminRealmsRealmUsersUserIdLogoutResponse(rsp *http.Response) (*PostAdminRealmsRealmUsersUserIdLogoutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmUsersUserIdLogoutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmUsersUserIdOfflineSessionsClientUuidResponse parses an HTTP response from a GetAdminRealmsRealmUsersUserIdOfflineSessionsClientUuidWithResponse call
func ParseGetAdminRealmsRealmUsersUserIdOfflineSessionsClientUuidResponse(rsp *http.Response) (*GetAdminRealmsRealmUsersUserIdOfflineSessionsClientUuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmUsersUserIdOfflineSessionsClientUuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UserSessionRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAdminRealmsRealmUsersUserIdResetPasswordResponse parses an HTTP response from a PutAdminRealmsRealmUsersUserIdResetPasswordWithResponse call
func ParsePutAdminRealmsRealmUsersUserIdResetPasswordResponse(rsp *http.Response) (*PutAdminRealmsRealmUsersUserIdResetPasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminRealmsRealmUsersUserIdResetPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutAdminRealmsRealmUsersUserIdResetPasswordEmailResponse parses an HTTP response from a PutAdminRealmsRealmUsersUserIdResetPasswordEmailWithResponse call
func ParsePutAdminRealmsRealmUsersUserIdResetPasswordEmailResponse(rsp *http.Response) (*PutAdminRealmsRealmUsersUserIdResetPasswordEmailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminRealmsRealmUsersUserIdResetPasswordEmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutAdminRealmsRealmUsersUserIdSendVerifyEmailResponse parses an HTTP response from a PutAdminRealmsRealmUsersUserIdSendVerifyEmailWithResponse call
func ParsePutAdminRealmsRealmUsersUserIdSendVerifyEmailResponse(rsp *http.Response) (*PutAdminRealmsRealmUsersUserIdSendVerifyEmailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminRealmsRealmUsersUserIdSendVerifyEmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmUsersUserIdSessionsResponse parses an HTTP response from a GetAdminRealmsRealmUsersUserIdSessionsWithResponse call
func ParseGetAdminRealmsRealmUsersUserIdSessionsResponse(rsp *http.Response) (*GetAdminRealmsRealmUsersUserIdSessionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmUsersUserIdSessionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UserSessionRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmUsersUserIdUnmanagedAttributesResponse parses an HTTP response from a GetAdminRealmsRealmUsersUserIdUnmanagedAttributesWithResponse call
func ParseGetAdminRealmsRealmUsersUserIdUnmanagedAttributesResponse(rsp *http.Response) (*GetAdminRealmsRealmUsersUserIdUnmanagedAttributesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmUsersUserIdUnmanagedAttributesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string][]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
