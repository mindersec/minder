// Code generated by MockGen. DO NOT EDIT.
// Source: ./jwtauth.go
//
// Generated by this command:
//
//	mockgen -package mock_jwt -destination=./mock/jwtauth.go -source=./jwtauth.go
//

// Package mock_jwt is a generated GoMock package.
package mock_jwt

import (
	reflect "reflect"

	jwk "github.com/lestrrat-go/jwx/v2/jwk"
	openid "github.com/lestrrat-go/jwx/v2/jwt/openid"
	gomock "go.uber.org/mock/gomock"
)

// MockValidator is a mock of Validator interface.
type MockValidator struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorMockRecorder
	isgomock struct{}
}

// MockValidatorMockRecorder is the mock recorder for MockValidator.
type MockValidatorMockRecorder struct {
	mock *MockValidator
}

// NewMockValidator creates a new mock instance.
func NewMockValidator(ctrl *gomock.Controller) *MockValidator {
	mock := &MockValidator{ctrl: ctrl}
	mock.recorder = &MockValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValidator) EXPECT() *MockValidatorMockRecorder {
	return m.recorder
}

// ParseAndValidate mocks base method.
func (m *MockValidator) ParseAndValidate(tokenString string) (openid.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseAndValidate", tokenString)
	ret0, _ := ret[0].(openid.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseAndValidate indicates an expected call of ParseAndValidate.
func (mr *MockValidatorMockRecorder) ParseAndValidate(tokenString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseAndValidate", reflect.TypeOf((*MockValidator)(nil).ParseAndValidate), tokenString)
}

// MockKeySetFetcher is a mock of KeySetFetcher interface.
type MockKeySetFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockKeySetFetcherMockRecorder
	isgomock struct{}
}

// MockKeySetFetcherMockRecorder is the mock recorder for MockKeySetFetcher.
type MockKeySetFetcherMockRecorder struct {
	mock *MockKeySetFetcher
}

// NewMockKeySetFetcher creates a new mock instance.
func NewMockKeySetFetcher(ctrl *gomock.Controller) *MockKeySetFetcher {
	mock := &MockKeySetFetcher{ctrl: ctrl}
	mock.recorder = &MockKeySetFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeySetFetcher) EXPECT() *MockKeySetFetcherMockRecorder {
	return m.recorder
}

// GetKeySet mocks base method.
func (m *MockKeySetFetcher) GetKeySet() (jwk.Set, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeySet")
	ret0, _ := ret[0].(jwk.Set)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeySet indicates an expected call of GetKeySet.
func (mr *MockKeySetFetcherMockRecorder) GetKeySet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeySet", reflect.TypeOf((*MockKeySetFetcher)(nil).GetKeySet))
}
