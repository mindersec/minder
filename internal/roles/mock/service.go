// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go
//
// Generated by this command:
//
//	mockgen -package mock_roles -destination=./mock/service.go -source=./service.go
//

// Package mock_roles is a generated GoMock package.
package mock_roles

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	auth "github.com/stacklok/minder/internal/auth"
	authz "github.com/stacklok/minder/internal/authz"
	db "github.com/stacklok/minder/internal/db"
	v1 "github.com/stacklok/minder/pkg/api/protobuf/go/minder/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockRoleService is a mock of RoleService interface.
type MockRoleService struct {
	ctrl     *gomock.Controller
	recorder *MockRoleServiceMockRecorder
}

// MockRoleServiceMockRecorder is the mock recorder for MockRoleService.
type MockRoleServiceMockRecorder struct {
	mock *MockRoleService
}

// NewMockRoleService creates a new mock instance.
func NewMockRoleService(ctrl *gomock.Controller) *MockRoleService {
	mock := &MockRoleService{ctrl: ctrl}
	mock.recorder = &MockRoleServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleService) EXPECT() *MockRoleServiceMockRecorder {
	return m.recorder
}

// UpdateRoleAssignment mocks base method.
func (m *MockRoleService) UpdateRoleAssignment(ctx context.Context, qtx db.Querier, authzClient authz.Client, idClient auth.Resolver, targetProject uuid.UUID, subject string, authzRole authz.Role) (*v1.RoleAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoleAssignment", ctx, qtx, authzClient, idClient, targetProject, subject, authzRole)
	ret0, _ := ret[0].(*v1.RoleAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRoleAssignment indicates an expected call of UpdateRoleAssignment.
func (mr *MockRoleServiceMockRecorder) UpdateRoleAssignment(ctx, qtx, authzClient, idClient, targetProject, subject, authzRole any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoleAssignment", reflect.TypeOf((*MockRoleService)(nil).UpdateRoleAssignment), ctx, qtx, authzClient, idClient, targetProject, subject, authzRole)
}
