// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go
//
// Generated by this command:
//
//	mockgen -package mock_subscriptions -destination=./mock/service.go -source=./service.go
//

// Package mock_subscriptions is a generated GoMock package.
package mock_subscriptions

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	db "github.com/mindersec/minder/internal/db"
	reader "github.com/mindersec/minder/pkg/mindpak/reader"
	gomock "go.uber.org/mock/gomock"
)

// MockSubscriptionService is a mock of SubscriptionService interface.
type MockSubscriptionService struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionServiceMockRecorder
	isgomock struct{}
}

// MockSubscriptionServiceMockRecorder is the mock recorder for MockSubscriptionService.
type MockSubscriptionServiceMockRecorder struct {
	mock *MockSubscriptionService
}

// NewMockSubscriptionService creates a new mock instance.
func NewMockSubscriptionService(ctrl *gomock.Controller) *MockSubscriptionService {
	mock := &MockSubscriptionService{ctrl: ctrl}
	mock.recorder = &MockSubscriptionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionService) EXPECT() *MockSubscriptionServiceMockRecorder {
	return m.recorder
}

// CreateProfile mocks base method.
func (m *MockSubscriptionService) CreateProfile(ctx context.Context, projectID uuid.UUID, bundle reader.BundleReader, profileName string, qtx db.Querier) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProfile", ctx, projectID, bundle, profileName, qtx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProfile indicates an expected call of CreateProfile.
func (mr *MockSubscriptionServiceMockRecorder) CreateProfile(ctx, projectID, bundle, profileName, qtx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfile", reflect.TypeOf((*MockSubscriptionService)(nil).CreateProfile), ctx, projectID, bundle, profileName, qtx)
}

// Subscribe mocks base method.
func (m *MockSubscriptionService) Subscribe(ctx context.Context, projectID uuid.UUID, bundle reader.BundleReader, qtx db.Querier) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, projectID, bundle, qtx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockSubscriptionServiceMockRecorder) Subscribe(ctx, projectID, bundle, qtx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockSubscriptionService)(nil).Subscribe), ctx, projectID, bundle, qtx)
}
