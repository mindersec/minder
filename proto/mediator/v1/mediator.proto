//
// Copyright 2023 Stacklok, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package mediator.v1;
import "google/api/annotations.proto";
import "google/protobuf/descriptor.proto";
import "google/api/httpbody.proto";
import "minder/v1/minder.proto";

option go_package = "github.com/stacklok/mediator/pkg/api/protobuf/go/mediator/v1";

// Simple Health Check Service
// replies with OK
service HealthService {
    rpc CheckHealth (minder.v1.CheckHealthRequest) returns (minder.v1.CheckHealthResponse) {
        option (google.api.http) = {
            get: "/api/v1/health"
        };

        option (minder.v1.rpc_options) = {
            anonymous: true
            no_log: true
        };
    }
}

service ArtifactService {
    rpc ListArtifacts (minder.v1.ListArtifactsRequest) returns (minder.v1.ListArtifactsResponse) {
        option (google.api.http) = {
            get: "/api/v1/artifacts/{provider}"
        };

        option (minder.v1.rpc_options) = {
            // TODO: this should probably be available to non-root users
            root_admin_only: true
            auth_scope: OBJECT_OWNER_PROJECT
        };
    }

    rpc GetArtifactById (minder.v1.GetArtifactByIdRequest) returns (minder.v1.GetArtifactByIdResponse) {
        option (google.api.http) = {
            get: "/api/v1/artifact/{id}"
        };

        option (minder.v1.rpc_options) = {
            auth_scope: OBJECT_OWNER_PROJECT
        };
    }
}

service OAuthService {
    rpc GetAuthorizationURL (minder.v1.GetAuthorizationURLRequest) returns (minder.v1.GetAuthorizationURLResponse) {
        option (google.api.http) = {
            get: "/api/v1/auth/url"
        };

        option (minder.v1.rpc_options) = {
            auth_scope: OBJECT_OWNER_PROJECT
            owner_only: true
        };
    }
    // buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
    rpc ExchangeCodeForTokenCLI (minder.v1.ExchangeCodeForTokenCLIRequest) returns (google.api.HttpBody) {  // protolint:disable:this
        option (google.api.http) = {
            get: "/api/v1/auth/callback/{provider}/cli"
        };

        option (minder.v1.rpc_options) = {
            anonymous: true  // Don't need token auth for code exchange
        };
    }
    rpc ExchangeCodeForTokenWEB (minder.v1.ExchangeCodeForTokenWEBRequest) returns (minder.v1.ExchangeCodeForTokenWEBResponse) {
        option (google.api.http) = {
            get: "/api/v1/auth/callback/{provider}/web"
        };

        option (minder.v1.rpc_options) = {
            anonymous: true  // Don't need token auth for code exchange
        };
    }

    rpc StoreProviderToken (minder.v1.StoreProviderTokenRequest) returns (minder.v1.StoreProviderTokenResponse) {
        option (google.api.http) = {
            post: "/api/v1/auth/{provider}/token"
            body: "*"
        };

        option (minder.v1.rpc_options) = {
            auth_scope: OBJECT_OWNER_PROJECT
        };
    }

    // RevokeOauthTokens is used to revoke all tokens
    // this a nuclear option and should only be used in emergencies
    rpc RevokeOauthTokens (minder.v1.RevokeOauthTokensRequest) returns (minder.v1.RevokeOauthTokensResponse) {
        option (google.api.http) = {
            post: "/api/v1/auth/revoke-all"
            body: "*"
        };

        option (minder.v1.rpc_options) = {
            root_admin_only: true
        };
    }

    // revoke token for a project
    rpc RevokeOauthProjectToken (minder.v1.RevokeOauthProjectTokenRequest) returns (minder.v1.RevokeOauthProjectTokenResponse) {
        option (google.api.http) = {
            post: "/api/v1/auth/{provider}/revoke/{project_id}"
            body: "*"
        };

        option (minder.v1.rpc_options) = {
            auth_scope: OBJECT_OWNER_PROJECT
            owner_only: true
        };
    }

    // VerifyProviderTokenFrom verifies that a token has been created for a provider since given timestamp
    rpc VerifyProviderTokenFrom (minder.v1.VerifyProviderTokenFromRequest) returns (minder.v1.VerifyProviderTokenFromResponse) {
        option (google.api.http) = {
            get: "/api/v1/auth/verify/{provider}/{timestamp}"
        };

        option (minder.v1.rpc_options) = {
            auth_scope: OBJECT_OWNER_PROJECT
        };
    }

}

service RepositoryService {
    rpc RegisterRepository (minder.v1.RegisterRepositoryRequest) returns (minder.v1.RegisterRepositoryResponse) {
        option (google.api.http) = {
            post: "/api/v1/repository/provider/{provider}/register"
            body: "*"
        };

        option (minder.v1.rpc_options) = {
            auth_scope: OBJECT_OWNER_PROJECT
            owner_only: true
        };
    }
    rpc ListRemoteRepositoriesFromProvider(minder.v1.ListRemoteRepositoriesFromProviderRequest) returns (minder.v1.ListRemoteRepositoriesFromProviderResponse) {
        option (google.api.http) = {
            get: "/api/v1/repositories/provider/{provider}/remote"
        };

        option (minder.v1.rpc_options) = {
            auth_scope: OBJECT_OWNER_PROJECT
            owner_only: true
        };
    }
    rpc ListRepositories (minder.v1.ListRepositoriesRequest) returns (minder.v1.ListRepositoriesResponse) {
        option (google.api.http) = {
            get: "/api/v1/repositories/provider/{provider}"
        };

        option (minder.v1.rpc_options) = {
            auth_scope: OBJECT_OWNER_PROJECT
            owner_only: false
        };
    }
    rpc GetRepositoryById (minder.v1.GetRepositoryByIdRequest) returns (minder.v1.GetRepositoryByIdResponse) {
        option (google.api.http) = {
            get: "/api/v1/repository/id/{repository_id}"
        };

        option (minder.v1.rpc_options) = {
            auth_scope: OBJECT_OWNER_PROJECT
            owner_only: false
        };
    }

    rpc GetRepositoryByName (minder.v1.GetRepositoryByNameRequest) returns (minder.v1.GetRepositoryByNameResponse) {
        option (google.api.http) = {
            get: "/api/v1/repository/provider/{provider}/name/{name}"
        };

        option (minder.v1.rpc_options) = {
            auth_scope: OBJECT_OWNER_PROJECT
            owner_only: false
        };
    }
}

// Get Branch Protection Settings
service BranchProtectionService {
    rpc GetBranchProtection (minder.v1.GetBranchProtectionRequest) returns (minder.v1.GetBranchProtectionResponse) {
        option (google.api.http) = {
        get: "/api/v1/branchprotection"
        };
    }
}

// manage Users CRUD
service UserService {
    rpc CreateUser (minder.v1.CreateUserRequest) returns (minder.v1.CreateUserResponse) {
        option (google.api.http) = {
            post: "/api/v1/user"
            body: "*"
        };

        option (minder.v1.rpc_options) = {
            auth_scope: OBJECT_OWNER_ORGANIZATION
            owner_only: true
        };
    }

    rpc DeleteUser (minder.v1.DeleteUserRequest) returns (minder.v1.DeleteUserResponse) {
        option (google.api.http) = {
            delete: "/api/v1/user"
        };

        option (minder.v1.rpc_options) = {
            auth_scope: OBJECT_OWNER_ORGANIZATION
            owner_only: true
        };
    }

    rpc GetUser (minder.v1.GetUserRequest) returns (minder.v1.GetUserResponse) {
        option (google.api.http) = {
            get: "/api/v1/user"
        };

        option (minder.v1.rpc_options) = {
            auth_scope: OBJECT_OWNER_USER
            owner_only: false
        };
    }

}

service ProfileService {
    rpc CreateProfile (minder.v1.CreateProfileRequest) returns (minder.v1.CreateProfileResponse) {
        option (google.api.http) = {
            post: "/api/v1/profile"
            body: "*"
        };

        option (minder.v1.rpc_options) = {
            auth_scope: OBJECT_OWNER_PROJECT
            owner_only: true
        };
    }

    rpc DeleteProfile (minder.v1.DeleteProfileRequest) returns (minder.v1.DeleteProfileResponse) {
        option (google.api.http) = {
            delete: "/api/v1/profile/{id}"
        };

        option (minder.v1.rpc_options) = {
            auth_scope: OBJECT_OWNER_PROJECT
            owner_only: true
        };
    }

    rpc ListProfiles (minder.v1.ListProfilesRequest) returns (minder.v1.ListProfilesResponse) {
        option (google.api.http) = {
            get: "/api/v1/profiles"
        };

        option (minder.v1.rpc_options) = {
            auth_scope: OBJECT_OWNER_PROJECT
            owner_only: false
        };
    }

    rpc GetProfileById (minder.v1.GetProfileByIdRequest) returns (minder.v1.GetProfileByIdResponse) {
        option (google.api.http) = {
            get: "/api/v1/profile/{id}"
            };    
    }

    rpc GetProfileStatusByName (minder.v1.GetProfileStatusByNameRequest) returns (minder.v1.GetProfileStatusByNameResponse) {
        option (google.api.http) = {
            get: "/api/v1/profile/name/{name}/status"
        };

        option (minder.v1.rpc_options) = {
            auth_scope: OBJECT_OWNER_PROJECT
            owner_only: false
        };
    }

    rpc GetProfileStatusByProject (minder.v1.GetProfileStatusByProjectRequest) returns (minder.v1.GetProfileStatusByProjectResponse) {
        option (google.api.http) = {
            get: "/api/v1/profile_status"
        };

        option (minder.v1.rpc_options) = {
            auth_scope: OBJECT_OWNER_PROJECT
            owner_only: false
        };
    }    

    rpc ListRuleTypes (minder.v1.ListRuleTypesRequest) returns (minder.v1.ListRuleTypesResponse) {
        option (google.api.http) = {
            get: "/api/v1/rule_types"
        };

        option (minder.v1.rpc_options) = {
            auth_scope: OBJECT_OWNER_PROJECT
            owner_only: false
        };
    }

    rpc GetRuleTypeByName (minder.v1.GetRuleTypeByNameRequest) returns (minder.v1.GetRuleTypeByNameResponse) {
        option (google.api.http) = {
            get: "/api/v1/rule_type/name/{name}"
        };

        option (minder.v1.rpc_options) = {
            auth_scope: OBJECT_OWNER_PROJECT
            owner_only: false
        };
    }

    rpc GetRuleTypeById (minder.v1.GetRuleTypeByIdRequest) returns (minder.v1.GetRuleTypeByIdResponse) {
        option (google.api.http) = {
            get: "/api/v1/rule_type/{id}"
        };

        option (minder.v1.rpc_options) = {
            auth_scope: OBJECT_OWNER_PROJECT
            owner_only: false
        };
    }

    rpc CreateRuleType (minder.v1.CreateRuleTypeRequest) returns (minder.v1.CreateRuleTypeResponse) {
        option (google.api.http) = {
            post: "/api/v1/rule_type"
            body: "*"
        };

        option (minder.v1.rpc_options) = {
            auth_scope: OBJECT_OWNER_PROJECT
            owner_only: true
        };
    }

    rpc UpdateRuleType (minder.v1.UpdateRuleTypeRequest) returns (minder.v1.UpdateRuleTypeResponse) {
        option (google.api.http) = {
            put: "/api/v1/rule_type"
            body: "*"
        };

        option (minder.v1.rpc_options) = {
            auth_scope: OBJECT_OWNER_PROJECT
            owner_only: true
        };
    }

    rpc DeleteRuleType (minder.v1.DeleteRuleTypeRequest) returns (minder.v1.DeleteRuleTypeResponse) {
        option (google.api.http) = {
            delete: "/api/v1/rule_type/{id}"
        };

        option (minder.v1.rpc_options) = {
            auth_scope: OBJECT_OWNER_PROJECT
            owner_only: true
        };
    }
}

service KeyService {
    rpc GetPublicKey (minder.v1.GetPublicKeyRequest) returns (minder.v1.GetPublicKeyResponse) {
        option (google.api.http) = {
            get: "/api/v1/key"
        };
    }
    rpc CreateKeyPair (minder.v1.CreateKeyPairRequest) returns (minder.v1.CreateKeyPairResponse) {
        option (google.api.http) = {
            post: "/api/v1/key"
            body: "*"
        };

        option (minder.v1.rpc_options) = {
            auth_scope: OBJECT_OWNER_PROJECT
            owner_only: true
        };
    }
}
