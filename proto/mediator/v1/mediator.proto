//
// Copyright 2023 Stacklok, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package mediator.v1;
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/stacklok/mediator/pkg/generated/protobuf/go";


// Simple Health Check Service
// replies with OK
service HealthService {
    rpc CheckHealth (CheckHealthRequest) returns (CheckHealthResponse) {
        option (google.api.http) = {
            get: "/api/v1/health"
        };
    }
}

service OAuthService {
    rpc GetAuthorizationURL (GetAuthorizationURLRequest) returns (GetAuthorizationURLResponse) {
        option (google.api.http) = {
            get: "/api/v1/auth/url"
        };
    }
    rpc ExchangeCodeForTokenCLI (ExchangeCodeForTokenCLIRequest) returns (ExchangeCodeForTokenCLIResponse) {
        option (google.api.http) = {
            get: "/api/v1/auth/callback/{provider}/cli"
        };
    }
    rpc ExchangeCodeForTokenWEB (ExchangeCodeForTokenWEBRequest) returns (ExchangeCodeForTokenWEBResponse) {
        option (google.api.http) = {
            get: "/api/v1/auth/callback/{provider}/web"
        };        
    }

    rpc StoreProviderToken (StoreProviderTokenRequest) returns (StoreProviderTokenResponse) {
        option (google.api.http) = {
            post: "/api/v1/auth/{provider}/token"
            body: "*"
        };
    }

    // revoke all tokens for all users
    rpc RevokeOauthTokens (RevokeOauthTokensRequest) returns (RevokeOauthTokensResponse) {
        option (google.api.http) = {
            post: "/api/v1/auth/{provider}/revoke"
            body: "*"
        };
    }

    // revoke token for a group
    rpc RevokeOauthGroupToken (RevokeOauthGroupTokenRequest) returns (RevokeOauthGroupTokenResponse) {
        option (google.api.http) = {
            post: "/api/v1/auth/{provider}/revoke/{group_id}"
            body: "*"
        };
    }

    // VerifyProviderTokenFrom verifies that a token has been created for a provider since given timestamp
    rpc VerifyProviderTokenFrom (VerifyProviderTokenFromRequest) returns (VerifyProviderTokenFromResponse) {
        option (google.api.http) = {
            get: "/api/v1/auth/verify/{provider}/{timestamp}"
        };
    }

}

service AuthService {
    // LogIn to Mediator
    rpc LogIn (LogInRequest) returns (LogInResponse) {
        option (google.api.http) = {
            post: "/api/v1/auth/login"
            body: "*"
        };
    }

    // Logout of Mediator
    rpc LogOut (LogOutRequest) returns (LogOutResponse) {
        option (google.api.http) = {
            post: "/api/v1/auth/logout"
            body: "*"
        };
    }

    // revoke all tokens for all users
    rpc RevokeTokens (RevokeTokensRequest) returns (RevokeTokensResponse) {
        option (google.api.http) = {
            post: "/api/v1/auth/revoke"
            body: "*"
        };
    }

    // revoke token for an user
    rpc RevokeUserToken (RevokeUserTokenRequest) returns (RevokeUserTokenResponse) {
        option (google.api.http) = {
            post: "/api/v1/auth/revoke/{user_id}"
            body: "*"
        };
    }

    // refresh a token
    rpc RefreshToken (RefreshTokenRequest) returns (RefreshTokenResponse) {
        option (google.api.http) = {
            post: "/api/v1/auth/refresh"
            body: "*"
        };
    }

    // Verify user has active session to Mediator
    rpc Verify (VerifyRequest) returns (VerifyResponse) {
        option (google.api.http) = {
            get: "/api/v1/auth/verify"
        };
    }
}

// Get Vulnerabilities
service VulnerabilitiesService {
    rpc GetVulnerabilities (GetVulnerabilitiesRequest) returns (GetVulnerabilitiesResponse) {
        option (google.api.http) = {
        get: "/api/v1/vulns"
        };
    }

    rpc GetVulnerabilityById (GetVulnerabilityByIdRequest) returns (GetVulnerabilityByIdResponse) {
        option (google.api.http) = {
        get: "/api/v1/vulns/{id}"
        };
    }
}

// Get Secrets
// Note there are different APIs for enterprise or org secrets
// https://docs.github.com/en/rest/secret-scanning?apiVersion=2022-11-28
service SecretsService {
    rpc GetSecrets (GetSecretsRequest) returns (GetSecretsResponse) {
        option (google.api.http) = {
        get: "/api/v1/secrets"
        };
    }

    rpc GetSecretById (GetSecretByIdRequest) returns (GetSecretByIdResponse) {
        option (google.api.http) = {
        get: "/api/v1/secrets/{id}"
        };
    }
}

service RepositoryService {
    rpc RegisterRepository (RegisterRepositoryRequest) returns (RegisterRepositoryResponse) {
        option (google.api.http) = {
            post: "/api/v1/repository"
            body: "*"
        };
    }
    rpc ListRepositories (ListRepositoriesRequest) returns (ListRepositoriesResponse) {
        option (google.api.http) = {
            get: "/api/v1/repositories"
        };
    }
    rpc GetRepository (GetRepositoryRequest) returns (GetRepositoryResponse) {
        option (google.api.http) = {
            get: "/api/v1/repository/{repository_id}"
        };
    }
}

// Get Branch Protection Settings
service BranchProtectionService {
    rpc GetBranchProtection (GetBranchProtectionRequest) returns (GetBranchProtectionResponse) {
        option (google.api.http) = {
        get: "/api/v1/branchprotection"
        };
    }
}

// manage Organizations CRUD
service OrganizationService {
    rpc CreateOrganization (CreateOrganizationRequest) returns (CreateOrganizationResponse) {
        option (google.api.http) = {
            post: "/api/v1/organization"
            body: "*"
        };
    }

    rpc GetOrganizations (GetOrganizationsRequest) returns (GetOrganizationsResponse) {
        option (google.api.http) = {
        get: "/api/v1/organizations"
        };
    }

    rpc GetOrganization (GetOrganizationRequest) returns (GetOrganizationResponse) {
        option (google.api.http) = {
            get: "/api/v1/organizations/{organization_id}"
            };    
    }

    rpc GetOrganizationByName (GetOrganizationByNameRequest) returns (GetOrganizationByNameResponse) {
        option (google.api.http) = {
            get: "/api/v1/organizations/name/{name}"
            };    
    }

    rpc DeleteOrganization (DeleteOrganizationRequest) returns (DeleteOrganizationResponse) {
        option (google.api.http) = {
            delete: "/api/v1/organization/{id}"
        };

    }     

}

// manage Groups CRUD
service GroupService {
    rpc CreateGroup (CreateGroupRequest) returns (CreateGroupResponse) {
        option (google.api.http) = {
            post: "/api/v1/group"
            body: "*"
        };
    }

    rpc GetGroups (GetGroupsRequest) returns (GetGroupsResponse) {
        option (google.api.http) = {
            get: "/api/v1/groups/{organization_id}"
        };
    }

    rpc GetGroupByName (GetGroupByNameRequest) returns (GetGroupByNameResponse) {
        option (google.api.http) = {
            get: "/api/v1/group/name/{name}"
        };
    }

    rpc GetGroupById (GetGroupByIdRequest) returns (GetGroupByIdResponse) {
        option (google.api.http) = {
            get: "/api/v1/group/id/{group_id}"
        };
    }

    rpc DeleteGroup (DeleteGroupRequest) returns (DeleteGroupResponse) {
        option (google.api.http) = {
            delete: "/api/v1/group/{id}"
        };

    }     
}

// manage Roles CRUD
service RoleService {
    rpc CreateRoleByOrganization (CreateRoleByOrganizationRequest) returns (CreateRoleByOrganizationResponse) {
        option (google.api.http) = {
            post: "/api/v1/role/organization"
            body: "*"
        };
    }
    rpc CreateRoleByGroup (CreateRoleByGroupRequest) returns (CreateRoleByGroupResponse) {
        option (google.api.http) = {
            post: "/api/v1/role/group"
            body: "*"
        };
    }

    rpc DeleteRole (DeleteRoleRequest) returns (DeleteRoleResponse) {
        option (google.api.http) = {
            delete: "/api/v1/role/{id}"
        };

    } 
    
    rpc GetRoles (GetRolesRequest) returns (GetRolesResponse) {
        option (google.api.http) = {
        get: "/api/v1/roles/{organization_id}"
        };
    }

    rpc GetRolesByGroup (GetRolesByGroupRequest) returns (GetRolesByGroupResponse) {
        option (google.api.http) = {
        get: "/api/v1/roles/group/{group_id}"
        };
    }

    rpc GetRoleById (GetRoleByIdRequest) returns (GetRoleByIdResponse) {
        option (google.api.http) = {
            get: "/api/v1/role/{id}"
            };    
    }

    rpc GetRoleByName (GetRoleByNameRequest) returns (GetRoleByNameResponse) {
        option (google.api.http) = {
            get: "/api/v1/role/name/{name}"
            };    
    }
    
}

// manage Users CRUD
service UserService {
    rpc CreateUser (CreateUserRequest) returns (CreateUserResponse) {
        option (google.api.http) = {
            post: "/api/v1/user"
            body: "*"
        };
    }

    rpc DeleteUser (DeleteUserRequest) returns (DeleteUserResponse) {
        option (google.api.http) = {
            delete: "/api/v1/user/{id}"
        };
    }

    rpc GetUsers (GetUsersRequest) returns (GetUsersResponse) {
        option (google.api.http) = {
        get: "/api/v1/users"
        };
    }

    rpc GetUsersByOrganization (GetUsersByOrganizationRequest) returns (GetUsersByOrganizationResponse) {
        option (google.api.http) = {
        get: "/api/v1/users/{organization_id}"
        };
    }

    rpc GetUsersByGroup (GetUsersByGroupRequest) returns (GetUsersByGroupResponse) {
        option (google.api.http) = {
        get: "/api/v1/users/{group_id}"
        };
    }

    rpc GetUserById (GetUserByIdRequest) returns (GetUserByIdResponse) {
        option (google.api.http) = {
            get: "/api/v1/user/{id}"
            };    
    }

    rpc GetUserByUserName (GetUserByUserNameRequest) returns (GetUserByUserNameResponse) {
        option (google.api.http) = {
            get: "/api/v1/user/username/{username}"
            };    
    }

    rpc GetUser (GetUserRequest) returns (GetUserResponse) {
        option (google.api.http) = {
            get: "/api/v1/user"
            };
    }

    rpc GetUserByEmail (GetUserByEmailRequest) returns (GetUserByEmailResponse) {
        option (google.api.http) = {
            get: "/api/v1/user/email/{email}"
            };    
    }

    rpc UpdatePassword (UpdatePasswordRequest) returns (UpdatePasswordResponse) {
        option (google.api.http) = {
            post: "/api/v1/user/password"
            body: "*"
        };
    }

    rpc UpdateProfile (UpdateProfileRequest) returns (UpdateProfileResponse) {
        option (google.api.http) = {
            post: "/api/v1/user/profile"
            body: "*"
        };
    }

}

service PolicyService {
    rpc GetPolicyType (GetPolicyTypeRequest) returns (GetPolicyTypeResponse) {
        option (google.api.http) = {
            get: "/api/v1/policy_type/{type}"
            };
    }

    rpc GetPolicyTypes (GetPolicyTypesRequest) returns (GetPolicyTypesResponse) {
        option (google.api.http) = {
            get: "/api/v1/policy_types"
            };
    }

    rpc CreatePolicy (CreatePolicyRequest) returns (CreatePolicyResponse) {
        option (google.api.http) = {
            post: "/api/v1/policy"
            body: "*"
        };
    }

    rpc DeletePolicy (DeletePolicyRequest) returns (DeletePolicyResponse) {
        option (google.api.http) = {
            delete: "/api/v1/policy/{id}"
        };
    }

    rpc GetPolicies (GetPoliciesRequest) returns (GetPoliciesResponse) {
        option (google.api.http) = {
        get: "/api/v1/policies"
        };
    }

    rpc GetPolicyById (GetPolicyByIdRequest) returns (GetPolicyByIdResponse) {
        option (google.api.http) = {
            get: "/api/v1/policy/{id}"
            };    
    }

    rpc GetPolicyStatusById (GetPolicyStatusByIdRequest) returns (GetPolicyStatusByIdResponse) {
        option (google.api.http) = {
            get: "/api/v1/policy/{policy_id}/status"
            };    
    }

    rpc GetPolicyStatusByGroup (GetPolicyStatusByGroupRequest) returns (GetPolicyStatusByGroupResponse) {
        option (google.api.http) = {
            get: "/api/v1/policy_status/provider/{provider}/group/{group_id}"
            };    
    }    

    rpc GetPolicyStatusByRepository (GetPolicyStatusByRepositoryRequest) returns (GetPolicyStatusByRepositoryResponse) {
        option (google.api.http) = {
            get: "/api/v1/policy_status/repository/{repository_id}"
            };    
    }    

    rpc GetPolicyViolationsById (GetPolicyViolationsByIdRequest) returns (GetPolicyViolationsByIdResponse) {
        option (google.api.http) = {
            get: "/api/v1/policy_violations/{id}"
            };    
    }

    rpc GetPolicyViolationsByGroup (GetPolicyViolationsByGroupRequest) returns (GetPolicyViolationsByGroupResponse) {
        option (google.api.http) = {
            get: "/api/v1/policy_violations/provider/{provider}/group/{group_id}"
            };    
    }    

    rpc GetPolicyViolationsByRepository (GetPolicyViolationsByRepositoryRequest) returns (GetPolicyViolationsByRepositoryResponse) {
        option (google.api.http) = {
            get: "/api/v1/policy_violations/repository/{repository_id}"
            };    
    }    
}

service KeyService {
    rpc GetPublicKey (GetPublicKeyRequest) returns (GetPublicKeyResponse) {
        option (google.api.http) = {
            get: "/api/v1/key"
        };
    }
    rpc CreateKeyPair (CreateKeyPairRequest) returns (CreateKeyPairResponse) {
        option (google.api.http) = {
            post: "/api/v1/key"
            body: "*"
        };
    }
}

message CheckHealthRequest {
}

message CheckHealthResponse {
    string status = 1;
}

message GetAuthorizationURLRequest {
    string provider = 1;
    int32 group_id = 2;
    bool  cli = 3;
    int32  port = 4;
}

message GetAuthorizationURLResponse {
    string url = 1;
}

message ExchangeCodeForTokenCLIRequest {
    string provider = 1;
    int32 group_id = 2;
    string code = 3;
    string state = 4;
    string redirect_uri = 5;
}

message StoreProviderTokenRequest {
    string provider = 1;
    int32 group_id = 2;
    string access_token = 3;
}

message StoreProviderTokenResponse {    
}

message ExchangeCodeForTokenCLIResponse {
    string html = 1;
}

message ExchangeCodeForTokenWEBRequest{
    string provider = 1;
    int32 group_id = 2;
    string code = 3;
    string redirect_uri = 4;
}

message ExchangeCodeForTokenWEBResponse {
    string access_token = 1;
    string token_type = 2;
    int64  expires_in = 3;
    string status = 4;
}

message LogInRequest {
    string username = 1;
    string password = 2;
}

message LogInResponse {
    string refresh_token = 2;
    string access_token = 3;
    int64  refresh_token_expires_in = 4;
    int64  access_token_expires_in = 5;
}

message LogOutRequest {
}

message LogOutResponse {
}

message RevokeTokensRequest {
}

message RevokeTokensResponse {
}

message RevokeUserTokenRequest {
    int32 user_id = 1;
}

message RevokeUserTokenResponse {
}

message RevokeOauthTokensRequest {
    string provider = 1;
}

message RevokeOauthTokensResponse {
    int32 revoked_tokens = 1;
}

message RevokeOauthGroupTokenRequest {
    string provider = 1;
    int32 group_id = 2;
}

message RevokeOauthGroupTokenResponse {
}

message RefreshTokenRequest {    
}

message RefreshTokenResponse {
    string access_token = 2;
    int64  access_token_expires_in = 3;
}

message RegisterRepositoryRequest {
    string provider = 1;
    int32 group_id = 2;
    repeated Repositories repositories = 3;
    repeated string events = 4;
}

message Repositories {
    string owner = 1;
    string name = 2;
    int32 repo_id = 3;
}

// ListRepositories is used for displaying repository list data that
// is relevant to users. It is not used for registering repositories.
// Due to protobuf limitations, we cannot use the same Repositories for
// listing repositories and registering repositories.
message ListRepositories {
    int32 id = 1;
    string owner = 2;
    string name = 3;
    int32 repo_id = 4;
    bool registered = 5;
}

message RegisterRepositoryResponse {
    repeated RepositoryResult results = 1;
}

message GetRepositoryRequest {
    int32 repository_id = 1;
    string provider = 2;
    int32 group_id = 3;
}

// Repo filter enum
enum RepoFilter {
    REPO_FILTER_SHOW_UNSPECIFIED = 0;
    REPO_FILTER_SHOW_ALL = 1;
    REPO_FILTER_SHOW_NOT_REGISTERED_ONLY = 2;
    REPO_FILTER_SHOW_REGISTERED_ONLY = 3;
}

message ListRepositoriesRequest {
    string provider = 1;
    int32 group_id = 2;
    int32 limit = 3;
    int32 offset = 4;
    RepoFilter filter = 5;
}

message ListRepositoriesResponse {
    repeated ListRepositories results = 1;
}

message GetRepositoryResponse {
    int32 id = 1;
    string owner = 2;
    string repository = 3;
    int32 repo_id = 4;
    string hook_url = 5;
    google.protobuf.Timestamp created_at = 6;
    google.protobuf.Timestamp updated_at = 7;
    bool registered = 8;
}

message RepositoryResult {
    string owner = 1;
    string repository = 2;
    int32 repo_id = 3;
    int64 hook_id = 4;
    string hook_url = 5;
    string deploy_url = 6;
    google.protobuf.Timestamp created_at = 7;
    google.protobuf.Timestamp updated_at = 8;
    string hook_name = 9;
    string hook_type = 10;
    bool success = 11;
    string uuid = 12;
    google.protobuf.StringValue error = 13;
    bool registered = 14;
}


message VerifyRequest {
}

message VerifyResponse {
    string status = 1;
}

message VerifyProviderTokenFromRequest {
    string provider = 1;
    int32 group_id = 2;
    google.protobuf.Timestamp timestamp = 3;
}

message VerifyProviderTokenFromResponse {
    string status = 1;
}

message GetVulnerabilitiesRequest {
}

message GetVulnerabilityByIdRequest {
  string id = 1;
}

message GetVulnerabilityByIdResponse {
  // May require adjustment, currently set up for GitHub Security Advisories only
  uint64 id = 1;
  int64 github_id = 2;
  int64 repo_id = 3;
  string repo_name = 4;
  string package_name = 5;
  string severity = 6;
  string version_affected = 7;
  string upgrade_version = 8;
  string ghsaid = 9;
  string advisroy_url = 10;
  google.protobuf.Timestamp  scanned_at = 11;
  google.protobuf.Timestamp  created_at = 12;
}

message GetVulnerabilitiesResponse {
  repeated GetVulnerabilityByIdResponse vulns = 1;
}

message GetSecretsRequest {
}

message GetSecretsResponse {
  repeated GetSecretByIdResponse secrets = 1;
}

message GetSecretByIdRequest {
  string id = 1;
}

message GetSecretByIdResponse {
  string id = 1;
  string name = 2;
  string description = 3;
  // Add other relevant fields
}
message GetBranchProtectionRequest {
}

message BranchProtection {
  string branch = 1;
  bool is_protected = 2;
  // Add other relevant fields
}

message GetBranchProtectionResponse {
  repeated BranchProtection branch_protections = 1;
}

// Organization service
message CreateOrganizationRequest {
    string name = 1;
    string company = 2;
    bool create_default_records = 3;
  }
  
message CreateOrganizationResponse {
    int32 id = 1;
    string name = 2;
    string company = 3;
    google.protobuf.Timestamp created_at = 5;
    google.protobuf.Timestamp updated_at = 6;
    optional GroupRecord default_group = 7;
    repeated RoleRecord default_roles = 8;
    optional UserRecord default_user = 9;
}

message OrganizationRecord {
    int32 id = 1;
    string name = 2;
    string company = 3;
    google.protobuf.Timestamp created_at = 5;
    google.protobuf.Timestamp updated_at = 6;    
}

// DeleteOrganizationRequest represents a request to delete a organization
message DeleteOrganizationRequest {
    int32 id = 1;
    optional bool force = 2;
}

// DeleteOrganizationResponse represents a response to a delete organization request
message DeleteOrganizationResponse {

}

// list organizations
message GetOrganizationsRequest {
    optional int32 limit = 1;
    optional int32 offset = 2;
}

message GetOrganizationsResponse {
    repeated OrganizationRecord organizations = 1;
}

// get organization by id
message GetOrganizationRequest {
    int32 organization_id = 1;
}

message GetOrganizationResponse {
    optional OrganizationRecord organization = 1;
    repeated GroupRecord groups = 2;
    repeated RoleRecord roles = 3;
    repeated UserRecord users = 4;
}

// get organization by name
message GetOrganizationByNameRequest {
    string name = 1;
}

message GetOrganizationByNameResponse {
    optional OrganizationRecord organization = 1;
    repeated GroupRecord groups = 2;
    repeated RoleRecord roles = 3;
    repeated UserRecord users = 4;
}

// Group service

// The CreateGroupRequest message represents a request to create a group
message CreateGroupRequest {
    int32  organization_id = 1;
    string name = 2;
    string description = 3;
    optional bool is_protected = 4;
}

// The GetGroupByNameRequest message represents a request to get a group by name
message GetGroupByNameRequest {
    string name = 1;
}

// The GetGroupByIdRequest message represents a request to get a group by ID
message GetGroupByIdRequest {
    int32 group_id = 1;
}

// The GetGroupsRequest message represents a request to get an array of groups
message GetGroupsRequest {
    int32 organization_id = 1;
    int32 limit = 2;
    int32 offset = 3;
}

// BUF does not allow grouping (which is a shame)
message GroupRecord {
    int32 group_id = 1;
    int32 organization_id = 2;
    string name = 3;
    string description = 4;
    bool is_protected = 5;
    google.protobuf.Timestamp created_at = 6;
    google.protobuf.Timestamp updated_at = 7;    
}

message  CreateGroupResponse {
    int32 group_id = 1;
    int32 organization_id = 2;
    string name = 3;
    string description = 4;
    bool is_protected = 5;
    google.protobuf.Timestamp created_at = 6;
    google.protobuf.Timestamp updated_at = 7;    
}

message GetGroupByNameResponse {
    optional GroupRecord group = 1;
    repeated RoleRecord roles = 2;
    repeated UserRecord users = 3;
}

message GetGroupByIdResponse {
    optional GroupRecord group = 1;
    repeated RoleRecord roles = 2;
    repeated UserRecord users = 3;
}

// The GetGroupsResponse message represents a response with an array of groups
message GetGroupsResponse {
    repeated GroupRecord groups = 1;
}

// DeleteGroupRequest represents a request to delete a group
message DeleteGroupRequest {
    int32 id = 1;
    optional bool force = 2;
}

// DeleteGroupResponse represents a response to a delete group request
message DeleteGroupResponse {

}

// Role service
message CreateRoleByOrganizationRequest {
    int32 organization_id = 1;
    string name = 3;
    optional bool is_admin = 4;
    optional bool is_protected = 5;
  }
  
message CreateRoleByOrganizationResponse {
    int32 id = 1;
    int32 organization_id = 2;
    string name = 4;
    bool is_admin = 5;
    bool is_protected = 6;
    google.protobuf.Timestamp created_at = 7;
    google.protobuf.Timestamp updated_at = 8;    
}

message CreateRoleByGroupRequest {
    int32 organization_id = 1;
    int32 group_id = 2;
    string name = 3;
    optional bool is_admin = 4;
    optional bool is_protected = 5;
  }
  
message CreateRoleByGroupResponse {
    int32 id = 1;
    int32 organization_id = 2;
    int32 group_id = 3;
    string name = 4;
    bool is_admin = 5;
    bool is_protected = 6;
    google.protobuf.Timestamp created_at = 7;
    google.protobuf.Timestamp updated_at = 8;    
}

// delete role
message DeleteRoleRequest {
    int32 id = 1;
    optional bool force = 2;
}

message DeleteRoleResponse {

}

message RoleRecord {
    int32 id = 1;
    int32 organization_id = 2;
    optional int32 group_id = 3;
    string name = 4;
    bool is_admin = 5;
    bool is_protected = 6;
    google.protobuf.Timestamp created_at = 7;
    google.protobuf.Timestamp updated_at = 8;    
}

// list roles
message GetRolesRequest {
    int32 organization_id = 1;
    optional int32 limit = 2;
    optional int32 offset = 3;
}

message GetRolesResponse {
    repeated RoleRecord roles = 1;
}

message GetRolesByGroupRequest {
    int32 group_id = 1;
    optional int32 limit = 2;
    optional int32 offset = 3;
}

message GetRolesByGroupResponse {
    repeated RoleRecord roles = 1;
}

// get role by id
message GetRoleByIdRequest {
    int32 id = 1;
}

message GetRoleByIdResponse {
    optional RoleRecord role = 1;
}

// get role by group and name
message GetRoleByNameRequest {
    int32 organization_id = 1;
    string name = 2;
}

message GetRoleByNameResponse {
    optional RoleRecord role = 1;
}


// User service
message CreateUserRequest {
    int32 organization_id = 1;
    optional string email = 2;
    string username = 3;
    optional string password = 4;
    optional string first_name = 5;
    optional string last_name = 6;
    optional bool is_protected = 7;
    optional bool needs_password_change = 8;
    repeated int32 group_ids = 9;
    repeated int32 role_ids = 10;
  }
  
message CreateUserResponse {
    int32 id = 1;
    int32 organization_id = 2;
    optional string email = 3;
    string username = 4;
    string password = 5;
    optional string first_name = 6;
    optional string last_name = 7;
    optional bool is_protected = 8;
    optional bool needs_password_change = 9;
    google.protobuf.Timestamp created_at = 10;
    google.protobuf.Timestamp updated_at = 11;
}

message DeleteUserRequest {
    int32 id = 1;
    optional bool force = 2;
}

message DeleteUserResponse {
}

message UpdatePasswordRequest {
    string password = 1;
    string password_confirmation = 2;
}

message UpdatePasswordResponse {
}

message UpdateProfileRequest {
    optional string email = 1;
    optional string first_name = 2;
    optional string last_name = 3;
}

message UpdateProfileResponse {
}

// user record to be returned
message UserRecord {
    int32 id = 1;
    int32 organization_id = 2;
    optional string email = 3;
    string username = 4;
    string password = 5;
    optional string first_name = 6;
    optional string last_name = 7;
    optional bool is_protected = 8;
    optional bool needs_password_change = 9;
    google.protobuf.Timestamp created_at = 10;
    google.protobuf.Timestamp updated_at = 11;    
}

// list users
message GetUsersRequest {
    optional int32 limit = 3;
    optional int32 offset = 4;
}

message GetUsersResponse {
    repeated UserRecord users = 1;
}

message GetUsersByOrganizationRequest {
    int32 organization_id = 1;
    optional int32 limit = 2;
    optional int32 offset = 3;
}

message GetUsersByOrganizationResponse {
    repeated UserRecord users = 1;
}

message GetUsersByGroupRequest {
    int32 group_id = 1;
    optional int32 limit = 2;
    optional int32 offset = 3;
}

message GetUsersByGroupResponse {
    repeated UserRecord users = 1;
}

// get user by id
message GetUserByIdRequest {
    int32 id = 1;
}

message GetUserByIdResponse {
    optional UserRecord user = 1;
    repeated GroupRecord groups = 2;
    repeated RoleRecord roles = 3;
}

// get user by username
message GetUserByUserNameRequest {
    string username = 1;
}

message GetUserByUserNameResponse {
    optional UserRecord user = 1;
    repeated GroupRecord groups = 2;
    repeated RoleRecord roles = 3;
}

// get user by email
message GetUserByEmailRequest {
    string email = 1;
}

message GetUserByEmailResponse {
    optional UserRecord user = 1;
    repeated GroupRecord groups = 2;
    repeated RoleRecord roles = 3;
}

// get user
message GetUserRequest {
}

message GetUserResponse {
    optional UserRecord user = 1;
    repeated GroupRecord groups = 2;
    repeated RoleRecord roles = 3;
}

// Policy service
message CreatePolicyRequest {
    string provider = 1;
    int32 group_id = 2;
    string type = 3; 
    string policy_definition = 4;
}
  
// policy record to be returned
message PolicyRecord {
    int32 id = 1;
    string provider = 2;
    int32 group_id = 3;
    string type = 4; 
    string policy_definition = 5;
    google.protobuf.Timestamp created_at = 6;
    google.protobuf.Timestamp updated_at = 7;    
}

message CreatePolicyResponse {
    PolicyRecord policy = 1;
}

message DeletePolicyRequest {
    int32 id = 1;
}

message DeletePolicyResponse {
}

// list policies
message GetPoliciesRequest {
    string provider = 1;
    int32 group_id = 2;
    optional int32 limit = 3;
    optional int32 offset = 4;
}

message GetPoliciesResponse {
    repeated PolicyRecord policies = 1;
}

// get policy by id
message GetPolicyByIdRequest {
    int32 id = 1;
}

message GetPolicyByIdResponse {
    optional PolicyRecord policy = 1;
}

// get policy violation status
message PolicyRepoStatus {
    string policy_type = 1;
    int32 repo_id = 2;
    string repo_owner = 3;
    string repo_name = 4;
    string policy_status = 5;
    google.protobuf.Timestamp last_updated = 6;
}

// get policy violation details
message PolicyViolation {
    string policy_type = 1;
    int32 repo_id = 2;
    string repo_owner = 3;
    string repo_name = 4;
    string metadata = 5;
    string violation = 6;
    google.protobuf.Timestamp created_at = 7;    
}

message GetPolicyStatusByIdRequest {
    int32 policy_id = 1;
}

message GetPolicyStatusByIdResponse {
    repeated PolicyRepoStatus policy_repo_status = 1;
}

message GetPolicyStatusByGroupRequest {
    string provider = 1;
    int32 group_id = 2;
}

message GetPolicyStatusByGroupResponse {
    repeated PolicyRepoStatus policy_repo_status = 1;
}

message GetPolicyStatusByRepositoryRequest {
    int32 repository_id = 1;
}

message GetPolicyStatusByRepositoryResponse {
    repeated PolicyRepoStatus policy_repo_status = 1;
}

message GetPolicyViolationsByIdRequest {
    int32 id = 1;
    optional int32 limit = 2;
    optional int32 offset = 3;
}

message GetPolicyViolationsByIdResponse {
    repeated PolicyViolation policy_violation = 1;
}

message GetPolicyViolationsByGroupRequest {
    string provider = 1;
    int32 group_id = 2;
    optional int32 limit = 3;
    optional int32 offset = 4;
}

message GetPolicyViolationsByGroupResponse {
    repeated PolicyViolation policy_violation = 1;
}

message GetPolicyViolationsByRepositoryRequest {
    int32 repository_id = 1;
    optional int32 limit = 2;
    optional int32 offset = 3;
}

message GetPolicyViolationsByRepositoryResponse {
    repeated PolicyViolation policy_violation = 1;
}


// policy type record to be returned
message PolicyTypeRecord {
    int32 id = 1;
    string provider = 2;
    string policy_type = 3;
    optional string description = 4;
    string json_schema = 5;
    string version = 6;
    string default_schema = 7;
    google.protobuf.Timestamp created_at = 8;
    google.protobuf.Timestamp updated_at = 9;    
}

// get policy type
message GetPolicyTypeRequest {
    string provider = 1;
    string type = 2;
}

message GetPolicyTypeResponse {
    optional PolicyTypeRecord policy_type = 1;
}

// get policy type by id
message GetPolicyTypeByIdRequest {
    string id = 1;
}

message GetPolicyTypeByIdResponse {
    optional PolicyTypeRecord policy_type = 1;
}

// get policy types
message GetPolicyTypesRequest {
    string provider = 1;
}

message GetPolicyTypesResponse {
    repeated PolicyTypeRecord policy_types = 1;
}
message GetPublicKeyRequest {
    string key_identifier = 1;
}

message GetPublicKeyResponse {
    string public_key = 1;
}

message CreateKeyPairRequest {
    string passphrase = 1;
    int32 group_id = 2;
}

message CreateKeyPairResponse {
    string key_identifier = 1;
    string public_key = 2;
}
