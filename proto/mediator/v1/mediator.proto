//
// Copyright 2023 Stacklok, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package mediator.v1;
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/stacklok/mediator/pkg/generated/protobuf/go";


// Simple Health Check Service
// replies with OK
service HealthService {
    rpc CheckHealth (CheckHealthRequest) returns (CheckHealthResponse) {
        option (google.api.http) = {
            get: "/api/v1/health"
        };
    }
}

service OAuthService {
    rpc GetAuthorizationURL (GetAuthorizationURLRequest) returns (GetAuthorizationURLResponse) {
        option (google.api.http) = {
            get: "/api/v1/auth/url"
        };
    }
    rpc ExchangeCodeForTokenCLI (ExchangeCodeForTokenCLIRequest) returns (ExchangeCodeForTokenCLIResponse) {
        option (google.api.http) = {
            get: "/api/v1/auth/callback/{provider}/cli"
        };
    }
    rpc ExchangeCodeForTokenWEB (ExchangeCodeForTokenWEBRequest) returns (ExchangeCodeForTokenWEBResponse) {
        option (google.api.http) = {
            get: "/api/v1/auth/callback/{provider}/web"
        };
    }
}

// LogIn to Mediator
service LogInService {
    rpc LogIn (LogInRequest) returns (LogInResponse) {
        option (google.api.http) = {
            post: "/api/v1/auth/login"
            body: "*"
        };
    }
}

// Logout of Mediator
service LogOutService {
    rpc LogOut (LogOutRequest) returns (LogOutResponse) {
        option (google.api.http) = {
            post: "/api/v1/auth/logout"
            body: "*"
        };
    }
}

// Revoke access tokens generally
service RevokeTokensService {
    rpc RevokeTokens (RevokeTokensRequest) returns (RevokeTokensResponse) {
        option (google.api.http) = {
            post: "/api/v1/auth/revoke"
            body: "*"
        };
    }

    rpc RevokeUserToken (RevokeUserTokenRequest) returns (RevokeUserTokenResponse) {
        option (google.api.http) = {
            post: "/api/v1/auth/revoke/{user_id}"
            body: "*"
        };
    }

}

// Verify user has active session to Mediator
service AuthVerifyService {
    rpc Verify (AuthVerifyServiceVerifyRequest) returns (AuthVerifyServiceVerifyResponse) {
        option (google.api.http) = {
            post: "/api/v1/auth/verify"
            body: "*"
        };
    }
}

// Get Vulnerabilities
service VulnerabilitiesService {
    rpc GetVulnerabilities (GetVulnerabilitiesRequest) returns (GetVulnerabilitiesResponse) {
        option (google.api.http) = {
        get: "/api/v1/vulns"
        };
    }

    rpc GetVulnerabilityById (GetVulnerabilityByIdRequest) returns (GetVulnerabilityByIdResponse) {
        option (google.api.http) = {
        get: "/api/v1/vulns/{id}"
        };
    }
}

// Get Secrets
// Note there are different APIs for enterprise or org secrets
// https://docs.github.com/en/rest/secret-scanning?apiVersion=2022-11-28
service SecretsService {
    rpc GetSecrets (GetSecretsRequest) returns (GetSecretsResponse) {
        option (google.api.http) = {
        get: "/api/v1/secrets"
        };
    }

    rpc GetSecretById (GetSecretByIdRequest) returns (GetSecretByIdResponse) {
        option (google.api.http) = {
        get: "/api/v1/secrets/{id}"
        };
    }
}

// Get Branch Protection Settings
service BranchProtectionService {
    rpc GetBranchProtection (GetBranchProtectionRequest) returns (GetBranchProtectionResponse) {
        option (google.api.http) = {
        get: "/api/v1/branchprotection"
        };
    }
}

// manage Organizations CRUD
service OrganizationService {
    rpc CreateOrganization (CreateOrganizationRequest) returns (CreateOrganizationResponse) {
        option (google.api.http) = {
            post: "/api/v1/organization"
            body: "*"
        };
    }

    rpc GetOrganizations (GetOrganizationsRequest) returns (GetOrganizationsResponse) {
        option (google.api.http) = {
        get: "/api/v1/organizations"
        };
    }

    rpc GetOrganization (GetOrganizationRequest) returns (GetOrganizationResponse) {
        option (google.api.http) = {
            get: "/api/v1/organizations/{organization_id}"
            };    
    }

    rpc GetOrganizationByName (GetOrganizationByNameRequest) returns (GetOrganizationByNameResponse) {
        option (google.api.http) = {
            get: "/api/v1/organizations/name/{name}"
            };    
    }

    rpc DeleteOrganization (DeleteOrganizationRequest) returns (DeleteOrganizationResponse) {
        option (google.api.http) = {
            delete: "/api/v1/organization/{id}"
        };

    }     

}

// manage Groups CRUD
service GroupService {
    rpc CreateGroup (CreateGroupRequest) returns (CreateGroupResponse) {
        option (google.api.http) = {
            post: "/api/v1/group"
            body: "*"
        };
    }

    rpc GetGroups (GetGroupsRequest) returns (GetGroupsResponse) {
        option (google.api.http) = {
            get: "/api/v1/groups/{organization_id}"
        };
    }

    rpc GetGroupByName (GetGroupByNameRequest) returns (GetGroupByNameResponse) {
        option (google.api.http) = {
            get: "/api/v1/group/name/{name}"
        };
    }

    rpc GetGroupById (GetGroupByIdRequest) returns (GetGroupByIdResponse) {
        option (google.api.http) = {
            get: "/api/v1/group/id/{group_id}"
        };
    }

    rpc DeleteGroup (DeleteGroupRequest) returns (DeleteGroupResponse) {
        option (google.api.http) = {
            delete: "/api/v1/group/{id}"
        };

    }     
}

// manage Roles CRUD
service RoleService {
    rpc CreateRole (CreateRoleRequest) returns (CreateRoleResponse) {
        option (google.api.http) = {
            post: "/api/v1/role"
            body: "*"
        };
    }

    rpc DeleteRole (DeleteRoleRequest) returns (DeleteRoleResponse) {
        option (google.api.http) = {
            delete: "/api/v1/role/{id}"
        };

    } 
    
    rpc GetRoles (GetRolesRequest) returns (GetRolesResponse) {
        option (google.api.http) = {
        get: "/api/v1/roles/{group_id}"
        };
    }

    rpc GetRoleById (GetRoleByIdRequest) returns (GetRoleByIdResponse) {
        option (google.api.http) = {
            get: "/api/v1/role/{id}"
            };    
    }

    rpc GetRoleByName (GetRoleByNameRequest) returns (GetRoleByNameResponse) {
        option (google.api.http) = {
            get: "/api/v1/role/name/{name}"
            };    
    }
    
}

// manage Users CRUD
service UserService {
    rpc CreateUser (CreateUserRequest) returns (CreateUserResponse) {
        option (google.api.http) = {
            post: "/api/v1/user"
            body: "*"
        };
    }

    rpc DeleteUser (DeleteUserRequest) returns (DeleteUserResponse) {
        option (google.api.http) = {
            delete: "/api/v1/user/{id}"
        };
    }

    rpc GetUsers (GetUsersRequest) returns (GetUsersResponse) {
        option (google.api.http) = {
        get: "/api/v1/users/{role_id}"
        };
    }

    rpc GetUserById (GetUserByIdRequest) returns (GetUserByIdResponse) {
        option (google.api.http) = {
            get: "/api/v1/user/{id}"
            };    
    }

    rpc GetUserByUserName (GetUserByUserNameRequest) returns (GetUserByUserNameResponse) {
        option (google.api.http) = {
            get: "/api/v1/user/username/{username}"
            };    
    }

    rpc GetUserByEmail (GetUserByEmailRequest) returns (GetUserByEmailResponse) {
        option (google.api.http) = {
            get: "/api/v1/user/email/{email}"
            };    
    }

}

message CheckHealthRequest {
}

message CheckHealthResponse {
    string status = 1;
}

message GetAuthorizationURLRequest {
    string provider = 1;
    bool  cli = 2;
    int32  port = 3;
}

message GetAuthorizationURLResponse {
    string url = 1;
}

message ExchangeCodeForTokenCLIRequest {
    string provider = 1;
    string code = 2;
    string state = 3;
    string redirect_uri = 4;
}

message ExchangeCodeForTokenCLIResponse {
    string html = 1;
}

message ExchangeCodeForTokenWEBRequest{
    string provider = 1;
    string code = 2;
    string redirect_uri = 3;
}

message ExchangeCodeForTokenWEBResponse {
    string access_token = 1;
    string token_type = 2;
    int64  expires_in = 3;
    string status = 4;
}

message LogInRequest {
    string username = 1;
    string password = 2;
}

message LogInResponse {
    Status status = 1;
    string refresh_token = 2;
    string access_token = 3;
    int64  refresh_token_expires_in = 4;
    int64  access_token_expires_in = 5;
}

message Status {
    int32 code = 1;
    string message = 2;
}


message LogOutRequest {
}

message LogOutResponse {
    Status status = 1;
}

message RevokeTokensRequest {
}

message RevokeTokensResponse {
    Status status = 1;
}

message RevokeUserTokenRequest {
    int32 user_id = 1;
}

message RevokeUserTokenResponse {
    Status status = 1;
}

message AuthVerifyServiceVerifyRequest {
}

message AuthVerifyServiceVerifyResponse {
    string status = 1;
}

message GetVulnerabilitiesRequest {
}

message GetVulnerabilityByIdRequest {
  string id = 1;
}

message GetVulnerabilityByIdResponse {
  // May require adjustment, currently set up for GitHub Security Advisories only
  uint64 id = 1;
  int64 github_id = 2;
  int64 repo_id = 3;
  string repo_name = 4;
  string package_name = 5;
  string severity = 6;
  string version_affected = 7;
  string upgrade_version = 8;
  string ghsaid = 9;
  string advisroy_url = 10;
  google.protobuf.Timestamp  scanned_at = 11;
  google.protobuf.Timestamp  created_at = 12;
}

message GetVulnerabilitiesResponse {
  repeated GetVulnerabilityByIdResponse vulns = 1;
}

message GetSecretsRequest {
}

message GetSecretsResponse {
  repeated GetSecretByIdResponse secrets = 1;
}

message GetSecretByIdRequest {
  string id = 1;
}

message GetSecretByIdResponse {
  string id = 1;
  string name = 2;
  string description = 3;
  // Add other relevant fields
}
message GetBranchProtectionRequest {
}

message BranchProtection {
  string branch = 1;
  bool is_protected = 2;
  // Add other relevant fields
}

message GetBranchProtectionResponse {
  repeated BranchProtection branch_protections = 1;
}

// Organization service
message CreateOrganizationRequest {
    string name = 1;
    string company = 2;
    bool create_default_records = 3;
  }
  
message CreateOrganizationResponse {
    int32 id = 1;
    string name = 2;
    string company = 3;
    google.protobuf.Timestamp created_at = 5;
    google.protobuf.Timestamp updated_at = 6;
    optional GroupRecord default_group = 7;
    optional RoleRecord default_role = 8;
    optional UserRecord default_user = 9;
}

message OrganizationRecord {
    int32 id = 1;
    string name = 2;
    string company = 3;
    google.protobuf.Timestamp created_at = 5;
    google.protobuf.Timestamp updated_at = 6;    
}

// DeleteOrganizationRequest represents a request to delete a organization
message DeleteOrganizationRequest {
    int32 id = 1;
    optional bool force = 2;
}

// DeleteOrganizationResponse represents a response to a delete organization request
message DeleteOrganizationResponse {

}

// list organizations
message GetOrganizationsRequest {
    optional int32 limit = 1;
    optional int32 offset = 2;
}

message GetOrganizationsResponse {
    repeated OrganizationRecord organizations = 1;
}

// get organization by id
message GetOrganizationRequest {
    int32 organization_id = 1;
}

message GetOrganizationResponse {
    optional OrganizationRecord organization = 1;
}

// get organization by name
message GetOrganizationByNameRequest {
    string name = 1;
}

message GetOrganizationByNameResponse {
    optional OrganizationRecord organization = 1;
}

// Group service

// The CreateGroupRequest message represents a request to create a group
message CreateGroupRequest {
    int32  organization_id = 1;
    string name = 2;
    string description = 3;
    optional bool is_protected = 4;
}

// The GetGroupByNameRequest message represents a request to get a group by name
message GetGroupByNameRequest {
    string name = 1;
}

// The GetGroupByIdRequest message represents a request to get a group by ID
message GetGroupByIdRequest {
    int32 group_id = 1;
}

// The GetGroupsRequest message represents a request to get an array of groups
message GetGroupsRequest {
    int32 organization_id = 1;
    int32 limit = 2;
    int32 offset = 3;
}

// BUF does not allow grouping (which is a shame)
message GroupRecord {
    int32 group_id = 1;
    int32 organization_id = 2;
    string name = 3;
    string description = 4;
    bool is_protected = 5;
    google.protobuf.Timestamp created_at = 6;
    google.protobuf.Timestamp updated_at = 7;    
}

message  CreateGroupResponse {
    int32 group_id = 1;
    int32 organization_id = 2;
    string name = 3;
    string description = 4;
    bool is_protected = 5;
    google.protobuf.Timestamp created_at = 6;
    google.protobuf.Timestamp updated_at = 7;    
}

message GetGroupByNameResponse {
    optional GroupRecord group = 1;
}

message GetGroupByIdResponse {
    optional GroupRecord group = 1;
}

// The GetGroupsResponse message represents a response with an array of groups
message GetGroupsResponse {
    repeated GroupRecord groups = 1;
}

// DeleteGroupRequest represents a request to delete a group
message DeleteGroupRequest {
    int32 id = 1;
    optional bool force = 2;
}

// DeleteGroupResponse represents a response to a delete group request
message DeleteGroupResponse {

}

// Role service
message CreateRoleRequest {
    int32 group_id = 1;
    string name = 2;
    optional bool is_admin = 3;
    optional bool is_protected = 4;
  }
  
message CreateRoleResponse {
    int32 id = 1;
    int32 group_id = 2;
    string name = 3;
    bool is_admin = 4;
    bool is_protected = 5;
    google.protobuf.Timestamp created_at = 6;
    google.protobuf.Timestamp updated_at = 7;    
}

// delete role
message DeleteRoleRequest {
    int32 id = 1;
    optional bool force = 2;
}

message DeleteRoleResponse {

}

message RoleRecord {
    int32 id = 1;
    int32 group_id = 2;
    string name = 3;
    bool is_admin = 4;
    bool is_protected = 5;
    google.protobuf.Timestamp created_at = 6;
    google.protobuf.Timestamp updated_at = 7;    
}

// list roles
message GetRolesRequest {
    int32 group_id = 1;
    optional int32 limit = 2;
    optional int32 offset = 3;
}

message GetRolesResponse {
    repeated RoleRecord roles = 1;
}

// get role by id
message GetRoleByIdRequest {
    int32 id = 1;
}

message GetRoleByIdResponse {
    optional RoleRecord role = 1;
}

// get role by group and name
message GetRoleByNameRequest {
    int32 group_id = 1;
    string name = 2;
}

message GetRoleByNameResponse {
    optional RoleRecord role = 1;
}


// User service
message CreateUserRequest {
    int32 role_id = 1;
    optional string email = 2;
    string username = 3;
    optional string password = 4;
    optional string first_name = 5;
    optional string last_name = 6;
    optional bool is_protected = 7;
  }
  
message CreateUserResponse {
    int32 id = 1;
    int32 role_id = 2;
    optional string email = 3;
    string username = 4;
    string password = 5;
    optional string first_name = 6;
    optional string last_name = 7;
    optional bool is_protected = 8;
    google.protobuf.Timestamp created_at = 9;
    google.protobuf.Timestamp updated_at = 10;
}

message DeleteUserRequest {
    int32 id = 1;
    optional bool force = 2;
}

message DeleteUserResponse {
}

// user record to be returned
message UserRecord {
    int32 id = 1;
    int32 role_id = 2;
    optional string email = 3;
    string username = 4;
    string password = 5;
    optional string first_name = 6;
    optional string last_name = 7;
    optional bool is_protected = 8;
    google.protobuf.Timestamp created_at = 9;
    google.protobuf.Timestamp updated_at = 10;    
}

// list users
message GetUsersRequest {
    int32 role_id = 1;
    optional int32 limit = 2;
    optional int32 offset = 3;
}

message GetUsersResponse {
    repeated UserRecord users = 1;
}

// get user by id
message GetUserByIdRequest {
    int32 id = 1;
}

message GetUserByIdResponse {
    optional UserRecord user = 1;
}

// get user by username
message GetUserByUserNameRequest {
    string username = 1;
}

message GetUserByUserNameResponse {
    optional UserRecord user = 1;
}

// get user by email
message GetUserByEmailRequest {
    string email = 1;
}

message GetUserByEmailResponse {
    optional UserRecord user = 1;
}
