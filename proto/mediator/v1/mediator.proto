//
// Copyright 2023 Stacklok, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package mediator.v1;
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/struct.proto";
import "google/api/httpbody.proto";


option go_package = "github.com/stacklok/mediator/pkg/generated/protobuf/go";


// Simple Health Check Service
// replies with OK
service HealthService {
    rpc CheckHealth (CheckHealthRequest) returns (CheckHealthResponse) {
        option (google.api.http) = {
            get: "/api/v1/health"
        };
    }
}

service ArtifactService {
    rpc ListArtifacts (ListArtifactsRequest) returns (ListArtifactsResponse) {
        option (google.api.http) = {
            get: "/api/v1/artifacts/{provider}"
        };
    }

    rpc GetArtifactById (GetArtifactByIdRequest) returns (GetArtifactByIdResponse) {
        option (google.api.http) = {
            get: "/api/v1/artifact/{id}"
            };    
    }
}

message ListArtifactsRequest {
    string provider = 1;
    int32 group_id = 2;
}

message ListArtifactsResponse {
    repeated Artifact results = 1;
}

message Artifact {
    int64 artifact_id = 1;
    string owner = 2;
    string name = 3;
    string type = 4;
    string visibility = 5;
    string repository = 6;
    google.protobuf.Timestamp created_at = 7;
}

message GithubWorkflow {
    string name = 1;
    string repository = 2;
    string commit_sha = 3;
    string trigger = 4;
}

message SignatureVerification {
    bool is_signed = 1;
    bool is_verified = 2;
    bool is_bundle_verified = 3;
    optional string cert_identity = 4;
    optional string cert_issuer = 5;
    optional string rekor_log_id = 6;
    optional int32 rekor_log_index = 7;
    optional google.protobuf.Timestamp signature_time = 8;
}

message ArtifactEventPayload {
    int64 artifact_id = 1;
    string artifact_name = 2;
    string artifact_type = 3;
    string owner_login = 4;
    string owner_type = 5;
    int64 version_id = 6;
    string version_sha = 7;
    string tag = 8;
    string package_url = 9;
}

message ArtifactVersion {
    int64 version_id = 1;
    repeated string tags = 2;
    string sha = 3;
    SignatureVerification signature_verification = 4;
    optional GithubWorkflow github_workflow = 5;
    google.protobuf.Timestamp created_at = 6;
}

message GetArtifactByIdRequest {
    int32 id = 1;
    int32 latest_versions = 5;
    string tag = 6;
}

message GetArtifactByIdResponse {
    Artifact artifact = 1;
    repeated ArtifactVersion versions = 2;
}

service OAuthService {
    rpc GetAuthorizationURL (GetAuthorizationURLRequest) returns (GetAuthorizationURLResponse) {
        option (google.api.http) = {
            get: "/api/v1/auth/url"
        };
    }
    // buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
    rpc ExchangeCodeForTokenCLI (ExchangeCodeForTokenCLIRequest) returns (google.api.HttpBody) {  // protolint:disable:this
        option (google.api.http) = {
            get: "/api/v1/auth/callback/{provider}/cli"
        };
    }
    rpc ExchangeCodeForTokenWEB (ExchangeCodeForTokenWEBRequest) returns (ExchangeCodeForTokenWEBResponse) {
        option (google.api.http) = {
            get: "/api/v1/auth/callback/{provider}/web"
        };        
    }

    rpc StoreProviderToken (StoreProviderTokenRequest) returns (StoreProviderTokenResponse) {
        option (google.api.http) = {
            post: "/api/v1/auth/{provider}/token"
            body: "*"
        };
    }

    // revoke all tokens for all users
    rpc RevokeOauthTokens (RevokeOauthTokensRequest) returns (RevokeOauthTokensResponse) {
        option (google.api.http) = {
            post: "/api/v1/auth/{provider}/revoke"
            body: "*"
        };
    }

    // revoke token for a group
    rpc RevokeOauthGroupToken (RevokeOauthGroupTokenRequest) returns (RevokeOauthGroupTokenResponse) {
        option (google.api.http) = {
            post: "/api/v1/auth/{provider}/revoke/{group_id}"
            body: "*"
        };
    }

    // VerifyProviderTokenFrom verifies that a token has been created for a provider since given timestamp
    rpc VerifyProviderTokenFrom (VerifyProviderTokenFromRequest) returns (VerifyProviderTokenFromResponse) {
        option (google.api.http) = {
            get: "/api/v1/auth/verify/{provider}/{timestamp}"
        };
    }

}

service AuthService {
    // LogIn to Mediator
    rpc LogIn (LogInRequest) returns (LogInResponse) {
        option (google.api.http) = {
            post: "/api/v1/auth/login"
            body: "*"
        };
    }

    // Logout of Mediator
    rpc LogOut (LogOutRequest) returns (LogOutResponse) {
        option (google.api.http) = {
            post: "/api/v1/auth/logout"
            body: "*"
        };
    }

    // revoke all tokens for all users
    rpc RevokeTokens (RevokeTokensRequest) returns (RevokeTokensResponse) {
        option (google.api.http) = {
            post: "/api/v1/auth/revoke"
            body: "*"
        };
    }

    // revoke token for an user
    rpc RevokeUserToken (RevokeUserTokenRequest) returns (RevokeUserTokenResponse) {
        option (google.api.http) = {
            post: "/api/v1/auth/revoke/{user_id}"
            body: "*"
        };
    }

    // refresh a token
    rpc RefreshToken (RefreshTokenRequest) returns (RefreshTokenResponse) {
        option (google.api.http) = {
            post: "/api/v1/auth/refresh"
            body: "*"
        };
    }

    // Verify user has active session to Mediator
    rpc Verify (VerifyRequest) returns (VerifyResponse) {
        option (google.api.http) = {
            get: "/api/v1/auth/verify"
        };
    }
}

// Get Vulnerabilities
service VulnerabilitiesService {
    rpc GetVulnerabilities (GetVulnerabilitiesRequest) returns (GetVulnerabilitiesResponse) {
        option (google.api.http) = {
        get: "/api/v1/vulns"
        };
    }

    rpc GetVulnerabilityById (GetVulnerabilityByIdRequest) returns (GetVulnerabilityByIdResponse) {
        option (google.api.http) = {
        get: "/api/v1/vulns/{id}"
        };
    }
}

// Get Secrets
// Note there are different APIs for enterprise or org secrets
// https://docs.github.com/en/rest/secret-scanning?apiVersion=2022-11-28
service SecretsService {
    rpc GetSecrets (GetSecretsRequest) returns (GetSecretsResponse) {
        option (google.api.http) = {
        get: "/api/v1/secrets"
        };
    }

    rpc GetSecretById (GetSecretByIdRequest) returns (GetSecretByIdResponse) {
        option (google.api.http) = {
        get: "/api/v1/secrets/{id}"
        };
    }
}

service RepositoryService {
    rpc SyncRepositories(SyncRepositoriesRequest) returns (SyncRepositoriesResponse) {
        option (google.api.http) = {
            post: "/api/v1/repositories/provider/{provider}/sync"
            body: "*"
        };
    }
    rpc RegisterRepository (RegisterRepositoryRequest) returns (RegisterRepositoryResponse) {
        option (google.api.http) = {
            post: "/api/v1/repository/provider/{provider}/register"
            body: "*"
        };
    }
    rpc ListRepositories (ListRepositoriesRequest) returns (ListRepositoriesResponse) {
        option (google.api.http) = {
            get: "/api/v1/repositories/provider/{provider}"
        };
    }
    rpc GetRepositoryById (GetRepositoryByIdRequest) returns (GetRepositoryByIdResponse) {
        option (google.api.http) = {
            get: "/api/v1/repository/id/{repository_id}"
        };
    }

    rpc GetRepositoryByName (GetRepositoryByNameRequest) returns (GetRepositoryByNameResponse) {
        option (google.api.http) = {
            get: "/api/v1/repository/provider/{provider}/name/{name}"
        };
    }
}

// Get Branch Protection Settings
service BranchProtectionService {
    rpc GetBranchProtection (GetBranchProtectionRequest) returns (GetBranchProtectionResponse) {
        option (google.api.http) = {
        get: "/api/v1/branchprotection"
        };
    }
}

// manage Organizations CRUD
service OrganizationService {
    rpc CreateOrganization (CreateOrganizationRequest) returns (CreateOrganizationResponse) {
        option (google.api.http) = {
            post: "/api/v1/organization"
            body: "*"
        };
    }

    rpc GetOrganizations (GetOrganizationsRequest) returns (GetOrganizationsResponse) {
        option (google.api.http) = {
        get: "/api/v1/organizations"
        };
    }

    rpc GetOrganization (GetOrganizationRequest) returns (GetOrganizationResponse) {
        option (google.api.http) = {
            get: "/api/v1/organizations/{organization_id}"
            };    
    }

    rpc GetOrganizationByName (GetOrganizationByNameRequest) returns (GetOrganizationByNameResponse) {
        option (google.api.http) = {
            get: "/api/v1/organizations/name/{name}"
            };    
    }

    rpc DeleteOrganization (DeleteOrganizationRequest) returns (DeleteOrganizationResponse) {
        option (google.api.http) = {
            delete: "/api/v1/organization/{id}"
        };

    }     

}

// manage Groups CRUD
service GroupService {
    rpc CreateGroup (CreateGroupRequest) returns (CreateGroupResponse) {
        option (google.api.http) = {
            post: "/api/v1/group"
            body: "*"
        };
    }

    rpc GetGroups (GetGroupsRequest) returns (GetGroupsResponse) {
        option (google.api.http) = {
            get: "/api/v1/groups/{organization_id}"
        };
    }

    rpc GetGroupByName (GetGroupByNameRequest) returns (GetGroupByNameResponse) {
        option (google.api.http) = {
            get: "/api/v1/group/name/{name}"
        };
    }

    rpc GetGroupById (GetGroupByIdRequest) returns (GetGroupByIdResponse) {
        option (google.api.http) = {
            get: "/api/v1/group/id/{group_id}"
        };
    }

    rpc DeleteGroup (DeleteGroupRequest) returns (DeleteGroupResponse) {
        option (google.api.http) = {
            delete: "/api/v1/group/{id}"
        };

    }     
}

// manage Roles CRUD
service RoleService {
    rpc CreateRoleByOrganization (CreateRoleByOrganizationRequest) returns (CreateRoleByOrganizationResponse) {
        option (google.api.http) = {
            post: "/api/v1/role/organization"
            body: "*"
        };
    }
    rpc CreateRoleByGroup (CreateRoleByGroupRequest) returns (CreateRoleByGroupResponse) {
        option (google.api.http) = {
            post: "/api/v1/role/group"
            body: "*"
        };
    }

    rpc DeleteRole (DeleteRoleRequest) returns (DeleteRoleResponse) {
        option (google.api.http) = {
            delete: "/api/v1/role/{id}"
        };

    } 
    
    rpc GetRoles (GetRolesRequest) returns (GetRolesResponse) {
        option (google.api.http) = {
        get: "/api/v1/roles/{organization_id}"
        };
    }

    rpc GetRolesByGroup (GetRolesByGroupRequest) returns (GetRolesByGroupResponse) {
        option (google.api.http) = {
        get: "/api/v1/roles/group/{group_id}"
        };
    }

    rpc GetRoleById (GetRoleByIdRequest) returns (GetRoleByIdResponse) {
        option (google.api.http) = {
            get: "/api/v1/role/{id}"
            };    
    }

    rpc GetRoleByName (GetRoleByNameRequest) returns (GetRoleByNameResponse) {
        option (google.api.http) = {
            get: "/api/v1/role/name/{name}"
            };    
    }
    
}

// manage Users CRUD
service UserService {
    rpc CreateUser (CreateUserRequest) returns (CreateUserResponse) {
        option (google.api.http) = {
            post: "/api/v1/user"
            body: "*"
        };
    }

    rpc DeleteUser (DeleteUserRequest) returns (DeleteUserResponse) {
        option (google.api.http) = {
            delete: "/api/v1/user/{id}"
        };
    }

    rpc GetUsers (GetUsersRequest) returns (GetUsersResponse) {
        option (google.api.http) = {
        get: "/api/v1/users"
        };
    }

    rpc GetUsersByOrganization (GetUsersByOrganizationRequest) returns (GetUsersByOrganizationResponse) {
        option (google.api.http) = {
        get: "/api/v1/users/{organization_id}"
        };
    }

    rpc GetUsersByGroup (GetUsersByGroupRequest) returns (GetUsersByGroupResponse) {
        option (google.api.http) = {
        get: "/api/v1/users/{group_id}"
        };
    }

    rpc GetUserById (GetUserByIdRequest) returns (GetUserByIdResponse) {
        option (google.api.http) = {
            get: "/api/v1/user/{id}"
            };    
    }

    rpc GetUserByUserName (GetUserByUserNameRequest) returns (GetUserByUserNameResponse) {
        option (google.api.http) = {
            get: "/api/v1/user/username/{username}"
            };    
    }

    rpc GetUser (GetUserRequest) returns (GetUserResponse) {
        option (google.api.http) = {
            get: "/api/v1/user"
            };
    }

    rpc GetUserByEmail (GetUserByEmailRequest) returns (GetUserByEmailResponse) {
        option (google.api.http) = {
            get: "/api/v1/user/email/{email}"
            };    
    }

    rpc UpdatePassword (UpdatePasswordRequest) returns (UpdatePasswordResponse) {
        option (google.api.http) = {
            post: "/api/v1/user/password"
            body: "*"
        };
    }

    rpc UpdateProfile (UpdateProfileRequest) returns (UpdateProfileResponse) {
        option (google.api.http) = {
            post: "/api/v1/user/profile"
            body: "*"
        };
    }

}

service PolicyService {
    rpc CreatePolicy (CreatePolicyRequest) returns (CreatePolicyResponse) {
        option (google.api.http) = {
            post: "/api/v1/policy"
            body: "*"
        };
    }

    rpc DeletePolicy (DeletePolicyRequest) returns (DeletePolicyResponse) {
        option (google.api.http) = {
            delete: "/api/v1/policy/{id}"
        };
    }

    rpc ListPolicies (ListPoliciesRequest) returns (ListPoliciesResponse) {
        option (google.api.http) = {
        get: "/api/v1/policies"
        };
    }

    rpc GetPolicyById (GetPolicyByIdRequest) returns (GetPolicyByIdResponse) {
        option (google.api.http) = {
            get: "/api/v1/policy/{id}"
            };    
    }

    rpc GetPolicyStatusById (GetPolicyStatusByIdRequest) returns (GetPolicyStatusByIdResponse) {
        option (google.api.http) = {
            get: "/api/v1/policy/{policy_id}/status"
            };    
    }

    rpc GetPolicyStatusByGroup (GetPolicyStatusByGroupRequest) returns (GetPolicyStatusByGroupResponse) {
        option (google.api.http) = {
            get: "/api/v1/policy_status"
            };    
    }    

    rpc ListRuleTypes (ListRuleTypesRequest) returns (ListRuleTypesResponse) {
        option (google.api.http) = {
            get: "/api/v1/rule_types"
            };    
    }

    rpc GetRuleTypeByName (GetRuleTypeByNameRequest) returns (GetRuleTypeByNameResponse) {
        option (google.api.http) = {
            get: "/api/v1/rule_type/name/{name}"
            };    
    }

    rpc GetRuleTypeById (GetRuleTypeByIdRequest) returns (GetRuleTypeByIdResponse) {
        option (google.api.http) = {
            get: "/api/v1/rule_type/{id}"
            };    
    }

    rpc CreateRuleType (CreateRuleTypeRequest) returns (CreateRuleTypeResponse) {
        option (google.api.http) = {
            post: "/api/v1/rule_type"
            body: "*"
        };
    }

    rpc UpdateRuleType (UpdateRuleTypeRequest) returns (UpdateRuleTypeResponse) {
        option (google.api.http) = {
            put: "/api/v1/rule_type"
            body: "*"
        };
    }

    rpc DeleteRuleType (DeleteRuleTypeRequest) returns (DeleteRuleTypeResponse) {
        option (google.api.http) = {
            delete: "/api/v1/rule_type/{id}"
        };
    }
}

service KeyService {
    rpc GetPublicKey (GetPublicKeyRequest) returns (GetPublicKeyResponse) {
        option (google.api.http) = {
            get: "/api/v1/key"
        };
    }
    rpc CreateKeyPair (CreateKeyPairRequest) returns (CreateKeyPairResponse) {
        option (google.api.http) = {
            post: "/api/v1/key"
            body: "*"
        };
    }
}

message CheckHealthRequest {
}

message CheckHealthResponse {
    string status = 1;
}

message GetAuthorizationURLRequest {
    string provider = 1;
    int32 group_id = 2;
    bool  cli = 3;
    int32  port = 4;
    optional string owner = 5;
}

message GetAuthorizationURLResponse {
    string url = 1;
}

message ExchangeCodeForTokenCLIRequest {
    string provider = 1;
    int32 group_id = 2;
    string code = 3;
    string state = 4;
    string redirect_uri = 5;
}

message StoreProviderTokenRequest {
    string provider = 1;
    int32 group_id = 2;
    string access_token = 3;
    optional string owner = 4;
}

message StoreProviderTokenResponse {    
}

message ExchangeCodeForTokenWEBRequest{
    string provider = 1;
    int32 group_id = 2;
    string code = 3;
    string redirect_uri = 4;
}

message ExchangeCodeForTokenWEBResponse {
    string access_token = 1;
    string token_type = 2;
    int64  expires_in = 3;
    string status = 4;
}

message LogInRequest {
    string username = 1;
    string password = 2;
}

message LogInResponse {
    string refresh_token = 2;
    string access_token = 3;
    int64  refresh_token_expires_in = 4;
    int64  access_token_expires_in = 5;
}

message LogOutRequest {
}

message LogOutResponse {
}

message RevokeTokensRequest {
}

message RevokeTokensResponse {
}

message RevokeUserTokenRequest {
    int32 user_id = 1;
}

message RevokeUserTokenResponse {
}

message RevokeOauthTokensRequest {
    string provider = 1;
}

message RevokeOauthTokensResponse {
    int32 revoked_tokens = 1;
}

message RevokeOauthGroupTokenRequest {
    string provider = 1;
    int32 group_id = 2;
}

message RevokeOauthGroupTokenResponse {
}

message RefreshTokenRequest {    
}

message RefreshTokenResponse {
    string access_token = 2;
    int64  access_token_expires_in = 3;
}

message SyncRepositoriesRequest {
    string provider = 1;
    int32 group_id = 2;
}

message SyncRepositoriesResponse {

}

message RegisterRepositoryRequest {
    string provider = 1;
    int32 group_id = 2;
    repeated Repositories repositories = 3;
    repeated string events = 4;
}

message Repositories {
    string owner = 1;
    string name = 2;
    int32 repo_id = 3;
}

message RepositoryResult {
    string owner = 1;
    string repository = 2;
    int32 repo_id = 3;
    int64 hook_id = 4;
    string hook_url = 5;
    string deploy_url = 6;
    google.protobuf.Timestamp created_at = 7;
    google.protobuf.Timestamp updated_at = 8;
    string hook_name = 9;
    string hook_type = 10;
    bool success = 11;
    string uuid = 12;
    google.protobuf.StringValue error = 13;
    bool registered = 14;
}

message RegisterRepositoryResponse {
    repeated RepositoryResult results = 1;
}

// RepositoryRecord is used for registering repositories.
message RepositoryRecord {
    int32 id = 1;
    string provider = 2;
    int32 group_id = 3;
    string owner = 4;
    string name = 5;
    int32 repo_id = 6;
    bool is_private = 7;
    bool is_fork = 8;
    string hook_url = 9;
    string deploy_url = 10;
    google.protobuf.Timestamp created_at = 11;
    google.protobuf.Timestamp updated_at = 12;
}

message GetRepositoryByIdRequest {
    int32 repository_id = 1;
}

message GetRepositoryByIdResponse {
    RepositoryRecord repository = 1;
}

message GetRepositoryByNameRequest {
    string provider = 1;
    string name = 3;
}

message GetRepositoryByNameResponse {
    RepositoryRecord repository = 1;
}

// Repo filter enum
enum RepoFilter {
    REPO_FILTER_SHOW_UNSPECIFIED = 0;
    REPO_FILTER_SHOW_ALL = 1;
    REPO_FILTER_SHOW_NOT_REGISTERED_ONLY = 2;
    REPO_FILTER_SHOW_REGISTERED_ONLY = 3;
}

message ListRepositoriesRequest {
    string provider = 1;
    int32 group_id = 2;
    int32 limit = 3;
    int32 offset = 4;
    RepoFilter filter = 5;
}

message ListRepositoriesResponse {
    repeated RepositoryRecord results = 1;
}

message VerifyRequest {
}

message VerifyResponse {
    string status = 1;
}

message VerifyProviderTokenFromRequest {
    string provider = 1;
    int32 group_id = 2;
    google.protobuf.Timestamp timestamp = 3;
}

message VerifyProviderTokenFromResponse {
    string status = 1;
}

message GetVulnerabilitiesRequest {
}

message GetVulnerabilityByIdRequest {
  string id = 1;
}

message GetVulnerabilityByIdResponse {
  // May require adjustment, currently set up for GitHub Security Advisories only
  uint64 id = 1;
  int64 github_id = 2;
  int64 repo_id = 3;
  string repo_name = 4;
  string package_name = 5;
  string severity = 6;
  string version_affected = 7;
  string upgrade_version = 8;
  string ghsaid = 9;
  string advisroy_url = 10;
  google.protobuf.Timestamp  scanned_at = 11;
  google.protobuf.Timestamp  created_at = 12;
}

message GetVulnerabilitiesResponse {
  repeated GetVulnerabilityByIdResponse vulns = 1;
}

message GetSecretsRequest {
}

message GetSecretsResponse {
  repeated GetSecretByIdResponse secrets = 1;
}

message GetSecretByIdRequest {
  string id = 1;
}

message GetSecretByIdResponse {
  string id = 1;
  string name = 2;
  string description = 3;
  // Add other relevant fields
}
message GetBranchProtectionRequest {
}

message BranchProtection {
  string branch = 1;
  bool is_protected = 2;
  // Add other relevant fields
}

message GetBranchProtectionResponse {
  repeated BranchProtection branch_protections = 1;
}

// Organization service
message CreateOrganizationRequest {
    string name = 1;
    string company = 2;
    bool create_default_records = 3;
  }
  
message CreateOrganizationResponse {
    int32 id = 1;
    string name = 2;
    string company = 3;
    google.protobuf.Timestamp created_at = 5;
    google.protobuf.Timestamp updated_at = 6;
    optional GroupRecord default_group = 7;
    repeated RoleRecord default_roles = 8;
    optional UserRecord default_user = 9;
}

message OrganizationRecord {
    int32 id = 1;
    string name = 2;
    string company = 3;
    google.protobuf.Timestamp created_at = 5;
    google.protobuf.Timestamp updated_at = 6;    
}

// DeleteOrganizationRequest represents a request to delete a organization
message DeleteOrganizationRequest {
    int32 id = 1;
    optional bool force = 2;
}

// DeleteOrganizationResponse represents a response to a delete organization request
message DeleteOrganizationResponse {

}

// list organizations
message GetOrganizationsRequest {
    optional int32 limit = 1;
    optional int32 offset = 2;
}

message GetOrganizationsResponse {
    repeated OrganizationRecord organizations = 1;
}

// get organization by id
message GetOrganizationRequest {
    int32 organization_id = 1;
}

message GetOrganizationResponse {
    optional OrganizationRecord organization = 1;
    repeated GroupRecord groups = 2;
    repeated RoleRecord roles = 3;
    repeated UserRecord users = 4;
}

// get organization by name
message GetOrganizationByNameRequest {
    string name = 1;
}

message GetOrganizationByNameResponse {
    optional OrganizationRecord organization = 1;
    repeated GroupRecord groups = 2;
    repeated RoleRecord roles = 3;
    repeated UserRecord users = 4;
}

// Group service

// The CreateGroupRequest message represents a request to create a group
message CreateGroupRequest {
    int32  organization_id = 1;
    string name = 2;
    string description = 3;
    optional bool is_protected = 4;
}

// The GetGroupByNameRequest message represents a request to get a group by name
message GetGroupByNameRequest {
    string name = 1;
}

// The GetGroupByIdRequest message represents a request to get a group by ID
message GetGroupByIdRequest {
    int32 group_id = 1;
}

// The GetGroupsRequest message represents a request to get an array of groups
message GetGroupsRequest {
    int32 organization_id = 1;
    int32 limit = 2;
    int32 offset = 3;
}

// BUF does not allow grouping (which is a shame)
message GroupRecord {
    int32 group_id = 1;
    int32 organization_id = 2;
    string name = 3;
    string description = 4;
    bool is_protected = 5;
    google.protobuf.Timestamp created_at = 6;
    google.protobuf.Timestamp updated_at = 7;    
}

message  CreateGroupResponse {
    int32 group_id = 1;
    int32 organization_id = 2;
    string name = 3;
    string description = 4;
    bool is_protected = 5;
    google.protobuf.Timestamp created_at = 6;
    google.protobuf.Timestamp updated_at = 7;    
}

message GetGroupByNameResponse {
    optional GroupRecord group = 1;
    repeated RoleRecord roles = 2;
    repeated UserRecord users = 3;
}

message GetGroupByIdResponse {
    optional GroupRecord group = 1;
    repeated RoleRecord roles = 2;
    repeated UserRecord users = 3;
}

// The GetGroupsResponse message represents a response with an array of groups
message GetGroupsResponse {
    repeated GroupRecord groups = 1;
}

// DeleteGroupRequest represents a request to delete a group
message DeleteGroupRequest {
    int32 id = 1;
    optional bool force = 2;
}

// DeleteGroupResponse represents a response to a delete group request
message DeleteGroupResponse {

}

// Role service
message CreateRoleByOrganizationRequest {
    int32 organization_id = 1;
    string name = 3;
    optional bool is_admin = 4;
    optional bool is_protected = 5;
  }
  
message CreateRoleByOrganizationResponse {
    int32 id = 1;
    int32 organization_id = 2;
    string name = 4;
    bool is_admin = 5;
    bool is_protected = 6;
    google.protobuf.Timestamp created_at = 7;
    google.protobuf.Timestamp updated_at = 8;    
}

message CreateRoleByGroupRequest {
    int32 organization_id = 1;
    int32 group_id = 2;
    string name = 3;
    optional bool is_admin = 4;
    optional bool is_protected = 5;
  }
  
message CreateRoleByGroupResponse {
    int32 id = 1;
    int32 organization_id = 2;
    int32 group_id = 3;
    string name = 4;
    bool is_admin = 5;
    bool is_protected = 6;
    google.protobuf.Timestamp created_at = 7;
    google.protobuf.Timestamp updated_at = 8;    
}

// delete role
message DeleteRoleRequest {
    int32 id = 1;
    optional bool force = 2;
}

message DeleteRoleResponse {

}

message RoleRecord {
    int32 id = 1;
    int32 organization_id = 2;
    optional int32 group_id = 3;
    string name = 4;
    bool is_admin = 5;
    bool is_protected = 6;
    google.protobuf.Timestamp created_at = 7;
    google.protobuf.Timestamp updated_at = 8;    
}

// list roles
message GetRolesRequest {
    int32 organization_id = 1;
    optional int32 limit = 2;
    optional int32 offset = 3;
}

message GetRolesResponse {
    repeated RoleRecord roles = 1;
}

message GetRolesByGroupRequest {
    int32 group_id = 1;
    optional int32 limit = 2;
    optional int32 offset = 3;
}

message GetRolesByGroupResponse {
    repeated RoleRecord roles = 1;
}

// get role by id
message GetRoleByIdRequest {
    int32 id = 1;
}

message GetRoleByIdResponse {
    optional RoleRecord role = 1;
}

// get role by group and name
message GetRoleByNameRequest {
    int32 organization_id = 1;
    string name = 2;
}

message GetRoleByNameResponse {
    optional RoleRecord role = 1;
}


// User service
message CreateUserRequest {
    int32 organization_id = 1;
    optional string email = 2;
    string username = 3;
    optional string password = 4;
    optional string first_name = 5;
    optional string last_name = 6;
    optional bool is_protected = 7;
    optional bool needs_password_change = 8;
    repeated int32 group_ids = 9;
    repeated int32 role_ids = 10;
  }
  
message CreateUserResponse {
    int32 id = 1;
    int32 organization_id = 2;
    optional string email = 3;
    string username = 4;
    string password = 5;
    optional string first_name = 6;
    optional string last_name = 7;
    optional bool is_protected = 8;
    optional bool needs_password_change = 9;
    google.protobuf.Timestamp created_at = 10;
    google.protobuf.Timestamp updated_at = 11;
}

message DeleteUserRequest {
    int32 id = 1;
    optional bool force = 2;
}

message DeleteUserResponse {
}

message UpdatePasswordRequest {
    string password = 1;
    string password_confirmation = 2;
}

message UpdatePasswordResponse {
}

message UpdateProfileRequest {
    optional string email = 1;
    optional string first_name = 2;
    optional string last_name = 3;
}

message UpdateProfileResponse {
}

// user record to be returned
message UserRecord {
    int32 id = 1;
    int32 organization_id = 2;
    optional string email = 3;
    string username = 4;
    string password = 5;
    optional string first_name = 6;
    optional string last_name = 7;
    optional bool is_protected = 8;
    optional bool needs_password_change = 9;
    google.protobuf.Timestamp created_at = 10;
    google.protobuf.Timestamp updated_at = 11;    
}

// list users
message GetUsersRequest {
    optional int32 limit = 3;
    optional int32 offset = 4;
}

message GetUsersResponse {
    repeated UserRecord users = 1;
}

message GetUsersByOrganizationRequest {
    int32 organization_id = 1;
    optional int32 limit = 2;
    optional int32 offset = 3;
}

message GetUsersByOrganizationResponse {
    repeated UserRecord users = 1;
}

message GetUsersByGroupRequest {
    int32 group_id = 1;
    optional int32 limit = 2;
    optional int32 offset = 3;
}

message GetUsersByGroupResponse {
    repeated UserRecord users = 1;
}

// get user by id
message GetUserByIdRequest {
    int32 id = 1;
}

message GetUserByIdResponse {
    optional UserRecord user = 1;
    repeated GroupRecord groups = 2;
    repeated RoleRecord roles = 3;
}

// get user by username
message GetUserByUserNameRequest {
    string username = 1;
}

message GetUserByUserNameResponse {
    optional UserRecord user = 1;
    repeated GroupRecord groups = 2;
    repeated RoleRecord roles = 3;
}

// get user by email
message GetUserByEmailRequest {
    string email = 1;
}

message GetUserByEmailResponse {
    optional UserRecord user = 1;
    repeated GroupRecord groups = 2;
    repeated RoleRecord roles = 3;
}

// get user
message GetUserRequest {
}

message GetUserResponse {
    optional UserRecord user = 1;
    repeated GroupRecord groups = 2;
    repeated RoleRecord roles = 3;
}

// Policy service
message CreatePolicyRequest {
    PipelinePolicy policy = 1;
}
  
message CreatePolicyResponse {
    PipelinePolicy policy = 1;
}

message DeletePolicyRequest {
    // context is the context in which the rule type is evaluated.
    Context context = 1;
    // id is the id of the policy to delete
    int32 id = 2;
}

message DeletePolicyResponse {
}

// list policies
message ListPoliciesRequest {
    // context is the context which contains the policies
    Context context = 1;
}

message ListPoliciesResponse {
    repeated PipelinePolicy policies = 1;
}

// get policy by id
message GetPolicyByIdRequest {
    // context is the context which contains the policies
    Context context = 1;
    // id is the id of the policy to get
    int32 id = 2;
}

message GetPolicyByIdResponse {
    PipelinePolicy policy = 1;
}

// get the overall policy status
message PolicyStatus {
    // policy_id is the id of the policy
    int32 policy_id = 1;
    // policy_name is the name of the policy
    string policy_name = 2;
    // policy_status is the status of the policy
    string policy_status = 3;
    // last_updated is the last time the policy was updated
    google.protobuf.Timestamp last_updated = 4;
}

// get the status of the rules for a given policy
message RuleEvaluationStatus {
    // policy_id is the id of the policy
    int32 policy_id = 1;
    // rule_id is the id of the rule
    int32 rule_id = 2;
    // rule_name is the name of the rule
    string rule_name = 3;
    // entity is the entity that was evaluated
    string entity = 4;
    // status is the status of the evaluation
    string status = 5;
    // last_updated is the last time the policy was updated
    google.protobuf.Timestamp last_updated = 6;
    // entity_info is the information about the entity
    map<string, string> entity_info = 7;
    // details is the description of the evaluation if any
    string details = 8;
}

message GetPolicyStatusByIdRequest {
    // context is the context in which the rule type is evaluated.
    Context context = 1;
    // policy_id is the id of the policy to get
    int32 policy_id = 2;

    // EntiryTypeId is a message that carries an ID together with a type to uniquely identify an entity
    // such as (repo, 1), (artifact, 2), ...
    // if the struct is reused in other messages, it should be moved to a top-level definition
    message EntityTypedId {
        // entity is the entity to get status for. Incompatible with `all`
        Entity type = 1;
        // repo_id is the id of the repo to get status for. Incompatible with `all`
        int32 id = 2;
    }

    oneof entity_selector {
        EntityTypedId entity = 3;
        bool all = 4;
    }
}

message GetPolicyStatusByIdResponse {
    // policy_status is the status of the policy
    PolicyStatus policy_status = 1;

    // rule_evaluation_status is the status of the rules
    repeated RuleEvaluationStatus rule_evaluation_status = 2;
}

message GetPolicyStatusByGroupRequest {
    // context is the context in which the rule type is evaluated.
    Context context = 1;
}

message GetPolicyStatusByGroupResponse {
    // policy_status is the status of the policy
    repeated PolicyStatus policy_status = 1;
}

message GetPublicKeyRequest {
    string key_identifier = 1;
}

message GetPublicKeyResponse {
    string public_key = 1;
}

message CreateKeyPairRequest {
    string passphrase = 1;
    int32 group_id = 2;
}

message CreateKeyPairResponse {
    string key_identifier = 1;
    string public_key = 2;
}

// Entity defines the entity that is supported by the provider.
enum Entity {
    ENTITY_UNSPECIFIED = 0;
    ENTITY_REPOSITORIES = 1;
    ENTITY_BUILD_ENVIRONMENTS = 2;
    ENTITY_ARTIFACTS = 3;
}

// Provider defines a provider that is used to connect to a certain service.
// This is used to define the context in which a rule is evaluated and serves
// as a data ingestion point. They are top level entities and are scoped to
// an organization.
message Provider {
    string name = 1;

    // Context defines the context in which a provider is evaluated.
    // Given thta a provider is a top level entity, it may only be scoped to
    // an organization.
    message Context {
        string organization = 1;
        string group = 2;
    }

    Context context = 2;

    // Definition defines the definition of the provider.
    // This is used to define the connection to the provider.
    message Definition {
        string endpoint = 1;

        // Auth defines the authentication mechanism to be used.
        message Auth {
            enum Type {
                TYPE_UNSPECIFIED = 0;
                // TYPE_OAUTH2 defines the OAuth2 authentication mechanism.
                TYPE_OAUTH2 = 1;
                // These are left as references of what we could implement
                // BASIC = 2;
                // TOKEN = 3;
            }

            Type type = 1;

            // OAuth2 defines the OAuth2 authentication mechanism.
            message OAuth2 {
                string client_id = 1;
                string client_secret = 2;
                string redirect_uri = 3;
                string auth_url = 4;
                string token_url = 5;
                string scope = 6;
            }

            optional OAuth2 oauth2 = 2;
        }

        Auth auth = 2;

        // ClientTypes defines the client types that are supported by the provider.
        // This is used to define the types of clients that are supported by the provider.
        message ClientTypes {
            // Type defines the type of client that is supported by the provider.
            enum Type {
                TYPE_UNSPECIFIED = 0;
                TYPE_REST = 1;
                TYPE_GRAPHQL = 2;
            }

            repeated Type types = 1;
        }

        // ClientTypes defines the client types that are supported by the provider.
        ClientTypes client_types = 3;

        // entities defines the entities that are supported by the provider.
        repeated Entity entities = 4;
    }

    Definition def = 3;
}

// Context defines the context in which a rule is evaluated.
// this normally refers to a combination of the provider, organization and group.
message Context {
    string provider = 1;
    optional string organization = 2;
    optional string group = 3;
}

// --- START RuleType CRUD definitions

// ListRuleTypesRequest is the request to list rule types.
message ListRuleTypesRequest {
    // context is the context in which the rule types are evaluated.
    Context context = 1;
}

// ListRuleTypesResponse is the response to list rule types.
message ListRuleTypesResponse {
    // rule_types is the list of rule types.
    repeated RuleType rule_types = 1;
}

// GetRuleTypeByNameRequest is the request to get a rule type by name.
message GetRuleTypeByNameRequest {
    // context is the context in which the rule type is evaluated.
    Context context = 1;
    // name is the name of the rule type.
    string name = 2;
}

// GetRuleTypeByNameResponse is the response to get a rule type by name.
message GetRuleTypeByNameResponse {
    // rule_type is the rule type.
    RuleType rule_type = 1;
}

// GetRuleTypeByIdRequest is the request to get a rule type by id.
message GetRuleTypeByIdRequest {
    // context is the context in which the rule type is evaluated.
    Context context = 1;
    // id is the id of the rule type.
    int32 id = 2;
}

// GetRuleTypeByIdResponse is the response to get a rule type by id.
message GetRuleTypeByIdResponse {
    // rule_type is the rule type.
    RuleType rule_type = 1;
}

// CreateRuleTypeRequest is the request to create a rule type.
message CreateRuleTypeRequest {
    // rule_type is the rule type to be created.
    RuleType rule_type = 1;
}

// CreateRuleTypeResponse is the response to create a rule type.
message CreateRuleTypeResponse {
    // rule_type is the rule type that was created.
    RuleType rule_type = 1;
}

// UpdateRuleTypeRequest is the request to update a rule type.
message UpdateRuleTypeRequest {
    // rule_type is the rule type to be updated.
    RuleType rule_type = 2;
}

// UpdateRuleTypeResponse is the response to update a rule type.
message UpdateRuleTypeResponse {
    // rule_type is the rule type that was updated.
    RuleType rule_type = 1;
}

// DeleteRuleTypeRequest is the request to delete a rule type.
message DeleteRuleTypeRequest {
    // context is the context in which the rule type is evaluated.
    Context context = 1;
    // id is the id of the rule type to be deleted.
    int32 id = 2;
}

// DeleteRuleTypeResponse is the response to delete a rule type.
message DeleteRuleTypeResponse {
}

// --- END RuleType CRUD definitions

// RestType defines the rest data evaluation.
// This is used to fetch data from a REST endpoint.
message RestType {
    // endpoint is the endpoint to fetch data from.
    // This can be a URL or the path on the API.bool
    // This is a required field and must be set.
    // This is also evaluated via a template which allows
    // us dynamically fill in the values.
    string endpoint = 1;

    // method is the method to use to fetch data.
    string method = 2;

    // headers are the headers to be sent to the endpoint.
    repeated string headers = 3;

    // body is the body to be sent to the endpoint.
    optional string body = 4;

    // parse is the parsing mechanism to be used to parse the data.
    string parse = 5;
}

// BuiltinType defines the builtin data evaluation.
message BuiltinType {
    string method = 1;
}

// RuleType defines rules that may or may not be user defined.
// The version is assumed from the folder's version.
message RuleType {
    // id is the id of the rule type.
    // This is mostly optional and is set by the server.
    optional int32 id = 1;

    // name is the name of the rule type.
    string name = 2;

    // context is the context in which the rule is evaluated.
    Context context = 3;
    
    // Definition defines the rule type. It encompases the schema and the data evaluation.
    message Definition {
        // in_entity is the entity in which the rule is evaluated.
        // This can be repository, build_environment or artifact.
        Entity in_entity = 1;

        // rule_schema is the schema of the rule. This is expressed in JSON Schema.
        map<string, google.protobuf.Struct> rule_schema = 2;

        // DataEval defines how the data is evaluated.
        message DataEval {
            // type is the type of the data evaluation.
            // we currently support rest.
            string type = 1;

            // rest is the rest data evaluation.
            // this is only used if the type is rest.
            optional RestType rest = 3;

            // builtin is the builtin data evaluation.
            optional BuiltinType builtin = 4;

            // key_type is the type of the key for each data item.
            // This is used to index the data.
            // Currently only `jq` is supported.
            string key_type = 5;

            // DataEvalDef defines the data evaluation definition.
            // This pertains to the way we traverse data from the upstream
            // endpoint and how we compare it to the rule.
            // the type is the way we traverse and evaluate the data from the
            // upstream endpoint. The def is the definition of the data evaluation.
            // e.g. the actual jq expression.
            message DataEvalDef {
                // type is the type of the data evaluation.
                string type = 1;

                // def is the definition of the data evaluation.
                string def = 2;
            }

            // data is the data evaluation definition.
            // each key is a piece of data coming from the policy
            // to be evaluated. The value is the definition of the data evaluation.
            map<string, DataEvalDef> data = 6;
        }
        DataEval data_eval = 3;
    }

    // def is the definition of the rule type.
    Definition def = 4;

    message RuleTypeParam {
        string name = 1;
        string type = 2;
        string description = 3;
    }

    message RuleTypeParams {
        repeated RuleTypeParam entries = 1;
    }

    optional RuleTypeParams params = 5;
}

 // PipelinePolicy defines a policy that is user defined.
 message PipelinePolicy {
    // context is the context in which the policy is evaluated.
    Context context = 1;

    // id is the id of the policy.
    // This is optional and is set by the system.
    optional int32 id = 2;

    // name is the name of the policy instance.
    string name = 3;

    // Rule defines the individual call of a certain rule type.
    message Rule {
        // type is the type of the rule to be instantiated.
        string type = 1;
        // params are the parameters that are passed to the rule.
        // This is optional and depends on the rule type.
        google.protobuf.Struct params = 2;
        // def is the definition of the rule.
        // This depends on the rule type.
        google.protobuf.Struct def = 3;
    }

    // ContextualRuleSet defines a set of rules that are evaluated in a certain context.
    message ContextualRuleSet {
        // context is the context in which the rules are evaluated.
        // This refers to the provider.
        optional string context = 1;
        // rule is the set of rules that are evaluated.
        repeated Rule rules = 2;
    }

    // These are the entities that one could set in the pipeline policy.
    repeated ContextualRuleSet repository = 4;
    repeated ContextualRuleSet build_environment = 5;
    repeated ContextualRuleSet artifact = 6;
 }
