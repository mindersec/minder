// SPDX-FileCopyrightText: Copyright 2023 The Minder Authors
// SPDX-License-Identifier: Apache-2.0


syntax = "proto3";
package minder.v1;
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/descriptor.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/field_mask.proto";
import "buf/validate/validate.proto";

option go_package = "github.com/mindersec/minder/pkg/api/protobuf/go/minder/v1";

enum ObjectOwner {
    OBJECT_OWNER_UNSPECIFIED = 0;
    OBJECT_OWNER_PROJECT = 2;
    OBJECT_OWNER_USER = 3;
    reserved 1; // deprecated OBJECT_OWNER_ORGANIZATION
}

enum Relation {
    RELATION_UNSPECIFIED = 0;
    RELATION_CREATE = 1 [(name) = "create"];
    RELATION_GET = 2 [(name) = "get"];
    RELATION_UPDATE = 3 [(name) = "update"];
    RELATION_DELETE = 4 [(name) = "delete"];
    RELATION_ROLE_LIST = 5 [(name) = "role_list"];
    RELATION_ROLE_ASSIGNMENT_LIST = 6 [(name) = "role_assignment_list"];
    RELATION_ROLE_ASSIGNMENT_CREATE = 7 [(name) = "role_assignment_create"];
    RELATION_ROLE_ASSIGNMENT_REMOVE = 8 [(name) = "role_assignment_remove"];
    RELATION_REPO_GET = 9 [(name) = "repo_get"];
    RELATION_REPO_CREATE = 10 [(name) = "repo_create"];
    RELATION_REPO_UPDATE = 11 [(name) = "repo_update"];
    RELATION_REPO_DELETE = 12 [(name) = "repo_delete"];
    RELATION_ARTIFACT_GET = 13 [(name) = "artifact_get"];
    RELATION_ARTIFACT_CREATE = 14 [(name) = "artifact_create"];
    RELATION_ARTIFACT_UPDATE = 15 [(name) = "artifact_update"];
    RELATION_ARTIFACT_DELETE = 16 [(name) = "artifact_delete"];
    RELATION_PR_GET = 17 [(name) = "pr_get"];
    RELATION_PR_CREATE = 18 [(name) = "pr_create"];
    RELATION_PR_UPDATE = 19 [(name) = "pr_update"];
    RELATION_PR_DELETE = 20 [(name) = "pr_delete"];
    RELATION_PROVIDER_GET = 21 [(name) = "provider_get"];
    RELATION_PROVIDER_CREATE = 22 [(name) = "provider_create"];
    RELATION_PROVIDER_UPDATE = 23 [(name) = "provider_update"];
    RELATION_PROVIDER_DELETE = 24 [(name) = "provider_delete"];
    RELATION_RULE_TYPE_GET = 25 [(name) = "rule_type_get"];
    RELATION_RULE_TYPE_CREATE = 26 [(name) = "rule_type_create"];
    RELATION_RULE_TYPE_UPDATE = 27 [(name) = "rule_type_update"];
    RELATION_RULE_TYPE_DELETE = 28 [(name) = "rule_type_delete"];
    RELATION_PROFILE_GET = 29 [(name) = "profile_get"];
    RELATION_PROFILE_CREATE = 30 [(name) = "profile_create"];
    RELATION_PROFILE_UPDATE = 31 [(name) = "profile_update"];
    RELATION_PROFILE_DELETE = 32 [(name) = "profile_delete"];
    RELATION_PROFILE_STATUS_GET = 33 [(name) = "profile_status_get"];
    RELATION_REMOTE_REPO_GET = 34 [(name) = "remote_repo_get"];
    RELATION_ENTITY_RECONCILIATION_TASK_CREATE = 35 [(name) = "entity_reconciliation_task_create"];
    RELATION_ENTITY_RECONCILE = 36 [(name) = "entity_reconcile"];
    RELATION_ROLE_ASSIGNMENT_UPDATE = 37 [(name) = "role_assignment_update"];
    RELATION_DATA_SOURCE_GET = 38 [(name) = "data_source_get"];
    RELATION_DATA_SOURCE_CREATE = 39 [(name) = "data_source_create"];
    RELATION_DATA_SOURCE_UPDATE = 40 [(name) = "data_source_update"];
    RELATION_DATA_SOURCE_DELETE = 41 [(name) = "data_source_delete"];
}

extend google.protobuf.EnumValueOptions {
    optional string name = 42445;
}

enum TargetResource {
    TARGET_RESOURCE_UNSPECIFIED = 0;
    TARGET_RESOURCE_NONE = 1;
    TARGET_RESOURCE_USER = 2;
    TARGET_RESOURCE_PROJECT = 3;
}

message RpcOptions {
    bool no_log = 2;
    TargetResource target_resource = 6;
    Relation relation = 7;
    reserved 1, 3, 4, 5; // deprecated anonymous, owner_only, root_admin_only and auth_scope
}

extend google.protobuf.MethodOptions {
    RpcOptions rpc_options = 51077;
}

// Cursor message to be used in request messages. Its purpose is to
// allow clients to specify the subset of records to retrieve by means
// of index within a collection, along with the number of items to
// retrieve.
message Cursor {
    // cursor is the index to start from within the collection being
    // retrieved. It's an opaque payload specified and interpreted on
    // an per-rpc basis. An empty string is used to indicate the first
    // item in the collection.
    string cursor = 1 [
        (buf.validate.field).string = {
            pattern: "^[[:word:]=]*$",
            max_len: 200,
        }
    ];
    // size is the number of items to retrieve from the collection.
    // 0 uses a server-defined default.
    uint32 size = 2 [
        (buf.validate.field).uint32 = { gte: 0, lte: 100 },
        (google.api.field_behavior) = REQUIRED
    ];
}

// CursorPage message used in response messages. Its purpose is to
// send to clients links pointing to next and/or previous collection
// subsets with respect to the one containing this struct.
message CursorPage {
    // Total number of records matching the request. This is optional.
    uint32 total_records = 1;
    // Cursor pointing to retrieve results logically placed after the
    // ones shipped with the message containing this struct. This is optional.
    Cursor next = 2;
    // Cursor pointing to retrieve results logically placed before the
    // ones shipped with the message containing this struct. This is optional.
    Cursor prev = 3;
}

// Simple Health Check Service
// replies with OK
service HealthService {
    rpc CheckHealth (CheckHealthRequest) returns (CheckHealthResponse) {
        option (google.api.http) = {
            get: "/api/v1/health"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_NONE
            no_log: true
        };
    }
}

service ArtifactService {
    rpc ListArtifacts (ListArtifactsRequest) returns (ListArtifactsResponse) {
        option (google.api.http) = {
            get: "/api/v1/artifacts/{provider}"
            additional_bindings {
                get: "/api/v1/artifacts"
            }
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_ARTIFACT_GET
        };
    }

    rpc GetArtifactById (GetArtifactByIdRequest) returns (GetArtifactByIdResponse) {
        option (google.api.http) = {
            get: "/api/v1/artifact/{id}"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_ARTIFACT_GET
        };
    }

    rpc GetArtifactByName (GetArtifactByNameRequest) returns (GetArtifactByNameResponse) {
        option (google.api.http) = {
            get: "/api/v1/artifact/name/{name=**}"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_ARTIFACT_GET
        };
    }

}

message ListArtifactsRequest {
    string provider = 1 [deprecated=true];
    Context context = 3;
    // from is the filter to apply to the list of artifacts.
    // An example is "repository=org1/repo1,org2/repo2"
    // to filter by repository names. This is optional.
    string from = 4 [
        (buf.validate.field).string = {
            pattern: "^[[:word:]]+=[-,/[:word:]]+$",
            max_len: 200,
        },
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ];

    reserved 2; // deprecated project_id
}

message ListArtifactsResponse {
    repeated Artifact results = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
}

message Artifact {
    string artifact_pk = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
    // owner is the artifact owner. This is optional.
    string owner = 2;
    string name = 3 [
        (google.api.field_behavior) = REQUIRED
    ];
    string type = 4 [
        (google.api.field_behavior) = REQUIRED
    ];
    string visibility = 5 [
        (google.api.field_behavior) = REQUIRED
    ];
    // repository is the repository the artifact originated from.
    // This is optional.
    string repository = 6;
    repeated ArtifactVersion versions = 7;
    google.protobuf.Timestamp created_at = 8  [
        (google.api.field_behavior) = REQUIRED
    ];
    Context context = 9;
}

// ArtifactVersion is a version of an artifact.
// This is currently not populated in any requests or responses.
message ArtifactVersion {
    int64 version_id = 1 [
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE,
        (buf.validate.field).int64 = { gte: 1 }
    ];
    repeated string tags = 2;
    string sha = 3;
    google.protobuf.Timestamp created_at = 6;

    reserved 4, 5;
    reserved "github_workflow", "signature_verification";
}

message GetArtifactByIdRequest {
    string id = 1 [
        (buf.validate.field).string = {uuid: true},
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE,
        (google.api.field_behavior) = REQUIRED
    ];

    Context context = 7;

    reserved 5, 6; // deprecated latest_versions, tag
    reserved "latest_versions", "tag";
}

message GetArtifactByIdResponse {
    Artifact artifact = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
    // This is optional and currently always nil.
    repeated ArtifactVersion versions = 2;
}

message GetArtifactByNameRequest {
    string name = 1 [
        (buf.validate.field).string = {
            pattern: "^[-./[:word:]]*$",
            max_len: 200,
        },
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE,
        (google.api.field_behavior) = REQUIRED
    ];
    Context context = 4;

    reserved 2, 3; // deprecated latest_versions, tag
    reserved "latest_versions", "tag";
}

message GetArtifactByNameResponse {
    Artifact artifact = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
    // This is optional and currently always nil.
    repeated ArtifactVersion versions = 2;
}

// Stubs for the SDLC entities
message Release {}
message PipelineRun {}
message TaskRun {}
message Build {}

service OAuthService {
    rpc GetAuthorizationURL (GetAuthorizationURLRequest) returns (GetAuthorizationURLResponse) {
        option (google.api.http) = {
            get: "/api/v1/auth/url"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_PROVIDER_UPDATE
        };
    }

    rpc StoreProviderToken (StoreProviderTokenRequest) returns (StoreProviderTokenResponse) {
        option (google.api.http) = {
            post: "/api/v1/auth/{provider}/token"
            additional_bindings {
                post: "/api/v1/auth/token"
                body: "*"
            }
            body: "*"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_PROVIDER_UPDATE
        };
    }

    // VerifyProviderTokenFrom verifies that a token has been created for a provider since given timestamp
    rpc VerifyProviderTokenFrom (VerifyProviderTokenFromRequest) returns (VerifyProviderTokenFromResponse) {
        option deprecated = true;
        option (google.api.http) = {
            get: "/api/v1/auth/verify/{provider}/{timestamp}"
            additional_bindings {
                get: "/api/v1/auth/verify/{timestamp}"
            }
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_PROVIDER_UPDATE
        };
    }

    // VerifyProviderCredential verifies that a credential has been created matching the enrollment nonce
    rpc VerifyProviderCredential (VerifyProviderCredentialRequest) returns (VerifyProviderCredentialResponse) {
        option (google.api.http) = {
            get: "/api/v1/auth/verify"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_PROVIDER_UPDATE
        };
    }

}

service RepositoryService {
    rpc RegisterRepository (RegisterRepositoryRequest) returns (RegisterRepositoryResponse) {
        option (google.api.http) = {
            post: "/api/v1/repository/provider/{provider}/register"
            additional_bindings {
                post: "/api/v1/repository/register",
                body: "*"
            }
            body: "*"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_REPO_CREATE
        };
    }
    rpc ListRemoteRepositoriesFromProvider(ListRemoteRepositoriesFromProviderRequest) returns (ListRemoteRepositoriesFromProviderResponse) {
        option (google.api.http) = {
            get: "/api/v1/repositories/provider/{provider}/remote"
            additional_bindings {
                get: "/api/v1/repositories/remote"
            }
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_REMOTE_REPO_GET
        };
    }
    rpc ListRepositories (ListRepositoriesRequest) returns (ListRepositoriesResponse) {
        option (google.api.http) = {
            get: "/api/v1/repositories/provider/{provider}"
            additional_bindings {
                get: "/api/v1/repositories"
            }
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_REPO_GET
        };
    }
    rpc GetRepositoryById (GetRepositoryByIdRequest) returns (GetRepositoryByIdResponse) {
        option (google.api.http) = {
            get: "/api/v1/repository/id/{repository_id}"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_REPO_GET
        };
    }

    rpc GetRepositoryByName (GetRepositoryByNameRequest) returns (GetRepositoryByNameResponse) {
        option (google.api.http) = {
            get: "/api/v1/repository/provider/{provider}/name/{name=**}"
            additional_bindings {
                get: "/api/v1/repository/name/{name=**}"
            }
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_REPO_GET
        };
    }

    rpc DeleteRepositoryById (DeleteRepositoryByIdRequest) returns (DeleteRepositoryByIdResponse) {
        option (google.api.http) = {
            delete: "/api/v1/repository/id/{repository_id}"
        };

        option (minder.v1.rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_REPO_DELETE
        };
    }

    rpc DeleteRepositoryByName (DeleteRepositoryByNameRequest) returns (DeleteRepositoryByNameResponse) {
        option (google.api.http) = {
            delete: "/api/v1/repository/provider/{provider}/name/{name=**}"
            additional_bindings {
                delete: "/api/v1/repository/name/{name=**}"
            }
        };

        option (minder.v1.rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_REPO_DELETE
        };
    }
}

// manage Users CRUD
service UserService {
    rpc CreateUser (CreateUserRequest) returns (CreateUserResponse) {
        option (google.api.http) = {
            post: "/api/v1/user"
            body: "*"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_USER
        };
    }

    rpc DeleteUser (DeleteUserRequest) returns (DeleteUserResponse) {
        option (google.api.http) = {
            delete: "/api/v1/user"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_USER
        };
    }

    rpc GetUser (GetUserRequest) returns (GetUserResponse) {
        option (google.api.http) = {
            get: "/api/v1/user"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_USER
        };
    }

    // ListInvitations returns a list of invitations for the user
    // based on the user's registered email address.  Note that a
    // user who receives an invitation code may still accept the
    // invitation even if the code was directed to a different
    // email address.  This is because understanding the routing of
    // email messages is beyond the scope of Minder.
    //
    // This API endpoint may be called without the logged-in user
    // previously having called `CreateUser`.
    rpc ListInvitations (ListInvitationsRequest) returns (ListInvitationsResponse) {
        option (google.api.http) = {
            get: "/api/v1/user/invitations"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_USER
        };
    }

    // ResolveInvitation allows a user to accept or decline an
    // invitation to a project given the code for the invitation.
    // A user may call ResolveInvitation to accept or decline an
    // invitation even if they have not called CreateUser.  If a
    // user accepts an invitation via this call before calling
    // CreateUser, a Minder user record will be created, but no
    // additional projects will be created (unlike CreateUser,
    // which will also create a default project).
    rpc ResolveInvitation (ResolveInvitationRequest) returns (ResolveInvitationResponse) {
        option (google.api.http) = {
            post: "/api/v1/user/invitation/{code}"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_USER
        };
    }
}

service ProfileService {
    rpc CreateProfile (CreateProfileRequest) returns (CreateProfileResponse) {
        option (google.api.http) = {
            post: "/api/v1/profile"
            body: "*"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_PROFILE_CREATE
        };
    }

    rpc UpdateProfile (UpdateProfileRequest) returns (UpdateProfileResponse) {
        option (google.api.http) = {
            put: "/api/v1/profile"
            body: "*"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_PROFILE_UPDATE
        };
    }

    rpc PatchProfile (PatchProfileRequest) returns (PatchProfileResponse) {
        option (google.api.http) = {
            patch: "/api/v1/profile/{id}"
            body: "patch"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_PROFILE_UPDATE
        };
    }

    rpc DeleteProfile (DeleteProfileRequest) returns (DeleteProfileResponse) {
        option (google.api.http) = {
            delete: "/api/v1/profile/{id}"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_PROFILE_DELETE
        };
    }

    rpc ListProfiles (ListProfilesRequest) returns (ListProfilesResponse) {
        option (google.api.http) = {
            get: "/api/v1/profiles"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_PROFILE_GET
        };
    }

    rpc GetProfileById (GetProfileByIdRequest) returns (GetProfileByIdResponse) {
        option (google.api.http) = {
            get: "/api/v1/profile/{id}"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_PROFILE_GET
        };
    }

    rpc GetProfileByName (GetProfileByNameRequest) returns (GetProfileByNameResponse) {
        option (google.api.http) = {
            get: "/api/v1/profile/name/{name=**}"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_PROFILE_GET
        };
    }

    rpc GetProfileStatusByName (GetProfileStatusByNameRequest) returns (GetProfileStatusByNameResponse) {
        option (google.api.http) = {
            get: "/api/v1/profile/name/{name=**}/status"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_PROFILE_STATUS_GET
        };
    }

    rpc GetProfileStatusByProject (GetProfileStatusByProjectRequest) returns (GetProfileStatusByProjectResponse) {
        option (google.api.http) = {
            get: "/api/v1/profile_status"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_PROFILE_STATUS_GET
        };
    }
}

service DataSourceService {
    rpc CreateDataSource (CreateDataSourceRequest) returns (CreateDataSourceResponse) {
        option (google.api.http) = {
            post: "/api/v1/data_source"
            body: "*"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_DATA_SOURCE_CREATE
        };
    }

    rpc GetDataSourceById (GetDataSourceByIdRequest) returns (GetDataSourceByIdResponse) {
        option (google.api.http) = {
            get: "/api/v1/data_source/{id}"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_DATA_SOURCE_GET
        };
    }

    rpc GetDataSourceByName(GetDataSourceByNameRequest) returns (GetDataSourceByNameResponse) {
        option (google.api.http) = {
            get: "/api/v1/data_source/name/{name=**}"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_DATA_SOURCE_GET
        };
    }

    rpc ListDataSources (ListDataSourcesRequest) returns (ListDataSourcesResponse) {
        option (google.api.http) = {
            get: "/api/v1/data_sources"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_DATA_SOURCE_GET
        };
    }

    rpc UpdateDataSource (UpdateDataSourceRequest) returns (UpdateDataSourceResponse) {
        option (google.api.http) = {
            put: "/api/v1/data_source"
            body: "*"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_DATA_SOURCE_UPDATE
        };
    }

    rpc DeleteDataSourceById(DeleteDataSourceByIdRequest) returns (DeleteDataSourceByIdResponse) {
        option (google.api.http) = {
            delete: "/api/v1/data_source/{id}"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_DATA_SOURCE_DELETE
        };
    }

    rpc DeleteDataSourceByName(DeleteDataSourceByNameRequest) returns (DeleteDataSourceByNameResponse) {
        option (google.api.http) = {
            delete: "/api/v1/data_source/name/{name=**}"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_DATA_SOURCE_DELETE
        };
    }
}

service RuleTypeService {

    rpc ListRuleTypes (ListRuleTypesRequest) returns (ListRuleTypesResponse) {
        option (google.api.http) = {
            get: "/api/v1/rule_types"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_RULE_TYPE_GET
        };
    }

    rpc GetRuleTypeByName (GetRuleTypeByNameRequest) returns (GetRuleTypeByNameResponse) {
        option (google.api.http) = {
            get: "/api/v1/rule_type/name/{name=**}"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_RULE_TYPE_GET
        };
    }

    rpc GetRuleTypeById (GetRuleTypeByIdRequest) returns (GetRuleTypeByIdResponse) {
        option (google.api.http) = {
            get: "/api/v1/rule_type/{id}"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_RULE_TYPE_GET
        };
    }

    rpc CreateRuleType (CreateRuleTypeRequest) returns (CreateRuleTypeResponse) {
        option (google.api.http) = {
            post: "/api/v1/rule_type"
            body: "*"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_RULE_TYPE_CREATE
        };
    }

    rpc UpdateRuleType (UpdateRuleTypeRequest) returns (UpdateRuleTypeResponse) {
        option (google.api.http) = {
            put: "/api/v1/rule_type"
            body: "*"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_RULE_TYPE_UPDATE
        };
    }

    rpc DeleteRuleType (DeleteRuleTypeRequest) returns (DeleteRuleTypeResponse) {
        option (google.api.http) = {
            delete: "/api/v1/rule_type/{id}"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_RULE_TYPE_DELETE
        };
    }
}

service EvalResultsService {
    rpc ListEvaluationResults(ListEvaluationResultsRequest) returns (ListEvaluationResultsResponse) {
        option (google.api.http) = {
            // TODO: use
            // get: "/api/v1/projects/{Context.project}/results"
            // If we can promote Context.project to not be optional
            get: "/api/v1/results"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_PROFILE_STATUS_GET
        };
    }

    rpc ListEvaluationHistory(ListEvaluationHistoryRequest) returns (ListEvaluationHistoryResponse) {
        option (google.api.http) = {
            get: "/api/v1/history"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_PROFILE_STATUS_GET
        };
    }

    rpc GetEvaluationHistory(GetEvaluationHistoryRequest) returns (GetEvaluationHistoryResponse) {
        option (google.api.http) = {
            get: "/api/v1/history/{id}"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_PROFILE_STATUS_GET
        };
    }
}

service PermissionsService {
    rpc ListRoles (ListRolesRequest) returns (ListRolesResponse) {
        option (google.api.http) = {
            get: "/api/v1/permissions/roles"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_ROLE_LIST
        };
    }

    rpc ListRoleAssignments (ListRoleAssignmentsRequest) returns (ListRoleAssignmentsResponse) {
        option (google.api.http) = {
            get: "/api/v1/permissions/assignments"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_ROLE_ASSIGNMENT_LIST
        };
    }

    rpc AssignRole (AssignRoleRequest) returns (AssignRoleResponse) {
        option (google.api.http) = {
            post: "/api/v1/permissions/assign"
            body: "*"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_ROLE_ASSIGNMENT_CREATE
        };
    }

    rpc UpdateRole(UpdateRoleRequest) returns (UpdateRoleResponse) {
        option (google.api.http) = {
            post: "/api/v1/permissions/update"
            body: "*"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_ROLE_ASSIGNMENT_UPDATE
        };
    }

    rpc RemoveRole (RemoveRoleRequest) returns (RemoveRoleResponse) {
        // The role name comes from the name field in the role object
        option (google.api.http) = {
            delete: "/api/v1/permissions/remove"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_ROLE_ASSIGNMENT_REMOVE
        };
    }
}

service ProjectsService {

    rpc ListProjects(ListProjectsRequest) returns (ListProjectsResponse) {
        option (google.api.http) = {
            get: "/api/v1/projects"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_USER
            relation: RELATION_GET
        };
    }

    rpc CreateProject(CreateProjectRequest) returns (CreateProjectResponse) {
        option (google.api.http) = {
            post: "/api/v1/projects"
            body: "*"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_CREATE
        };
    }

    rpc ListChildProjects(ListChildProjectsRequest) returns (ListChildProjectsResponse) {
        option (google.api.http) = {
            get: "/api/v1/projects/{context.project_id}/children"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_GET
        };
    }

    rpc DeleteProject(DeleteProjectRequest) returns (DeleteProjectResponse) {
        option (google.api.http) = {
            delete: "/api/v1/projects"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_DELETE
        };
    }

    rpc UpdateProject(UpdateProjectRequest) returns (UpdateProjectResponse) {
        option (google.api.http) = {
            put: "/api/v1/projects"
            body: "*"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_UPDATE
        };
    }

    rpc PatchProject(PatchProjectRequest) returns (PatchProjectResponse) {
        option (google.api.http) = {
            patch: "/api/v1/projects"
            body: "patch"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_UPDATE
        };
    }

    rpc CreateEntityReconciliationTask(CreateEntityReconciliationTaskRequest) returns (CreateEntityReconciliationTaskResponse) {
        option (google.api.http) = {
            post: "/api/v1/projects/entity/reconcile"
            body: "*"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_ENTITY_RECONCILIATION_TASK_CREATE
        };
    }
}

service ProvidersService {
    rpc PatchProvider(PatchProviderRequest) returns (PatchProviderResponse) {
        option (google.api.http) = {
            patch: "/api/v1/providers"
            body: "patch"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_PROVIDER_UPDATE
        };
    }

    rpc GetProvider(GetProviderRequest) returns (GetProviderResponse) {
        option (google.api.http) = {
            get: "/api/v1/providers/{name}"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_PROVIDER_GET
        };
    }

    rpc ListProviders (ListProvidersRequest) returns (ListProvidersResponse) {
        option (google.api.http) = {
            get: "/api/v1/providers"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_PROVIDER_GET
        };
    }

    rpc CreateProvider (CreateProviderRequest) returns (CreateProviderResponse) {
        option (google.api.http) = {
            post: "/api/v1/providers"
            body: "*"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_PROVIDER_CREATE
        };
    }

    rpc DeleteProvider (DeleteProviderRequest) returns (DeleteProviderResponse) {
        option (google.api.http) = {
            // TODO: it would be nice to be able to use context.project and
            // context.provider here, but they are optional and cannot be used
            // in the path.  Change this for v2.
            delete: "/api/v1/providers"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_PROVIDER_DELETE
        };
    }

    rpc DeleteProviderByID (DeleteProviderByIDRequest) returns (DeleteProviderByIDResponse) {
        option (google.api.http) = {
            delete: "/api/v1/providers/{id}"
        };

        option (minder.v1.rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_REPO_DELETE
        };
    }

    rpc ListProviderClasses (ListProviderClassesRequest) returns (ListProviderClassesResponse) {
        option (google.api.http) = {
            get: "/api/v1/provider_classes"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_PROVIDER_GET
        };
    }

    rpc ReconcileEntityRegistration(ReconcileEntityRegistrationRequest) returns (ReconcileEntityRegistrationResponse) {
        option (google.api.http) = {
            post: "/api/v1/provider/register_all"
            body: "*"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_ENTITY_RECONCILE
        };
    }
}

service InviteService {
    rpc GetInviteDetails(GetInviteDetailsRequest) returns (GetInviteDetailsResponse) {
        option (google.api.http) = {
            get: "/api/v1/invite/{code}"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_NONE
        };
    }
}

message GetInviteDetailsRequest {
    // Invite nonce/code to retrieve details for
    string code = 2 [
        (buf.validate.field).string = {
            pattern: "^[A-Za-z0-9_-]+$",
            len: 64,
        },
        (google.api.field_behavior) = REQUIRED
    ];

    reserved 1; // deprecated Context context = 1;
    reserved "context";
}

message GetInviteDetailsResponse {
    // Project associated with the invite
    string project_display = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
    // Sponsor of the invite
    string sponsor_display = 2 [
        (google.api.field_behavior) = REQUIRED
    ];
    // expires_at is the time at which the invitation expires.
    google.protobuf.Timestamp expires_at = 3 [
        (google.api.field_behavior) = REQUIRED
    ];
    // expired is true if the invitation has expired
    bool expired = 4 [
        (google.api.field_behavior) = REQUIRED
    ];
}

message CheckHealthRequest {
}

message CheckHealthResponse {
    string status = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
}

message GetAuthorizationURLRequest {
    // cli is true if the request is being made from a CLI.
    bool cli = 3;

    // owner is the owner (e.g GitHub org) that the provider is associated with.
    // This is optional.
    optional string owner = 5 [
        (buf.validate.field).string = {
            pattern: "^[A-Za-z][-[:word:]]*$"
            max_len: 200,
        },
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ];
    Context context = 6;

    // redirect_url is the URL to redirect to after the authorization is complete.
    optional string redirect_url = 7 [
        (buf.validate.field).string = {
            uri: true,
            max_len: 600,
        },
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ];

    // config is a JSON object that can be used to pass additional configuration
    google.protobuf.Struct config = 8;

    string provider_class = 9 [
        (buf.validate.field).string = {
            pattern: "^[A-Za-z][-[:word:]]*$",
            max_len: 200,
        },
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ];

    reserved 1, 2, 4;
    reserved "provider", "project_id", "port";
}

message GetAuthorizationURLResponse {
    string url = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
    string state = 2 [
        (google.api.field_behavior) = REQUIRED
    ];
}

message StoreProviderTokenRequest {
    string provider = 1 [deprecated=true];

    // access_token is the token to store.
    string access_token = 3 [
        (buf.validate.field).string = {
            pattern: "^[a-zA-Z0-9-_]+$",
            min_len: 10,
            max_len: 200,
        },
        (google.api.field_behavior) = REQUIRED
    ];

    // owner is the owner (e.g GitHub org) that the provider is associated with.
    // This is optional.
    optional string owner = 4 [
        (buf.validate.field).string = {
            pattern: "^[A-Za-z][-[:word:]]*$"
            max_len: 200,
        },
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ];
    Context context = 5;

    reserved 2; // deprecated project_id
}

message StoreProviderTokenResponse {    
}

// Project API Objects. This is only used in responses.
message Project {
    string project_id = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
    string name = 3 [
        (google.api.field_behavior) = REQUIRED
    ];

    // description is a human-readable description of the project.
    // This is optional.
    string description = 4;
    google.protobuf.Timestamp created_at = 6 [
        (google.api.field_behavior) = REQUIRED
    ];
    google.protobuf.Timestamp updated_at = 7 [
        (google.api.field_behavior) = REQUIRED
    ];
    // display_name allows for a human-readable name to be used.
    // display_names are short *non-unique* strings to provide
    // a user-friendly name for presentation in lists, etc.
    // This is optional.
    string display_name = 5;
}

// Repositories API objects

message ListRemoteRepositoriesFromProviderRequest {
    string provider = 1 [deprecated=true];
    Context context = 3;

    reserved 2; // deprecated project_id
}

message ListRemoteRepositoriesFromProviderResponse {
    repeated UpstreamRepositoryRef results = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
    // entities is the same list as the repositories, but it
    // uses the new UpstreamEntityRef message. This is what
    // we'll migrate to eventually.
    repeated RegistrableUpstreamEntityRef entities = 2 [
        (google.api.field_behavior) = REQUIRED
    ];
}

message RegistrableUpstreamEntityRef {
    UpstreamEntityRef entity = 1 [
        (google.api.field_behavior) = REQUIRED
    ];

    // True if the entity is already registered in Minder.
    bool registered = 2;
}

message UpstreamRepositoryRef {
    // owner is the owner (e.g GitHub org) that the provider is associated with.
    // This is optional.
    string owner = 1 [
        (buf.validate.field).string = {
            pattern: "^[A-Za-z][-[:word:]]*$"
            max_len: 200,
        },
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ];
    string name = 2 [
        (buf.validate.field).string = {
            pattern: "^[-.[:alnum:]_]+$",
            max_len: 200,
        },
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE,
        (google.api.field_behavior) = REQUIRED
    ];
    // The upstream identity of the repository, as an integer.
    // This is only set on output, and is ignored on input.
    int64 repo_id = 3 [
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE, // Given it's ignored on input, we can ignore empty values
        (buf.validate.field).int64 = { gte: 1 }
    ];
    Context context = 4;
    // True if the repository is already registered in Minder.
    // This is only set on output, and is ignored on input.
    bool registered = 5;
}

// Repository API objects. This is only used in responses.
message Repository {
    reserved 15;
    reserved "registered";
    // id is the unique identifier of the repository within Minder.
    // It is always populated, but the optional keyword is used for
    // backwards compatibility.
    optional string id = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
    optional Context context = 2;
    string owner = 3 [
        (google.api.field_behavior) = REQUIRED
    ];
    string name = 4 [
        (google.api.field_behavior) = REQUIRED
    ];
    int64 repo_id = 5;
    int64 hook_id = 6;
    string hook_url = 7;
    string deploy_url = 8;
    string clone_url = 9;
    string hook_name = 10;
    string hook_type = 11;
    string hook_uuid = 12;
    bool is_private = 13 [
        (google.api.field_behavior) = REQUIRED
    ];
    bool is_fork = 14 [
        (google.api.field_behavior) = REQUIRED
    ];
    google.protobuf.Timestamp created_at = 16;
    google.protobuf.Timestamp updated_at = 17;
    string default_branch = 18;
    string license = 19;
    // properties is a map of properties of the entity.
    google.protobuf.Struct properties = 20;
}

message RegisterRepositoryRequest {
    string provider = 1 [deprecated=true];

    // repository is the repository to register. This is optional if entity
    // is set.
    UpstreamRepositoryRef repository = 3;
    Context context = 4;
    // entity is the entity to register. This is the same as the repository
    // field, but uses the new UpstreamEntityRef message. This is what we'll
    // migrate to eventually. This is optional if repository is set.
    UpstreamEntityRef entity = 5;

    reserved 2; // deprecated project_id
}

message RegisterRepoResult {
    message Status {
        bool success = 1;
        optional string error = 2;
    }

    Repository repository = 1;
    Status status = 2 [
        (google.api.field_behavior) = REQUIRED
    ];
}

message RegisterRepositoryResponse {
    RegisterRepoResult result = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
}

message GetRepositoryByIdRequest {
    string repository_id = 1 [
        (buf.validate.field).string = {uuid: true},
        (google.api.field_behavior) = REQUIRED
    ];
    Context context = 2;
}

message GetRepositoryByIdResponse {
    Repository repository = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
}

message DeleteRepositoryByIdRequest {
    string repository_id = 1 [
        (buf.validate.field).string = {uuid: true},
        (google.api.field_behavior) = REQUIRED
    ];
    Context context = 2;
}

message DeleteRepositoryByIdResponse {
    string repository_id = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
}

message GetRepositoryByNameRequest {
    string provider = 1 [deprecated=true];
    string name = 3 [
        (buf.validate.field).string = {
            pattern: "^[A-Za-z][-[:word:]./]*$",
            max_len: 200,
        },
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE,
        (google.api.field_behavior) = REQUIRED
    ];
    Context context = 4;

    reserved 2; // deprecated project_id
}

message GetRepositoryByNameResponse {
    Repository repository = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
}

message DeleteRepositoryByNameRequest {
    string provider = 1 [deprecated=true];
    string name = 3 [
        (buf.validate.field).string = {
            pattern: "^[A-Za-z][-[:word:]./]*$",
            max_len: 200,
        },
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE,
        (google.api.field_behavior) = REQUIRED
    ];
    Context context = 4;

    reserved 2; // deprecated project_id
}

message DeleteRepositoryByNameResponse {
    string name = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
}

message ListRepositoriesRequest {
    string provider = 1 [deprecated=true];

    // limit is the maximum number of results to return.
    // This is optional.
    int64 limit = 3 [
        (buf.validate.field).int64 = { gte: 0, lte: 100 }
    ];
    Context context = 5;

    // cursor is the cursor to use for the next page of results.
    // This is optional.
    string cursor = 6 [
        (buf.validate.field).string = {
            pattern: "^[[:word:]=]*$",
            max_len: 200,
        }
    ];

    reserved 2,4; // deprecated project_id, offset
    reserved "project_id", "offset";
}

message ListRepositoriesResponse {
    repeated Repository results = 1 [
        (google.api.field_behavior) = REQUIRED
    ];

    // cursor is the cursor to use for the next page of results, empty if at the end
    string cursor = 2;
}

message ReconcileEntityRegistrationRequest {
    Context context = 1;
    // entity is the entity type
    string entity = 2 [
        (buf.validate.field).string = {
            pattern: "^[a-z]+(_[a-z]+)*$",
            min_len: 1,
            max_len: 200,
        },
        (google.api.field_behavior) = REQUIRED
    ];
}

message ReconcileEntityRegistrationResponse {
}

message VerifyProviderTokenFromRequest {
    string provider = 1 [deprecated=true];
    google.protobuf.Timestamp timestamp = 3;
    Context context = 4;

    reserved 2; // deprecated project_id
}

message VerifyProviderTokenFromResponse {
    string status = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
}

// VerifyProviderCredentialRequest contains the enrollment nonce (aka state) that was used when enrolling the provider
message VerifyProviderCredentialRequest {
    Context context = 1;

    // enrollment_nonce is the state parameter returned when enrolling the provider
    string enrollment_nonce = 2 [
        (buf.validate.field).string = {
            pattern: "^[A-Za-z0-9_-]+$",
            len: 54,
        },
        (google.api.field_behavior) = REQUIRED
    ];
}

// VerifyProviderCredentialRequest responds with a boolean indicating if the provider has been created and the provider
// name, if it has been created
message VerifyProviderCredentialResponse {

    // created is true if the provider was created.
    bool created = 1 [
        (google.api.field_behavior) = REQUIRED
    ];

    // provider_name is the name of the provider that was created.
    // This is populated if creation was successful.
    string provider_name = 2;
}

// User service
message CreateUserRequest { }

message CreateUserResponse {
    int32 id = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
    string organization_id = 2 [deprecated=true];
    string organizatio_name =3 [deprecated=true];
    string project_id = 4 [
        (google.api.field_behavior) = REQUIRED
    ];
    string project_name = 5 [
        (google.api.field_behavior) = REQUIRED
    ];
    string identity_subject = 6 [
        (google.api.field_behavior) = REQUIRED
    ];
    google.protobuf.Timestamp created_at = 7 [
        (google.api.field_behavior) = REQUIRED
    ];
    Context context = 8 [deprecated=true];
}

message DeleteUserRequest {
    reserved 1; // deprecated context
}

message DeleteUserResponse {
}

// user record to be returned
message UserRecord {
    int32 id = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
    string identity_subject = 3 [
        (google.api.field_behavior) = REQUIRED
    ];
    google.protobuf.Timestamp created_at = 4 [
        (google.api.field_behavior) = REQUIRED
    ];
    google.protobuf.Timestamp updated_at = 5 [
        (google.api.field_behavior) = REQUIRED
    ];

    reserved 2; // deprecated organization_id
    reserved "organization_id";
}

// ProjectRole has the project along with the role the user has in the project
message ProjectRole {
    Role role = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
    Project project = 2 [
        (google.api.field_behavior) = REQUIRED
    ];
}

// get user
message GetUserRequest {
    reserved 1; // deprecated context
}

message GetUserResponse {
    optional UserRecord user = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
    // This will be deprecated in favor of the project_roles field
    repeated Project projects = 2 [deprecated=true];
    repeated ProjectRole project_roles = 3 [
        (google.api.field_behavior) = REQUIRED
    ];
}

// DataSource service
message CreateDataSourceRequest {
    DataSource data_source = 1;
}

message CreateDataSourceResponse {
    DataSource data_source = 1;
}

message GetDataSourceByIdRequest {
    ContextV2 context = 1;
    string id = 2 [
        (buf.validate.field).string = {uuid: true}
    ];
}

message GetDataSourceByIdResponse {
    DataSource data_source = 1;
}

// GetDataSourceByNameRequest is the request message for the GetDataSourceByName RPC.
message GetDataSourceByNameRequest {
    ContextV2 context = 1;

    string name = 2 [
        (buf.validate.field).string = {
            pattern: "^[A-Za-z][-[:word:]]*$",
            max_len: 200,
        },
        (google.api.field_behavior) = REQUIRED
    ];
}

message GetDataSourceByNameResponse {
    DataSource data_source = 1;
}

message ListDataSourcesRequest {
    ContextV2 context = 1;
}

message ListDataSourcesResponse {
    repeated DataSource data_sources = 1;
}

message UpdateDataSourceRequest {
    DataSource data_source = 1;
}

message UpdateDataSourceResponse {
    DataSource data_source = 1;
}

message DeleteDataSourceByIdRequest {
    ContextV2 context = 1;
    string id = 2 [
        (buf.validate.field).string = {uuid: true}
    ];
}

message DeleteDataSourceByIdResponse {
    string id = 1;
}

message DeleteDataSourceByNameRequest {
    ContextV2 context = 1;
    string name = 2 [
        (buf.validate.field).string = {
            pattern: "^[A-Za-z][-[:word:]]*$",
            max_len: 200,
        },
        (google.api.field_behavior) = REQUIRED
    ];
}

message DeleteDataSourceByNameResponse {
    string name = 1;
}

// Profile service
message CreateProfileRequest {
    Profile profile = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
    reserved 2; // deprecated context
}

message CreateProfileResponse {
    Profile profile = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
}

message UpdateProfileRequest {
    Profile profile = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
    reserved 2; // deprecated context
}

message UpdateProfileResponse {
    Profile profile = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
}

message PatchProfileRequest {
    // The context in which the patch is applied. Provided explicitly
    // so that the patch itself can be minimal and contain only
    // the attribute to set, e.g. remediate=true
    Context context = 1;
    // The id of the profile to patch. Same explanation about explicitness
    // as for the context
    string id = 2 [
        (buf.validate.field).string = {uuid: true},
        (google.api.field_behavior) = REQUIRED
    ];
    // The patch to apply to the profile
    Profile patch = 3;
    // needed to enable PATCH, see https://grpc-ecosystem.github.io/grpc-gateway/docs/mapping/patch_feature/
    // is not exposed to the API user
    google.protobuf.FieldMask update_mask = 4;
}

message PatchProfileResponse {
    Profile profile = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
}

message DeleteProfileRequest {
    // context is the context in which the rule type is evaluated.
    Context context = 1;
    // id is the id of the profile to delete
    string id = 2 [
        (buf.validate.field).string = {uuid: true},
        (google.api.field_behavior) = REQUIRED
    ];
}

message DeleteProfileResponse {
}

// list profiles
message ListProfilesRequest {
    // context is the context which contains the profiles
    Context context = 1;
    // Filter profiles to only those matching the specified labels.
    // 
    // The default is to return all user-created profiles; the string "*" can
    // be used to select all profiles, including system profiles.  This syntax
    // may be expanded in the future.
    string label_filter = 2 [
        (buf.validate.field).string = {
            pattern: "^(\\*|[a-z][a-z0-9_]*)$",
            max_len: 200,
        },
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ];
}

message ListProfilesResponse {
    repeated Profile profiles = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
}

// get profile by id
message GetProfileByIdRequest {
    // context is the context which contains the profiles
    Context context = 1;
    // id is the id of the profile to get
    string id = 2 [
        (buf.validate.field).string = {uuid: true},
        (google.api.field_behavior) = REQUIRED
    ];
}

message GetProfileByIdResponse {
    Profile profile = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
}

// get profile by name
message GetProfileByNameRequest {
    // context is the context in which the rule type is evaluated.
    Context context = 1;
    // name is the name of the profile to get
    string name = 2 [
        (buf.validate.field).string = {
            pattern: "^[A-Za-z][-/[:word:]]*$",
            max_len: 200,
        },
        (google.api.field_behavior) = REQUIRED
    ];
}

message GetProfileByNameResponse {
    Profile profile = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
}

// get the overall profile status as output
message ProfileStatus {
    // profile_id is the id of the profile.  One of profile_id or profile_name must be set.
    string profile_id = 1;
    // profile_name is the name of the profile.  One of profile_id or profile_name must be set.
    string profile_name = 2;
    // profile_status is the status of the profile
    string profile_status = 3 [
        (google.api.field_behavior) = REQUIRED
    ];
    // last_updated is the last time the profile was updated
    google.protobuf.Timestamp last_updated = 4;

    // profile_display_name is the display name of the profile
    string profile_display_name = 5;
}

// EvalResultAlert holds the alert details for a given rule evaluation
message EvalResultAlert {
    // status is the status of the alert
    string status = 1;
    // last_updated is the last time the alert was performed or attempted
    google.protobuf.Timestamp last_updated = 2;
    // details is the description of the alert attempt if any
    string details = 3;
    // url is the URL to the alert
    string url = 4;
}

// get the status of the rules for a given profile
message RuleEvaluationStatus {
    // profile_id is the id of the profile
    string profile_id = 1;
    // rule_id is the id of the rule
    string rule_id = 2 [
        (google.api.field_behavior) = REQUIRED
    ];
    // rule_name is the type of the rule. Deprecated in favor of rule_type_name
    string rule_name = 3 [deprecated=true];
    // entity is the entity that was evaluated
    string entity = 4 [
        (google.api.field_behavior) = REQUIRED
    ];
    // status is the status of the evaluation
    string status = 5 [
        (google.api.field_behavior) = REQUIRED
    ];
    // last_updated is the last time the profile was updated
    google.protobuf.Timestamp last_updated = 6;
    // entity_info is the information about the entity
    map<string, string> entity_info = 7;
    // details is the description of the evaluation if any
    string details = 8;
    // guidance is the guidance for the evaluation if any
    string guidance = 9;
    // remediation_status is the status of the remediation
    string remediation_status = 10;
    // remediation_last_updated is the last time the remediation was performed or attempted
    optional google.protobuf.Timestamp remediation_last_updated = 11;
    // remediation_details is the description of the remediation attempt if any
    string remediation_details = 12;
    // rule_type_name is the name of the rule
    string rule_type_name = 13 [
        (google.api.field_behavior) = REQUIRED
    ];
    // rule_description_name is the name to describe the rule
    string rule_description_name = 14;
    // alert holds the alert details if the rule generated an alert in an external system
    EvalResultAlert alert = 15;
    // severity is the severity of the rule. This may be empty.
    Severity severity = 16;
    // rule_evaluation_id is the id of the rule evaluation
    string rule_evaluation_id = 17;
    // remediation_url is a url to get more data about a remediation, for PRs is the link to the PR
    string remediation_url = 18;
    // rule_display_name captures the display name of the rule 
    string rule_display_name = 19;
    // release_phase is the phase of the release
    RuleTypeReleasePhase release_phase = 20 [
        (google.api.field_behavior) = REQUIRED
    ];
}

// EntiryTypeId is a message that carries an ID together with a type to uniquely identify an entity
// such as (repo, 1), (artifact, 2), ...
message EntityTypedId {
    // entity is the entity to get status for. Incompatible with `all`
    Entity type = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
    // id is the ID of the entity to get status for. Incompatible with `all`
    string id = 2 [
        (buf.validate.field).string = {uuid: true},
        (google.api.field_behavior) = REQUIRED
    ];
}

message GetProfileStatusByNameRequest {
    // context is the context in which the rule type is evaluated.
    Context context = 1;
    // name is the name of the profile to get
    string name = 2 [
        (buf.validate.field).string = {
            pattern: "^[A-Za-z][-/[:word:]]*$",
            max_len: 200,
        },
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ];

    // entity is the entity to get status for. Incompatible with `all`.
    // This is optional.
    EntityTypedId entity = 3;

    // all is true if the status of all entities should be returned.
    // Incompatible with `entity`. This is optional.
    bool all = 4;

    // rule is the type of the rule. Deprecated in favor of rule_type
    string rule = 5 [deprecated=true];

    // rule_type is the type of the rule to filter on.
    // This is optional.
    string rule_type = 6 [
        (buf.validate.field).string = {
            pattern: "^[A-Za-z][-/[:word:]]*$"
            max_len: 200,
        },
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ];

    // rule_name is the name of the rule to filter on.
    // This is optional.
    string rule_name = 7 [
        (buf.validate.field).string = {
            pattern: "^[A-Za-z][-/'()[:word:] :]*$",
            max_len: 200,
        },
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ];
}

message GetProfileStatusByNameResponse {
    // profile_status is the status of the profile
    ProfileStatus profile_status = 1 [
        (google.api.field_behavior) = REQUIRED
    ];

    // rule_evaluation_status is the status of the rules
    repeated RuleEvaluationStatus rule_evaluation_status = 2;
}

message GetProfileStatusByProjectRequest {
    // context is the context in which the rule type is evaluated.
    Context context = 1;
}

message GetProfileStatusByProjectResponse {
    // profile_status is the status of the profile
    repeated ProfileStatus profile_status = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
}

// Entity defines the entity that is supported by the provider.
enum Entity {
    ENTITY_UNSPECIFIED = 0;
    ENTITY_REPOSITORIES = 1;
    ENTITY_BUILD_ENVIRONMENTS = 2;
    ENTITY_ARTIFACTS = 3;
    ENTITY_PULL_REQUESTS = 4;
    ENTITY_RELEASE = 5;
    ENTITY_PIPELINE_RUN = 6;
    ENTITY_TASK_RUN = 7;
    ENTITY_BUILD = 8;
}

message EntityAutoRegistrationConfig {
   optional bool enabled = 1;
}

// AutoRegistration is the configuration for auto-registering entities.
// When nothing is set, it means that auto-registration is disabled. There is no difference between disabled
// and undefined so for the "let's not auto-register anything" case we'd just let the repeated string empty
message AutoRegistration {
    // enabled is the list of entities that are enabled for auto-registration.
    map<string, EntityAutoRegistrationConfig> entities = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
}

// ProviderConfig contains the generic configuration for a provider.
message ProviderConfig {
    // auto_registration is the configuration for auto-registering entities.
    optional AutoRegistration auto_registration = 1;
}

// RESTProviderConfig contains the configuration for the REST provider.
message RESTProviderConfig {
    // base_url is the base URL for the REST provider.
	optional string base_url = 1;
}

// GitHubProviderConfig contains the configuration for the GitHub client
//
// Endpoint: is the GitHub API endpoint
//
// If using the public GitHub API, Endpoint can be left blank
// disable revive linting for this struct as there is nothing wrong with the
// naming convention
message GitHubProviderConfig {
    // Endpoint is the GitHub API endpoint. If using the public GitHub API, Endpoint can be left blank.
	optional string endpoint = 1;
}

// GitHubAppProviderConfig contains the configuration for the GitHub App provider
message GitHubAppProviderConfig {
  // Endpoint is the GitHub API endpoint. If using the public GitHub API, Endpoint can be left blank.
  optional string endpoint = 1;
  reserved 2, 3, 4;
  reserved "app_name", "app_id", "user_id";
}

// GitLabProviderConfig contains the configuration for the GitLab provider.
//
// Endpoint: is the GitLab API endpoint
//
// If using the public GitLab API, Endpoint can be left blank
message GitLabProviderConfig {
    // Endpoint is the GitLab API endpoint. If using the public GitLab API, Endpoint can be left blank.
    string endpoint = 1;

    // group is the GitLab group to use for the provider
    string group = 2;
}

// DockerHubProviderConfig contains the configuration for the DockerHub provider.
//
// Namespace: is the namespace for the DockerHub provider.
//
message DockerHubProviderConfig {
    // namespace is the namespace for the DockerHub provider.
    optional string namespace = 1;
}

// GHCRProviderConfig contains the configuration for the GHCR provider.
//
// Namespace: is the namespace for the GHCR provider.
//
message GHCRProviderConfig {
    // namespace is the namespace for the GHCR provider.
    optional string namespace = 1;
}

// Context defines the context in which a rule is evaluated.
// this normally refers to a combination of the provider, organization and project.
message Context {
    // Removing the 'optional' keyword from the following two fields below will break
    // buf compatibility checks.

    // name of the provider
    optional string provider = 1 [
        (buf.validate.field).string = {
            pattern: "^[A-Za-z][-[:word:]]*$",
            max_len: 200,
        },
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ];
    // ID of the project.  If empty or unset, will select the user's default project
    // if they only have one project.
    optional string project = 3 [
        (buf.validate.field).string = {uuid: true},
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ];

    optional string retired_organization = 2;
}

// ContextV2 defines the context in which a rule is evaluated.
message ContextV2 {
    // project is the project ID.  If empty or unset, will select the user's default project
    // if they only have one project.
    string project_id = 1 [
        (buf.validate.field).string = {uuid: true},
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ];

    // name of the provider. Set to empty string when not applicable.
    string provider = 2 [
        (buf.validate.field).string = {
            pattern: "^[A-Za-z][-[:word:]]*$",
            max_len: 200,
        },
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ];
}

// --- START RuleType CRUD definitions

// ListRuleTypesRequest is the request to list rule types.
message ListRuleTypesRequest {
    // context is the context in which the rule types are evaluated.
    Context context = 1;
}

// ListRuleTypesResponse is the response to list rule types.
message ListRuleTypesResponse {
    // rule_types is the list of rule types.
    repeated RuleType rule_types = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
}

// GetRuleTypeByNameRequest is the request to get a rule type by name.
message GetRuleTypeByNameRequest {
    // context is the context in which the rule type is evaluated.
    Context context = 1;
    // name is the name of the rule type.
    string name = 2 [
        (buf.validate.field).string = {
            pattern: "^[A-Za-z][-/[:word:]]*$",
            max_len: 200,
        },
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ];
}

// GetRuleTypeByNameResponse is the response to get a rule type by name.
message GetRuleTypeByNameResponse {
    // rule_type is the rule type.
    RuleType rule_type = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
}

// GetRuleTypeByIdRequest is the request to get a rule type by id.
message GetRuleTypeByIdRequest {
    // context is the context in which the rule type is evaluated.
    Context context = 1;
    // id is the id of the rule type.
    string id = 2 [
        (buf.validate.field).string = {uuid: true},
        (google.api.field_behavior) = REQUIRED
    ];
}

// GetRuleTypeByIdResponse is the response to get a rule type by id.
message GetRuleTypeByIdResponse {
    // rule_type is the rule type.
    RuleType rule_type = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
}

// CreateRuleTypeRequest is the request to create a rule type.
message CreateRuleTypeRequest {
    // rule_type is the rule type to be created.
    RuleType rule_type = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
    reserved 2; // deprecated context
}

// CreateRuleTypeResponse is the response to create a rule type.
message CreateRuleTypeResponse {
    // rule_type is the rule type that was created.
    RuleType rule_type = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
}

// UpdateRuleTypeRequest is the request to update a rule type.
message UpdateRuleTypeRequest {
    // rule_type is the rule type to be updated.
    RuleType rule_type = 2 [
        (google.api.field_behavior) = REQUIRED
    ];
    reserved 3; // deprecated context
}

// UpdateRuleTypeResponse is the response to update a rule type.
message UpdateRuleTypeResponse {
    // rule_type is the rule type that was updated.
    RuleType rule_type = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
}

// DeleteRuleTypeRequest is the request to delete a rule type.
message DeleteRuleTypeRequest {
    // context is the context in which the rule type is evaluated.
    Context context = 1;
    // id is the id of the rule type to be deleted.
    string id = 2 [
        (buf.validate.field).string = {uuid: true},
        (google.api.field_behavior) = REQUIRED
    ];
}

// DeleteRuleTypeResponse is the response to delete a rule type.
message DeleteRuleTypeResponse {
}

// --- END RuleType CRUD definitions

// --- START EvaluationResults definitions

message ListEvaluationResultsRequest {
    // context is the context in which the evaluation results are evaluated.
    Context context = 1;

    // profile is the profile name or ID to retrieve results for.
    // If empty, return evaluation results for profiles selected by
    // an empty label_filter.
    oneof profile_selector {
        // ID can contain either a profile name or an ID
        string profile = 2 [
            (buf.validate.field).string = {
                pattern: "^([[:alnum:]][-[:word:]]*)?$"
                max_len: 200,
            },
            (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
        ];
        // Filter profiles to only those matching the specified labels.
        // 
        // The default is to return all user-created profiles; the string "*" can
        // be used to select all profiles, including system profiles.  This syntax
        // may be expanded in the future.
        string label_filter = 3 [
            (buf.validate.field).string = {
                pattern: "^(\\*|[a-zA-Z][a-zA-Z0-9_]*)$",
                max_len: 200,
            },
            (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
        ];
    }

    // If set, only return evaluation results for the named entities.
    // If empty, return evaluation results for all entities
    repeated EntityTypedId entity = 4;

    // If set, only return evaluation results for the named rules.
    // If empty, return evaluation results for all rules
    repeated string rule_name = 5 [
        (buf.validate.field).repeated = {
            items: {
                string: {
                    pattern: "^[A-Za-z][-/[:word:]]*$",
                        max_len: 200,
                    }
            }
        },
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ];
}

message ListEvaluationResultsResponse {
    reserved 1; // deprecated status
    reserved "status";

    message EntityProfileEvaluationResults {
        // profile_status is the status of the profile - id, name, status, last_updated
        ProfileStatus profile_status = 1;

        // Note that some fields like profile_id and entity might be empty
        // Eventually we might replace this type with another one that fits the API better
        repeated RuleEvaluationStatus results = 2;
    }

    message EntityEvaluationResults {
        EntityTypedId entity = 1;
        repeated EntityProfileEvaluationResults profiles = 2;
    }

    // Each entity selected by the list request will have _single_ entry in entities which contains results of all evaluations for each profile.
    repeated EntityEvaluationResults entities = 2 [
        (google.api.field_behavior) = REQUIRED
    ];
}

// --- END EvaluationResults definitions



// RestType defines the rest data evaluation.
// This is used to fetch data from a REST endpoint.
message RestType {
    message Fallback {
        int32 http_code = 1 [(buf.validate.field).int32 = { gte: 100, lte: 599 }];
        // This is expected to be a valid JSON string.
        string body = 2 [
            (buf.validate.field).string = {
                max_len: 1000,
            },
            (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
        ];
    }

    // endpoint is the endpoint to fetch data from.
    // This can be a URL or path on the API.
    // This is a required field and must be set.
    // This is also evaluated via a template which allows
    // us dynamically fill in the values.
    string endpoint = 1 [
        (buf.validate.field).string = {
            max_len: 400,
        },
        (google.api.field_behavior) = REQUIRED
    ];

    // method is the method to use to fetch data.
    string method = 2 [
        (buf.validate.field).string = {
            pattern: '^(?i)(GET|POST|PUT|PATCH|DELETE)$'
        },
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ];

    // headers are the headers to be sent to the endpoint.
    repeated string headers = 3 [
        (buf.validate.field).repeated = {
            items: {
                string: {
                    pattern: "^[a-zA-Z0-9-]+:[[:graph:][:blank:]]+$",
                    max_len: 400,
                }
            }
        },
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ];

    // body is the body to be sent to the endpoint.
    // This is expected to be a valid JSON string.
    optional string body = 4 [
        (buf.validate.field).string = {
            max_len: 1000,
        },
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ];

    // parse is the parsing mechanism to be used to parse the data.
    string parse = 5 [
        (buf.validate.field).string = {
            pattern: "^[a-z_]+$",
            max_len: 50,
        },
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ];

    // fallback provides a body that the ingester would return in case
    // the REST call returns a non-200 status code.
    repeated Fallback fallback = 6;
}

// BuiltinType defines the builtin data evaluation.
message BuiltinType {
    string method = 1;
}

// ArtifactType defines the artifact data evaluation.
message ArtifactType {
}

// GitType defines the git data ingester.
message GitType {
    // clone_url is the url of the git repository.
    string clone_url = 1 [
        (buf.validate.field).string = {
            uri: true,
            max_len: 200,
        },
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ];

    // branch is the branch of the git repository.
    string branch = 2 [
        (buf.validate.field).string = {
            pattern: "^[[:word:]./-]+$",
            max_len: 200,
        },
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ];
}

// DiffType defines the diff data ingester.
message DiffType {
    message Ecosystem {
        // name is the name of the ecosystem.
        string name = 1 [
            (buf.validate.field).string = {
                pattern: "^[a-z]+(_[a-z]+)*$",
                min_len: 1,
                max_len: 200,
            }
        ];
        // depfile is the file that contains the dependencies for this ecosystem
        string depfile = 2 [
            (buf.validate.field).string = {
                pattern: "^(\\./)?([a-zA-Z0-9_\\-]+/)*[a-zA-Z0-9_\\-]+(\\.[a-zA-Z0-9]+)?$",
                min_len: 1,
                max_len: 200,
            }
        ];
    }

    // ecosystems is the list of ecosystems to be used
    // for the "dep" diff type.
    repeated Ecosystem ecosystems = 1;

    // type is the type of diff ingestor to use.
    // The default is "dep" which will leverage
    // the ecosystems array.
    string type = 2 [
        (buf.validate.field).string = {
            pattern: "^[a-z]+(_[a-z]+)*$",
            max_len: 200,
        },
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ];
}

// DepsType defines the "deps" ingester which can extract depndencies in protobom
// format for rule evaluation.
message DepsType {
    // branch is the branch of the git repository, when applied to repository entities.
    // Has no meaning or effect on other entity types.
    message RepoConfigs {
        string branch = 1 [
            (buf.validate.field).string = {
                pattern: "^[[:word:]./-]+$",
                max_len: 200,
            },
            (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
        ];
    }

    oneof entity_type {
        RepoConfigs repo = 1;
    }
}

// Severity defines the severity of the rule.
message Severity {
    // Value enumerates the severity values.
    enum Value {
        VALUE_UNSPECIFIED = 0;
        // unknown severity means that the severity is unknown or hasn't
        // been set.
        VALUE_UNKNOWN = 1 [(name) = "unknown"];
        // info severity means that the severity is informational and
        // does not incur risk.
        VALUE_INFO = 2 [(name) = "info"];
        // low severity means that the severity is low and does not
        // incur significant risk.
        VALUE_LOW = 3 [(name) = "low"];
        // medium severity means that the severity is medium and may
        // incur some risk.
        VALUE_MEDIUM = 4 [(name) = "medium"];
        // high severity means that the severity is high and may incur
        // significant risk.
        VALUE_HIGH = 5 [(name) = "high"];
        // critical severity means that the severity is critical and
        // requires immediate attention.
        VALUE_CRITICAL = 6 [(name) = "critical"];
    }

    // value is the severity value.
    Value value = 1;
}

// RuleTypeReleasePhase defines the release phase of the rule type.
enum RuleTypeReleasePhase {
    RULE_TYPE_RELEASE_PHASE_UNSPECIFIED = 0;
    RULE_TYPE_RELEASE_PHASE_ALPHA = 1 [(name) = "alpha"];
    RULE_TYPE_RELEASE_PHASE_BETA = 2 [(name) = "beta"];
    RULE_TYPE_RELEASE_PHASE_GA = 3 [(name) = "ga"];
    RULE_TYPE_RELEASE_PHASE_DEPRECATED = 4 [(name) = "deprecated"];
}

// RuleType defines rules that may or may not be user defined.
// The version is assumed from the folder's version.
message RuleType {
    // version is the version of the rule type API.
    string version = 11 [
        (buf.validate.field).string = {
            pattern: "^v\\d$",
        }
    ];

    // type is the type of the rule.
    string type = 12 [
        (buf.validate.field).string = {
            pattern: "rule-type",
        }
    ];

    // id is the id of the rule type.
    // This is mostly optional and is set by the server.
    optional string id = 1 [
        (buf.validate.field).string = {uuid: true},
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ];

    // name is the name of the rule type.
    string name = 2 [
        (buf.validate.field).string = {
            pattern: "^[A-Za-z][-/[:word:]]*$",
            max_len: 200,
        },
        (google.api.field_behavior) = REQUIRED
    ];

    // display_name is the display name of the rule type.
    string display_name = 8 [
        (buf.validate.field).string = {
            pattern: "^[A-Za-z][-/'()[:word:] :]*$",
            max_len: 200,
        },
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ];

    // short_failure_message is the message to display when the evaluation fails.
    string short_failure_message = 10 [
        (buf.validate.field).string = {
            max_len: 400,
        },
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ];

    // context is the context in which the rule is evaluated.
    Context context = 3;

    // Definition defines the rule type. It encompases the schema and the data evaluation.
    message Definition {
        // in_entity is the entity in which the rule is evaluated.
        // This can be repository, build_environment or artifact.
        string in_entity = 1 [
            (buf.validate.field).string = {
                pattern: "^[a-z]+(_[a-z]+)*$",
                min_len: 1,
                max_len: 200,
            }
        ];

        // rule_schema is the schema of the rule. This is expressed in JSON Schema.
        google.protobuf.Struct rule_schema = 2;

        // param_schema is the schema of the parameters that are passed to the rule.
        // This is expressed in JSON Schema.
        optional google.protobuf.Struct param_schema = 3;

        // Ingest defines how the data is ingested.
        message Ingest {
            // type is the type of the data ingestion.
            // we currently support rest, artifact and builtin.
            string type = 1 [
                (buf.validate.field).string = {
                    in: ["rest", "artifact", "builtin", "git", "diff", "deps"],
                },
                (google.api.field_behavior) = REQUIRED
            ];

            // NOTE: we should have used the "oneof" feature here rather than
            // having both a string "type" and a series of optional messages.
            // We can consider fixing this in a V2 API, but it's probably too
            // to do in V1.

            // rest is the rest data ingestion.
            // this is only used if the type is rest.
            optional RestType rest = 3;

            // builtin is the builtin data ingestion.
            optional BuiltinType builtin = 4;

            // artifact is the artifact data ingestion.
            // artifact currently only applies to artifacts.
            optional ArtifactType artifact = 5;

            // git is the git data ingestion.
            // git currently only applies to repositories.
            optional GitType git = 6;

            // diff is the diff data ingestion.
            // diff currently only applies to pull_requests.
            optional DiffType diff = 7;

            // deps is the deps data ingestion.
            // deps currently only applies to repositories.
            optional DepsType deps = 8;
        }
        Ingest ingest = 4 [
            (google.api.field_behavior) = REQUIRED
        ];

        // Eval defines the data evaluation definition.
        // This pertains to the way we traverse data from the upstream
        // endpoint and how we compare it to the rule.
        message Eval {
            // type is the type of the data evaluation.
            string type = 1 [
                (buf.validate.field).string = {
                    in: ["jq", "rego", "vulncheck", "trusty", "homoglyphs"],
                },
                (google.api.field_behavior) = REQUIRED
            ];

            message JQComparison {
                message Operator {
                    string def = 1 [
                        (buf.validate.field).string = {
                            pattern: "^\\.[a-zA-Z_]+(\\.[a-zA-Z_]+|\\[\\d+]|\\[\"[a-zA-Z_]+\"\\])*$",
                            min_len: 1,
                            max_len: 200,
                        },
                        (google.api.field_behavior) = REQUIRED
                    ];
                }

                // Ingested points to the data retrieved in the `ingest` section
                Operator ingested = 1 [
                    (google.api.field_behavior) = REQUIRED
                ];

                // Profile points to the profile itself.
                // This is mutually exclusive with the `constant` field.
                Operator profile = 2;

                // Constant points to a constant value.
                // This is mutually exclusive with the `profile` field.
                google.protobuf.Value constant = 3;
            }

            message Rego {
                // type is the type of evaluation engine to use
                // for rego. We currently have two modes of operation:
                // - deny-by-default: this is the default mode of operation
                //   where we deny access by default and allow access only
                //   if the profile explicitly allows it. It expects the
                //   profile to set an `allow` variable to true or false.
                // - constraints: this is the mode of operation where we
                //   allow access by default and deny access only if a
                //   violation is found. It expects the profile to set a
                //   `violations` variable with a "msg" field.
                string type = 1 [
                    (buf.validate.field).string = {
                        pattern: "^[a-z]+([_-][a-z]+)*$",
                        min_len: 1,
                        max_len: 200,
                    },
                    (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
                ];
                // def is the definition of the rego profile.
                string def = 2 [
                    (google.api.field_behavior) = REQUIRED
                ];
                // how are violations reported. This is only used if the
                // `constraints` type is selected. The default is `text`
                // which returns human-readable text. The other option is
                // `json` which returns a JSON array containing the violations.
                optional string violation_format = 3 [
                    (buf.validate.field).string = {
                        in: ["text", "json"],
                    },
                    (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
                ];
            }

            message Vulncheck {
                // no configuration for now
            }

            message Trusty {
                // This is no longer used, but is still here for backwards
                // compatibility with existing stored rules
                string endpoint = 1 [
                    (buf.validate.field).string = {
                        uri: true,
                    },
                    (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
                ];
            }

            message Homoglyphs {
                string type = 1 [
                    (buf.validate.field).string = {
                        in: ["invisible_characters", "mixed_scripts"]
                    }
                ];
            }

            // jq is only used if the `jq` type is selected.
            // It defines the comparisons that are made between
            // the ingested data and the profile rule.
            repeated JQComparison jq = 2;

            // rego is only used if the `rego` type is selected.
            optional Rego rego = 3;

            // vulncheck is only used if the `vulncheck` type is selected.
            optional Vulncheck vulncheck = 4;

            // The trusty type is no longer used, but is still here for backwards
            // compatibility with existing stored rules
            optional Trusty trusty = 5;

            // homoglyphs is only used if the `homoglyphs` type is selected.
            optional Homoglyphs homoglyphs = 6;

            // Data sources that the rule refers to. These are used to
            // instantiate the relevant data sources for the rule and keep
            // track of them as dependencies.
            //
            // Note that the data source must exist in the project hierarchy
            // in order to be used in the rule.
            repeated DataSourceReference data_sources = 7;
        }
        Eval eval = 5 [
            (google.api.field_behavior) = REQUIRED
        ];

        message Remediate {
            string type = 1 [
                (buf.validate.field).string = {
                    in: ["rest", "gh_branch_protection", "pull_request"],
                },
                (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
            ];

            message GhBranchProtectionType {
                string patch = 1 [
                    (buf.validate.field).string = {
                        max_len: 1000,
                    },
                    (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
                ];
            }

            // the name stutters a bit but we already use a PullRequest message for handling PR entities
            message PullRequestRemediation {
                message Content {
                    // the file to patch
                    string path = 1 [
                        (buf.validate.field).string = {
                            pattern: "^\\.?([[:word:].-]+\\/)*[[:word:].-]+(?:\\.[[:alnum:]]+)?$",
                            min_len: 1,
                            max_len: 200,
                        }
                    ];
                    // how to patch the file. For now, only replace is supported
                    string action = 2 [
                        (buf.validate.field).string = {
                            in: ["replace"],
                            min_len: 1,
                            max_len: 50,
                        }
                    ];
                    // the content of the file
                    string content = 4;
                    // the GIT mode of the file. Not UNIX mode! String because the GH API also uses strings
                    // the usual modes are: 100644 for regular files, 100755 for executable files and
                    // 040000 for submodules (which we don't use but now you know the meaning of the 1 in 100644)
                    // see e.g. https://github.com/go-git/go-git/blob/32e0172851c35ae2fac495069c923330040903d2/plumbing/filemode/filemode.go#L16
                    optional string mode = 3 [
                        (buf.validate.field).string = {
                            pattern: "^\\d+$",
                            max_len: 6,
                        },
                        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
                    ];
                }

                message ActionsReplaceTagsWithSha {
                    // List of actions to exclude from the replacement
                    repeated string exclude = 1 [
                        (buf.validate.field).repeated = {
                            items: {
                                string: {
                                    pattern: "^\\.?([[:word:].-]+\\/)*[[:word:].-]+(?:\\.[[:alnum:]]+)?$",
                                    max_len: 200,
                                }
                            }
                        }
                    ];
                }

                // the title of the PR
                // This is not validated here as it will be validated by the repository provider, i.e. GitHub upon
                // creation of the PR.
                string title = 1 [
                    (buf.validate.field).string = {
                        min_len: 1,
                        max_len: 75,
                    }
                ];
                // the body of the PR
                // This is not validated here as it will be validated by the repository provider, i.e. GitHub upon
                // creation of the PR.
                string body = 2 [
                    (buf.validate.field).string = {
                        min_len: 1,
                        max_len: 65536,
                    }
                ];
                repeated Content contents = 3;
                // the method to use to create the PR. For now, these are supported:
                // -- minder.content - ensures that the content of the file is exactly as specified
                //                     refer to the Content message for more details
                // -- minder.actions.replace_tags_with_sha - finds any github actions within a workflow
                //                                           file and replaces the tag with the SHA
                // -- minder.yq.evaluate - evaluates a yq expression on a file
                string method = 4 [
                    (buf.validate.field).string = {
                        in: ["minder.content", "minder.actions.replace_tags_with_sha", "minder.yq.evaluate"],
                    },
                    (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
                ];
                // params are unstructured parameters passed to the method. These are optional
                // and evaluated by the method.
                google.protobuf.Struct params = 6;

                // If the method is minder.actions.replace_tags_with_sha, this is the configuration
                // for that method
                optional ActionsReplaceTagsWithSha actions_replace_tags_with_sha = 5;
            }

            optional RestType rest = 2;
            optional GhBranchProtectionType gh_branch_protection = 3;
            optional PullRequestRemediation pull_request = 4;
        }
        Remediate remediate = 6;

        message Alert {
            string type = 1 [
                (buf.validate.field).string = {
                    in: ["security_advisory"],
                },
                (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
            ];

            message AlertTypeSA {
                string severity = 1 [
                    (buf.validate.field).string = {
                        in: ["unknown", "info", "low", "medium", "high", "critical"],
                    },
                    (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
                ];
            }
            optional AlertTypeSA security_advisory = 2;
        }
        Alert alert = 7;
    }

    // def is the definition of the rule type.
    Definition def = 4 [
        (google.api.field_behavior) = REQUIRED
    ];

    // description is the description of the rule type.
    // This is expected to be a valid markdown formatted string.
    string description = 5 [
        (buf.validate.field).string = {
            min_len: 1,
            max_len: 1000,
        },
        (google.api.field_behavior) = REQUIRED
    ];

    // guidance are instructions we give the user in case a rule fails.
    // This is expected to be a valid markdown formatted string.
    string guidance = 6 [
        (buf.validate.field).string = {
            min_len: 1,
            max_len: 1000,
        },
        (google.api.field_behavior) = REQUIRED
    ];

    // severity is the severity of the rule type.
    Severity severity = 7;

    // release_phase is the release phase of the rule type, i.e. alpha, beta, ga, deprecated.
    RuleTypeReleasePhase release_phase = 9;
}

// Profile defines a profile that is user defined.
// All fields are optional because we want to allow partial updates.
message Profile {
    // context is the context in which the profile is evaluated.
    Context context = 1;

    // id is the id of the profile.
    // This is optional and is set by the system.
    optional string id = 2 [
        (buf.validate.field).string = {uuid: true},
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ];

    // name is the name of the profile instance.
    string name = 3 [
        (buf.validate.field).string = {
            pattern: "^[A-Za-z][-/[:word:]]*$",
            max_len: 200,
        },
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ];

    // labels are a set of system-provided attributes which can be used to
    // filter profiles and status results.  Labels cannot be set by the user,
    // but are returned in ListProfiles.
    //
    // Labels use DNS label constraints, with a possible namespace prefix
    // separated by a colon (:).  They are intended to allow filtering, but
    // not to store arbitrary metadata.
    // DNS labels are 1-63 character alphanumeric strings with internal hyphens.
    // An RE2-style validation regex would be:
    //
    // DNS_STR = "[a-zA-Z0-9](?[-a-zA-Z0-9]{0,61}[a-zA-Z0-9])?"
    // ($DNS_STR:)?$DNS_STR
    repeated string labels = 12 [
        (buf.validate.field) = {
            repeated: {
                items: {
                    string: {
                        // DNS label constraints extended to allow for underscores
                        pattern: "^([a-zA-Z0-9_]([-a-zA-Z0-9_]{0,61}[a-zA-Z0-9_])?:)?[a-zA-Z0-9_]([-a-zA-Z0-9_]{0,61}[a-zA-Z0-9_])?$"
                    }
                },
                unique: true
            }
        },
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ];

    // Rule defines the individual call of a certain rule type.
    message Rule {
        // type is the type of the rule to be instantiated.
        string type = 1 [
            (buf.validate.field).string = {
                pattern: "^[A-Za-z][-/[:word:]]*$",
                max_len: 200,
            },
            (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
        ];
        // params are the parameters that are passed to the rule.
        // This is optional and depends on the rule type.
        google.protobuf.Struct params = 2;
        // def is the definition of the rule.
        // This depends on the rule type.
        google.protobuf.Struct def = 3;

        // name is the descriptive name of the rule, not to be confused with type
        string name = 4 [
            (buf.validate.field).string = {
                pattern: "^[A-Za-z][-/'()[:word:] :]*$",
                max_len: 200,
            },
            (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
        ];
    }

    // These are the entities that one could set in the profile.
    repeated Rule repository = 4;
    repeated Rule build_environment = 5;
    repeated Rule artifact = 6;
    repeated Rule pull_request = 7;
    repeated Rule release = 15;
    repeated Rule pipeline_run = 16;
    repeated Rule task_run = 17;
    repeated Rule build = 18;

    message Selector {
        // id is optional and use for updates to match upserts as well as read operations. It is ignored for creates.
        string id = 1;
        // entity is the entity to select.
        string entity = 2 [
            (buf.validate.field).string = {
                pattern: "^[a-z]+(_[a-z]+)*$",
                min_len: 1,
                max_len: 200,
            },
            (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
        ];
        // expr is the expression to select the entity.
        string selector = 4 [
            (buf.validate.field).string = {
                max_len: 200,
            },
            (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
        ];
        reserved 5;
        reserved "comment";
        // description is the human-readable description of the selector.
        string description = 6 [
            (buf.validate.field).string = {
                pattern: "^[A-Za-z][-/.!?,:;'[:word:] ]*$",
                max_len: 1000,
            },
            (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
        ];
    }

    repeated Selector selection = 14;

    // whether and how to remediate (on,off,dry_run)
    // this is optional and defaults to "off"
    optional string remediate = 8 [
        (buf.validate.field).string = {
            in: ["on", "off", "dry_run"]
        },
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ];

    // whether and how to alert (on,off,dry_run)
    // this is optional and defaults to "on"
    optional string alert = 9 [
        (buf.validate.field).string = {
            in: ["on", "off", "dry_run"]
        },
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ];

    // type is a placeholder for the object type. It should always be set to "profile".
    string type = 10 [
        (buf.validate.field).string = {
            pattern: "profile",
        }
    ];

    // version is the version of the profile type. In this case, it is "v1"
    string version = 11 [
        (buf.validate.field).string = {
            pattern: "^v\\d$",
        }
    ];

    // display_name is the display name of the profile.
    string display_name = 13 [
        (buf.validate.field).string = {
            pattern: "^[A-Za-z][-/'()[:word:] :]*$",
            max_len: 1000,
        },
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ];
}

message ListProjectsRequest {

}

message ListProjectsResponse {
    repeated Project projects = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
}

message CreateProjectRequest {
    // context is the context in which the project is created.
    Context context = 1;

    // name is the name of the project to create.
    string name = 2 [
        (buf.validate.field).string = {
            pattern: "^[A-Za-z][-/[:word:]]*$",
            max_len: 200,
        },
        (google.api.field_behavior) = REQUIRED
    ];
}

message CreateProjectResponse {
    // project is the project that was created.
    Project project = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
}

message DeleteProjectRequest {
    // context is the context in which the project is deleted.
    Context context = 1;
}

message DeleteProjectResponse {
    // project_id is the id of the project that was deleted.
    string project_id = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
}

message UpdateProjectRequest {
    // context is the context in which the project is updated.
    Context context = 1;

    // display_name is the display name of the project to update.
    // This is optional.
    string display_name = 2 [
        (buf.validate.field).string = {
            pattern: "^[A-Za-z][-/'()[:word:] :]*$",
            max_len: 200,
        },
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ];

    // description is the description of the project to update.
    // This is optional.
    string description = 3 [
        (buf.validate.field).string = {
            pattern: "^[A-Za-z][-/.!?,:;'[:word:] ]*$",
            min_len: 0,
            max_len: 1000,
        },
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ];
}

message UpdateProjectResponse {
    // project is the project that was updated.
    Project project = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
}

message ProjectPatch {
    // display_name is the display name of the project to update.
    optional string display_name = 1 [
        (buf.validate.field).string = {
            pattern: "^[A-Za-z][-/'()[:word:] :]*$",
            max_len: 200,
        },
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ];

    // description is the description of the project to update.
    optional string description = 2 [
        (buf.validate.field).string = {
            pattern: "^[A-Za-z][-/.!?,:;'[:word:] ]*$",
            min_len: 0,
            max_len: 1000,
        },
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ];
}

message PatchProjectRequest {
    // context is the context in which the project is updated.
    Context context = 1;

    // patch is the patch to apply to the project
    ProjectPatch patch = 3;

    // needed to enable PATCH, see https://grpc-ecosystem.github.io/grpc-gateway/docs/mapping/patch_feature/
    // is not exposed to the API user
    google.protobuf.FieldMask update_mask = 4;
}

message PatchProjectResponse {
    // project is the project that was updated.
    Project project = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
}

message ListChildProjectsRequest {
    // context is the context in which the child projects are listed.
    ContextV2 context = 1;

    // recursive is true if child projects should be listed recursively.
    bool recursive = 2;
}

message ListChildProjectsResponse {
    repeated Project projects = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
}

message CreateEntityReconciliationTaskRequest {
    // entity is the entity to be reconciled.
    EntityTypedId entity = 1 [
        (google.api.field_behavior) = REQUIRED
    ];

    // context is the context in which the entity reconciliation task is created.
    Context context = 2;
}

message CreateEntityReconciliationTaskResponse {
}

message ListRolesRequest {
    // context is the context in which the roles are evaluated.
    Context context = 1;
}

message ListRolesResponse {
    repeated Role roles = 1;
}

message ListRoleAssignmentsRequest {
    // context is the context in which the role assignments are evaluated.
    Context context = 1;
}

message ListRoleAssignmentsResponse {
    // role_assignments contains permission grants which have been accepted
    // by a user.
    repeated RoleAssignment role_assignments = 1;

    // invitations contains outstanding role invitations which have not yet
    // been accepted by a user.
    repeated Invitation invitations = 2;
}

message AssignRoleRequest {
    // context is the context in which the role assignment is evaluated.
    Context context = 1;
    // role_assignment is the role assignment to be created.
    RoleAssignment role_assignment = 2;
}

message AssignRoleResponse {
    // role_assignment is the role assignment that was created.
    RoleAssignment role_assignment = 1;

    // invitation contains the details of the invitation for the
    // assigned user to join the project if the user is not already
    // a member.
    Invitation invitation = 2;
}

message UpdateRoleRequest {
    // context is the context in which the role assignment is evaluated.
    Context context = 1;
    // subject is the account to change permissions for.
    // The account must already have permissions on the project
    string subject = 2 [
        (buf.validate.field).string = {uuid: true},
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ];
    // All subject roles are _replaced_ with the following role assignments.  Must be non-empty,
    // use RemoveRole to remove permissions entirely from the project.
    repeated string roles = 4 [
        (buf.validate.field).repeated = {
            items: {
                string: {
                    pattern: "^[a-z]+(_[a-z]+)*$",
                    min_len: 1,
                    max_len: 200,
                }
            }
        }
    ];
    // email is the email address of the subject used for updating invitations
    string email = 5 [
      (buf.validate.field) = {string: {email: true}},
      (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ];

    reserved 3; // deprecated repeated string role = 3;
    reserved "role";
}

message UpdateRoleResponse {
    // role_assignments are the role assignments that were updated.
    repeated RoleAssignment role_assignments = 1;
    // invitations contains the details of the invitations that were updated.
    repeated Invitation invitations = 2;
}


message RemoveRoleRequest {
    // context is the context in which the role assignment is evaluated.
    Context context = 1;
    // role_assignment is the role assignment to be removed.
    RoleAssignment role_assignment = 2;
}

message RemoveRoleResponse {
    // role_assignment is the role assignment that was removed.
    RoleAssignment role_assignment = 1;
    // invitation contains the details of the invitation that was removed.
    Invitation invitation = 2;
}

message Role {
    // name is the name of the role.
    string name = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
    // display name of the role
    string display_name = 3 [
        (google.api.field_behavior) = REQUIRED
    ];
    // description is the description of the role.
    string description = 2 [
        (google.api.field_behavior) = REQUIRED
    ];
}

message RoleAssignment {
    // role is the role that is assigned.
    string role = 1 [
        (buf.validate.field).string = {
            pattern: "^[a-z]+(_[a-z]+)*$",
            min_len: 1,
            max_len: 200,
        }
    ];
    // subject is the subject to which the role is assigned.
    string subject = 2 [
        (buf.validate.field).string = {uuid: true},
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ];
    // display_name is the display name of the subject.
    string display_name = 5 [
        (buf.validate.field).string = {
            pattern: "^[A-Za-z][-/'()[:word:] :]*$",
            max_len: 200,
        },
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ];
    // project is the project in which the role is assigned.
    optional string project = 4 [
        (buf.validate.field).string = {uuid: true},
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ];
    // email is the email address of the subject used for invitations.
    string email = 6 [
        (buf.validate.field) = {string: {email: true}},
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ];
    // first_name is the first name of the subject.
    string first_name = 7 [
        (buf.validate.field).string = {
            pattern: "^[A-Za-z][- [:word:]\\[\\]\\(\\)]*$",
            max_len: 200,
        },
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ];
    // last_name is the last name of the subject.
    string last_name = 8 [
        (buf.validate.field).string = {
            pattern: "^[A-Za-z][- [:word:]\\[\\]\\(\\)]*$",
            max_len: 200,
        },
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ];

    reserved 3; // deprecated context
}

message ListInvitationsRequest {
}

message ListInvitationsResponse {
    repeated Invitation invitations = 1;
}

message ResolveInvitationRequest {
    // code is the code of the invitation to resolve.
    string code = 1 [
        (buf.validate.field).string = {
            pattern: "^[A-Za-z0-9_-]+$",
            len: 64,
        }
    ];
    // accept is true if the invitation is accepted, false if it is rejected.
    bool accept = 2;
}

message ResolveInvitationResponse {
    // role is the role that would be assigned if the user
    // accepts the invitation.
    string role = 1;
    // email is the email address of the invited user.
    string email = 2;
    // project is the project to which the user is invited.
    string project = 3;
    // is_accepted is the status of the invitation.
    bool is_accepted = 4;
    // project_display is the display name of the project to which the user
    // is invited.
    string project_display = 5;
}

message Invitation {
    // role is the role that would be assigned if the user
    // accepts the invitation.
    string role = 1;
    // email is the email address of the invited user.  This is
    // presented as a convenience for display purposes, and does
    // not affect who can accept the invitation using the code.
    string email = 2;
    // project is the project to which the user is invited.
    string project = 3;

    // code is a unique identifier for the invitation, which can
    // be used by the recipient to accept or reject the invitation.
    // The code is only transmitted in response to AssignRole or
    // ListInvitations RPCs, and not transmitted in
    // ListRoleAssignments or other calls.
    string code = 4;

    // created_at is the time at which the invitation was created.
    google.protobuf.Timestamp created_at = 5;
    // expires_at is the time at which the invitation expires.
    google.protobuf.Timestamp expires_at = 6;
    // expired is true if the invitation has expired.
    bool expired = 9;

    // sponsor is the account (ID) of the user who created the invitation.
    string sponsor = 7;
    // sponsor_display is the display name of the user who created the
    // invitation.
    string sponsor_display = 8;
    // project_display is the display name of the project to which the user
    // is invited.
    string project_display = 10;
    // inviteURL is the URL that can be used to accept the invitation.
    string invite_url = 11;
    // emailSkipped is true if the email was not sent to the invitee.
    bool email_skipped = 12;
}

message GetProviderRequest {
    // context is the context in which the provider is evaluated.
    Context context = 1;
    // name is the name of the provider to get.
    string name = 2 [
        (buf.validate.field).string = {
            pattern: "^[-[:word:]]*$",
            max_len: 200,
        },
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ];
}

message GetProviderResponse {
    // provider is the provider that was retrieved.
    Provider provider = 1;
}

message ListProvidersRequest {
    // context is the context in which the providers are evaluated.
    Context context = 1;

    // limit is the maximum number of providers to return.
    // 0 uses a server-defined default.
    int32 limit = 2 [
        (buf.validate.field).int32 = {gte: 0, lte: 100}
    ];

    // cursor is the cursor to use for the page of results, empty if at the beginning
    string cursor = 3 [
        (buf.validate.field).string = {
            pattern: "^[[:word:]=]*$",
            max_len: 200,
        }
    ];
}

message ListProvidersResponse {
    repeated Provider providers = 1;

    // cursor is the cursor to use for the next page of results, empty if at the end
    string cursor = 2;
}

message CreateProviderRequest {
    // context is the context in which the provider is created.
    Context context = 1;
    // provider is the provider to be created.
    Provider provider = 2;
}

message CreateProviderResponse {
    // provider is the provider that was created.
    Provider provider = 1;

    // authorization provides additional authorization information needed
    // to complete the initialization of the provider.
    AuthorizationParams authorization = 2;
}

message DeleteProviderRequest {
    // context is the context in which the provider is deleted.  Both
    // project and provider are required in this context.
    Context context = 1;
}

message DeleteProviderResponse {
    // name is the name of the provider that was deleted
    string name = 1;
}

message DeleteProviderByIDRequest {
    // context is the context in which the provider is deleted. Only the project is required in this context.
    Context context = 1;
    // id is the id of the provider to delete
    string id = 2 [
        (buf.validate.field).string = {uuid: true}
    ];
}

message DeleteProviderByIDResponse {
    // id is the id of the provider that was deleted
    string id = 1;
}

message ListProviderClassesRequest {
    // context is the context in which the provider classes are evaluated.
    Context context = 1;
}

message ListProviderClassesResponse {
    // provider_classes is the list of provider classes.
    repeated string provider_classes = 1;
}

message PatchProviderRequest {
    Context context = 1;
    Provider patch = 2;

    google.protobuf.FieldMask update_mask = 3;
}

message PatchProviderResponse {
    Provider provider = 1;
}

message AuthorizationParams {
    // authorization_url is an external URL to use to authorize the provider.
    string authorization_url = 1;

}

message ProviderParameter {
    oneof parameters {
        GitHubAppParams github_app = 1;
    }
}

// GitHubAppParams is the parameters for a GitHub App provider.
message GitHubAppParams {
    // The GitHub installation ID for the app.  On create, this is the only
    // parameter used; the organization parameters are ignored.
    int64 installation_id = 1 [
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE,
        (buf.validate.field).int64 = {gt: 0}
    ];

    // The GitHub organization slug where the app is installed.  This is an
    // output-only parameter, and is validated on input if set (i.e. the value
    // must be either empty or match the org of the installation_id).
    string organization = 2;
    // The GitHub organization ID where the app is installed.  This is an
    // output-only parameter, and is validated on input if set (i.e. the value
    // must be either empty or match the org of the installation_id).
    int64 organization_id = 3 [
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE,
        (buf.validate.field).int64 = {gt: 0}
    ];
}

// ProviderTrait is the type of the provider.
enum ProviderType {
    PROVIDER_TYPE_UNSPECIFIED = 0;
    PROVIDER_TYPE_GITHUB = 1 [(name) = "github"];
    PROVIDER_TYPE_REST = 2 [(name) = "rest"];
    PROVIDER_TYPE_GIT = 3 [(name) = "git"];
    PROVIDER_TYPE_OCI = 4 [(name) = "oci"];
    PROVIDER_TYPE_REPO_LISTER = 5 [(name) = "repo-lister"];
    PROVIDER_TYPE_IMAGE_LISTER = 6 [(name) = "image-lister"];
}

enum ProviderClass {
    PROVIDER_CLASS_UNSPECIFIED = 0;
    PROVIDER_CLASS_GITHUB = 1 [(name) = "github"];
    PROVIDER_CLASS_GITHUB_APP = 2 [(name) = "github-app"];
    PROVIDER_CLASS_GHCR = 3 [(name) = "ghcr"];
    PROVIDER_CLASS_DOCKERHUB = 4 [(name) = "dockerhub"];
}

enum AuthorizationFlow {
    AUTHORIZATION_FLOW_UNSPECIFIED = 0;
    AUTHORIZATION_FLOW_NONE = 1 [(name) = "none"];
    AUTHORIZATION_FLOW_USER_INPUT = 2 [(name) = "user_input"];
    AUTHORIZATION_FLOW_OAUTH2_AUTHORIZATION_CODE_FLOW = 3 [(name) = "oauth2_authorization_code_flow"];
    AUTHORIZATION_FLOW_GITHUB_APP_FLOW = 4 [(name) = "github_app_flow"];
}

enum CredentialsState {
    CREDENTIALS_STATE_UNSPECIFIED = 0;
    CREDENTIALS_STATE_SET = 1 [(name) = "set"];
    CREDENTIALS_STATE_UNSET = 2 [(name) = "unset"];
    CREDENTIALS_STATE_NOT_APPLICABLE = 3 [(name) = "not_applicable"];
}

message Provider {
    // name is the name of the provider.
    string name = 1 [
        (buf.validate.field).string = {
            pattern: "^[A-Za-z][-[:word:]]*$",
            max_len: 200,
        },
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ];
    // class is the name of the provider implementation, eg. 'github' or 'gh-app'.
    string class = 7 [
        (buf.validate.field).string = {
            pattern: "^[a-z][a-z0-9_-]*$",
            max_len: 200,
        },
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ];
    // project is the project where the provider is.  This is ignored on input
    // in favor of the context field in CreateProviderRequest.
    string project = 2;
    // version is the version of the provider.
    string version = 3 [
        (buf.validate.field).string = {
            pattern: "v1",
        }
    ];

    // implements is the list of interfaces that the provider implements.
    repeated ProviderType implements = 4;

    // config is the configuration of the provider.
    google.protobuf.Struct config = 5;

    // auth_flows is the list of authorization flows that the provider supports.
    repeated AuthorizationFlow auth_flows = 6;

    // parameters is the list of parameters that the provider requires.
    ProviderParameter parameters = 8;

    // credentials_state is the state of the credentials for the provider.
    // This is an output-only field. It may be: "set", "unset", "not_applicable".
    string credentials_state = 9;

    // id is the unique identifier of the provider.
    string id = 10 [
        (buf.validate.field).string = {uuid: true},
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ];
}

// GetEvaluationHistoryRequest represents a request for the GetEvaluationHistory endpoint
message GetEvaluationHistoryRequest {
    string id = 1 [
        (buf.validate.field).string = {uuid: true}
    ];

    Context context = 2;
}

// ListEvaluationHistoryRequest represents a request message for the
// ListEvaluationHistory RPC.
//
// Most of its fields are used for filtering, except for `cursor`
// which is used for pagination.
message ListEvaluationHistoryRequest {
    Context context = 1;

    // List of entity types to retrieve.
    repeated string entity_type = 2 [
        (buf.validate.field).repeated = {
            items: {
                string: {
                    pattern: "^[,[:word:]]*$",
                    max_len: 200,
                }
            }
        },
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ];
    // List of entity names to retrieve.
    repeated string entity_name = 3 [
        (buf.validate.field).repeated = {
            items: {
                string: {
                    pattern: "^[,-./[:word:]]*$",
                    max_len: 200,
                }
            }
        },
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ];
    // List of profile names to retrieve.
    repeated string profile_name = 4 [
        (buf.validate.field).repeated = {
            items: {
                string: {
                    pattern: "^[A-Za-z][-/[:word:]]*$",
                    max_len: 200,
                }
            }
        },
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ];
    // List of evaluation statuses to retrieve.
    repeated string status = 5 [
        (buf.validate.field).repeated = {
            items: {
                string: {
                    pattern: "^[,[:word:]]*$",
                    max_len: 200,
                }
            }
        },
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ];
    // List of remediation statuses to retrieve.
    repeated string remediation = 6 [
        (buf.validate.field).repeated = {
            items: {
                string: {
                    pattern: "^[,[:word:]]*$",
                    max_len: 200,
                }
            }
        },
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ];
    // List of alert statuses to retrieve.
    repeated string alert = 7 [
        (buf.validate.field).repeated = {
            items: {
                string: {
                    pattern: "^[,[:word:]]*$",
                    max_len: 200,
                }
            }
        },
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ];
    // Timestamp representing the start time of the selection window.
    google.protobuf.Timestamp from = 8;
    // Timestamp representing the end time of the selection window.
    google.protobuf.Timestamp to = 9;

    // Filter evaluation history to only those matching the specified labels.
    //
    // The default is to return all user-created profiles; the string "*" can
    // be used to select all profiles, including system profiles.  This syntax
    // may be expanded in the future.
    repeated string label_filter = 11 [
        (buf.validate.field).repeated = {
	    items: {
	        string: {
		    pattern: "^(\\*|[a-z][a-z0-9_]*)$",
		    max_len: 200,
		},
	    },
	},
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ];

    // Cursor object to select the "page" of data to retrieve. This is optional.
    Cursor cursor = 10;
}

// GetEvaluationHistoryResponse represents a response message for the
// GetEvaluationHistory RPC.
message GetEvaluationHistoryResponse {
    // The requested record
    EvaluationHistory evaluation = 1;
}

// ListEvaluationHistoryResponse represents a response message for the
// ListEvaluationHistory RPC.
//
// It ships a collection of records retrieved and pointers to get to
// the next and/or previous pages of data.
message ListEvaluationHistoryResponse {
    // List of records retrieved.
    repeated EvaluationHistory data = 1;
    // Metadata of the current page and pointers to next and/or
    // previous pages.
    CursorPage page = 2;
}

message EvaluationHistory {
    // entity contains details of the entity which was evaluated.
    EvaluationHistoryEntity entity = 1;

    // rule contains details of the rule which the entity was evaluated against.
    EvaluationHistoryRule rule = 2;

    // status contains the evaluation status.
    EvaluationHistoryStatus status = 3;

    // alert contains details of the alerts for this evaluation.
    EvaluationHistoryAlert alert = 4;

    // remediation contains details of the remediation for this evaluation.
    EvaluationHistoryRemediation remediation = 5;

    // created_at is the timestamp of creation of this evaluation
    google.protobuf.Timestamp evaluated_at = 6;

    // id is the unique identifier of the evaluation.
    string id = 7;
}

message EvaluationHistoryEntity {
    // id is the unique identifier of the entity.
    string id = 1;

    // type is the entity type.
    Entity type = 2;

    // name is the entity name.
    string name = 3;
}

message EvaluationHistoryRule {
    // name is the name of the rule instance.
    string name = 1;

    // type is the name of the rule type.
    string rule_type = 2;

    // profile is the name of the profile which contains the rule.
    string profile = 3;

    // severity is the severity of the rule type.
    Severity severity = 4;
}

message EvaluationHistoryStatus {
    // status is one of (success, error, failure, skipped)
    // not using enums to mirror the behaviour of the existing API contracts.
    string status = 1;

    // details contains optional details about the evaluation.
    // the structure and contents are rule type specific, and are subject to change.
    string details = 2;
}

message EvaluationHistoryRemediation {
    // status is one of (success, error, failure, skipped, not available)
    // not using enums to mirror the behaviour of the existing API contracts.
    string status = 1;

    // details contains optional details about the remediation.
    // the structure and contents are remediation specific, and are subject to change.
    string details = 2;
}

message EvaluationHistoryAlert {
    // status is one of (on, off, error, skipped, not available)
    // not using enums to mirror the behaviour of the existing API contracts.
    string status = 1;

    // details contains optional details about the alert.
    // the structure and contents are alert specific, and are subject to change.
    string details = 2;
}

// used for parsing resources in ruletypes
message EntityInstance {
    // id is the unique identifier of the entity.
    string id = 1;

    // context is the context in which the entity is evaluated.
    ContextV2 context = 2;

    // name is the name of the entity.
    string name = 3;

    // type is the type of the entity.
    // DISCUSSION: If we're aiming for a BYO entity type, we should probably
    // have this be a string, and have the user provide the type.
    Entity type = 4;

    // properties is a map of properties of the entity.
    google.protobuf.Struct properties = 5;
}

// UpstreamEntityRef providers enough information for the
// provider to identify the entity in the upstream system.
message UpstreamEntityRef {
    // context is the context in which the entity is evaluated.
    // Note that the context is included here since users of
    // this message may return upstream references from
    // multiple providers
    ContextV2 context = 1;

    // type is the type of the entity.
    Entity type = 2;

    // properties is a map of properties of the entity.
    // This will be used to identify the entity in the upstream system
    // and will be a subset of the properties of the entity that will
    // be stored in Minder.
    google.protobuf.Struct properties = 3;
}

// DataSource is a Data source instance. Data sources represent
// external integrations that enrich the data in Minder, but do not
// have explicit lifecycle objects (entities).  Integrations which
// create entities are called Providers.
message DataSource {
    // version is the version of the data source API.
    string version = 1 [
        (buf.validate.field).string = {
            pattern: "^v\\d$",
        },
        (google.api.field_behavior) = REQUIRED
    ];

    // type is the data source type
    string type = 2 [
        (buf.validate.field).string = {
            in: ["data-source"],
            max_len: 12,
        }
    ];

    // context is the context in which the data source is evaluated.
    // Note that in this case we only need the project in the
    // context, since data sources are not provider-specific.
    ContextV2 context = 3;

    // name is the name of the data source.
    // Note that this is unique within a project hierarchy.
    // Names must be lowercase and can only contain letters, numbers,
    // hyphens, and underscores.
    string name = 4 [
        (buf.validate.field).string = {
            pattern: "^[a-z][-_[:word:]]*$",
            max_len: 200,
        },
        (google.api.field_behavior) = REQUIRED
    ];

    // id is the unique identifier of the data source.
    string id = 5 [
        (buf.validate.field).string = {uuid: true},
        (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE,
        (google.api.field_behavior) = OUTPUT_ONLY
    ];

    oneof driver {
        // rest is the REST data source driver.
        RestDataSource rest = 6;
    }
}

// RestDataSource is the REST data source driver.
message RestDataSource {
    message Def {
        // endpoint is the URL of the REST API. Note that endpoints are
        // templates that can be parameterized with variables. Parametrization
        // is done using RFC 6570.
        string endpoint = 1 [
            (buf.validate.field).string = {
                pattern: "^https?://.*$",
                max_len: 800,
            },
            (google.api.field_behavior) = REQUIRED
        ];

        // method is the HTTP method to use for the request.
        // If left unset, it will default to "GET".
        string method = 2 [
            (buf.validate.field).string = {
                in: ["GET", "POST", "PUT", "PATCH", "DELETE"]
            },
            (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
        ];

        // headers is a map of headers to send with the request.
        map<string, string> headers = 3;

        oneof body {
            // body is the body of the request.
            google.protobuf.Struct bodyobj = 4;
            // bodystr is the body of the request as a string.
            string bodystr = 5 [
                (buf.validate.field).string = {
                    max_len: 1000,
                }
            ];
        }

        // parse is the parse configuration for the response.
        // This allows us to serialize the response into a structured format,
        // or not.
        // If left unset, the response will be treated as a string.
        // If set to "json", the response will be parsed as JSON.
        string parse = 6 [
            (buf.validate.field).string = {
                in: ["json"]
            },
            (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
        ];

        message Fallback {
            int32 http_status = 1 [
                (buf.validate.field).int32 = {gte: 100, lte: 599},
                (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
            ];

            string body = 2 [
                (buf.validate.field).string = {
                    max_len: 1000,
                },
                (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
            ];
        }

        // fallback is the fallback configuration for the response in case
        // of an unexpected status code.
        repeated Fallback fallback = 7;

        // expected_status is the expected status code for the response.
        // This may be repeated to allow for multiple expected status codes.
        // If left unset, it will default to 200.
        repeated int32 expected_status = 8 [
            (buf.validate.field).repeated = {
                items: {
                    int32: {
                        gte: 100,
                        lte: 599,
                    }
                }
            },
            (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
        ];

        // input_schema is the schema for the input to the REST API.
        google.protobuf.Struct input_schema = 9;
    }

    // defs is the list of definitions for the REST API.
    map<string, Def> def = 1;
}

// DataSourceReference is a reference to a data source.
// Note that for a resource to refer to a data source the data source must
// be available in the same project hierarchy.
message DataSourceReference {
    // refer to a data source by name.
    string name = 1 [
        (buf.validate.field).string = {
            pattern: "^[a-z][-_[:word:]]*$",
            max_len: 200,
        }
    ];
}