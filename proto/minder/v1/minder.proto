//
// Copyright 2023 Stacklok, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package minder.v1;
import "google/api/annotations.proto";
import "google/protobuf/descriptor.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";
import "google/api/httpbody.proto";


option go_package = "github.com/stacklok/minder/pkg/api/protobuf/go/minder/v1";

enum ObjectOwner {
    OBJECT_OWNER_UNSPECIFIED = 0;
    OBJECT_OWNER_PROJECT = 2;
    OBJECT_OWNER_USER = 3;
    reserved 1; // deprecated OBJECT_OWNER_ORGANIZATION
}

enum Relation {
    RELATION_UNSPECIFIED = 0;
    RELATION_CREATE = 1 [(name) = "create"];
    RELATION_GET = 2 [(name) = "get"];
    RELATION_UPDATE = 3 [(name) = "update"];
    RELATION_DELETE = 4 [(name) = "delete"];
    RELATION_ROLE_LIST = 5 [(name) = "role_list"];
    RELATION_ROLE_ASSIGNMENT_LIST = 6 [(name) = "role_assignment_list"];
    RELATION_ROLE_ASSIGNMENT_CREATE = 7 [(name) = "role_assignment_create"];
    RELATION_ROLE_ASSIGNMENT_REMOVE = 8 [(name) = "role_assignment_remove"];
    RELATION_REPO_GET = 9 [(name) = "repo_get"];
    RELATION_REPO_CREATE = 10 [(name) = "repo_create"];
    RELATION_REPO_UPDATE = 11 [(name) = "repo_update"];
    RELATION_REPO_DELETE = 12 [(name) = "repo_delete"];
    RELATION_ARTIFACT_GET = 13 [(name) = "artifact_get"];
    RELATION_ARTIFACT_CREATE = 14 [(name) = "artifact_create"];
    RELATION_ARTIFACT_UPDATE = 15 [(name) = "artifact_update"];
    RELATION_ARTIFACT_DELETE = 16 [(name) = "artifact_delete"];
    RELATION_PR_GET = 17 [(name) = "pr_get"];
    RELATION_PR_CREATE = 18 [(name) = "pr_create"];
    RELATION_PR_UPDATE = 19 [(name) = "pr_update"];
    RELATION_PR_DELETE = 20 [(name) = "pr_delete"];
    RELATION_PROVIDER_GET = 21 [(name) = "provider_get"];
    RELATION_PROVIDER_CREATE = 22 [(name) = "provider_create"];
    RELATION_PROVIDER_UPDATE = 23 [(name) = "provider_update"];
    RELATION_PROVIDER_DELETE = 24 [(name) = "provider_delete"];
    RELATION_RULE_TYPE_GET = 25 [(name) = "rule_type_get"];
    RELATION_RULE_TYPE_CREATE = 26 [(name) = "rule_type_create"];
    RELATION_RULE_TYPE_UPDATE = 27 [(name) = "rule_type_update"];
    RELATION_RULE_TYPE_DELETE = 28 [(name) = "rule_type_delete"];
    RELATION_PROFILE_GET = 29 [(name) = "profile_get"];
    RELATION_PROFILE_CREATE = 30 [(name) = "profile_create"];
    RELATION_PROFILE_UPDATE = 31 [(name) = "profile_update"];
    RELATION_PROFILE_DELETE = 32 [(name) = "profile_delete"];
    RELATION_PROFILE_STATUS_GET = 33 [(name) = "profile_status_get"];
    RELATION_REMOTE_REPO_GET = 34 [(name) = "remote_repo_get"];
}

extend google.protobuf.EnumValueOptions {
    optional string name = 42445;
}

enum TargetResource {
    TARGET_RESOURCE_UNSPECIFIED = 0;
    TARGET_RESOURCE_NONE = 1;
    TARGET_RESOURCE_USER = 2;
    TARGET_RESOURCE_PROJECT = 3;
}

message RpcOptions {
    bool no_log = 2;
    TargetResource target_resource = 6;
    Relation relation = 7;
    reserved 1, 3, 4, 5; // deprecated anonymous, owner_only, root_admin_only and auth_scope
}

extend google.protobuf.MethodOptions {
    RpcOptions rpc_options = 51077;
}

// Simple Health Check Service
// replies with OK
service HealthService {
    rpc CheckHealth (CheckHealthRequest) returns (CheckHealthResponse) {
        option (google.api.http) = {
            get: "/api/v1/health"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_NONE
            no_log: true
        };
    }
}

service ArtifactService {
    rpc ListArtifacts (ListArtifactsRequest) returns (ListArtifactsResponse) {
        option (google.api.http) = {
            get: "/api/v1/artifacts/{provider}"
            additional_bindings {
                get: "/api/v1/artifacts"
            }
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_ARTIFACT_GET
        };
    }

    rpc GetArtifactById (GetArtifactByIdRequest) returns (GetArtifactByIdResponse) {
        option (google.api.http) = {
            get: "/api/v1/artifact/{id}"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_ARTIFACT_GET
        };
    }

    rpc GetArtifactByName (GetArtifactByNameRequest) returns (GetArtifactByNameResponse) {
        option (google.api.http) = {
            get: "/api/v1/artifact/name/{name}"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_ARTIFACT_GET
        };
    }
}

message ListArtifactsRequest {
    string provider = 1;
    Context context = 3;
    string from = 4;

    reserved 2; // deprecated project_id
}

message ListArtifactsResponse {
    repeated Artifact results = 1;
}

message Artifact {
    string artifact_pk = 1;
    string owner = 2;
    string name = 3;
    string type = 4;
    string visibility = 5;
    string repository = 6;
    repeated ArtifactVersion versions = 7;
    google.protobuf.Timestamp created_at = 8;
}

message ArtifactVersion {
    int64 version_id = 1;
    repeated string tags = 2;
    string sha = 3;
    google.protobuf.Timestamp created_at = 6;

    reserved 4, 5;
    reserved "github_workflow", "signature_verification";
}

message GetArtifactByIdRequest {
    string id = 1;

    Context context = 7;

    reserved 5, 6; // deprecated latest_versions, tag
    reserved "latest_versions", "tag";
}

message GetArtifactByIdResponse {
    Artifact artifact = 1;
    repeated ArtifactVersion versions = 2;
}

message GetArtifactByNameRequest {
    string name = 1;
    Context context = 4;

    reserved 2, 3; // deprecated latest_versions, tag
    reserved "latest_versions", "tag";
}

message GetArtifactByNameResponse {
    Artifact artifact = 1;
    repeated ArtifactVersion versions = 2;
}

message PullRequest {
    string url = 1;         // The full URL to the PR
    string commit_sha = 2;   // Commit SHA of the PR HEAD. Will be useful to submit a review
    int32 number = 3;       // The sequential PR number (not the DB PK!)

    string repo_owner = 4;   // The owner of the repo, will be used to submit a review
    string repo_name = 5;    // The name of the repo, will be used to submit a review

    int64 author_id = 6;    // The author of the PR, will be used to check if we can request changes

    string action = 7;       // The action that triggered the webhook
}

enum DepEcosystem {
    DEP_ECOSYSTEM_UNSPECIFIED = 0;
    DEP_ECOSYSTEM_NPM = 1;
    DEP_ECOSYSTEM_GO = 2;
    DEP_ECOSYSTEM_PYPI = 3;
}

message Dependency {
    DepEcosystem ecosystem = 1;

    string name = 2;
    string version = 3;
}

message PrDependencies {
    message ContextualDependency {
        message FilePatch {
            string name = 1;      // file changed, e.g. package-lock.json
            string patch_url = 2;  // points to the the raw patchfile
        }

        Dependency dep = 1;
        FilePatch file = 2;
    }

    PullRequest pr = 1;
    repeated ContextualDependency deps = 2;
}

service OAuthService {
    rpc GetAuthorizationURL (GetAuthorizationURLRequest) returns (GetAuthorizationURLResponse) {
        option (google.api.http) = {
            get: "/api/v1/auth/url"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_PROVIDER_UPDATE
        };
    }
    // buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
    rpc ExchangeCodeForTokenCLI (ExchangeCodeForTokenCLIRequest) returns (google.api.HttpBody) {  // protolint:disable:this
        option (google.api.http) = {
            get: "/api/v1/auth/callback/{provider}/cli"
            additional_bindings {
                get: "/api/v1/auth/callback/cli"
            }
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_NONE  // Don't need token auth for code exchange
        };
    }

    rpc StoreProviderToken (StoreProviderTokenRequest) returns (StoreProviderTokenResponse) {
        option (google.api.http) = {
            post: "/api/v1/auth/{provider}/token"
            additional_bindings {
                post: "/api/v1/auth/token"
            }
            body: "*"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_PROVIDER_UPDATE
        };
    }

    // VerifyProviderTokenFrom verifies that a token has been created for a provider since given timestamp
    rpc VerifyProviderTokenFrom (VerifyProviderTokenFromRequest) returns (VerifyProviderTokenFromResponse) {
        option (google.api.http) = {
            get: "/api/v1/auth/verify/{provider}/{timestamp}"
            additional_bindings {
                get: "/api/v1/auth/verify/{timestamp}"
            }
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_PROVIDER_UPDATE
        };
    }

}

service RepositoryService {
    rpc RegisterRepository (RegisterRepositoryRequest) returns (RegisterRepositoryResponse) {
        option (google.api.http) = {
            post: "/api/v1/repository/provider/{provider}/register"
            additional_bindings {
                post: "/api/v1/repository/register"
            }
            body: "*"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_REPO_CREATE
        };
    }
    rpc ListRemoteRepositoriesFromProvider(ListRemoteRepositoriesFromProviderRequest) returns (ListRemoteRepositoriesFromProviderResponse) {
        option (google.api.http) = {
            get: "/api/v1/repositories/provider/{provider}/remote"
            additional_bindings {
                get: "/api/v1/repositories/remote"
            }
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_REMOTE_REPO_GET
        };
    }
    rpc ListRepositories (ListRepositoriesRequest) returns (ListRepositoriesResponse) {
        option (google.api.http) = {
            get: "/api/v1/repositories/provider/{provider}"
            additional_bindings {
                get: "/api/v1/repositories"
            }
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_REPO_GET
        };
    }
    rpc GetRepositoryById (GetRepositoryByIdRequest) returns (GetRepositoryByIdResponse) {
        option (google.api.http) = {
            get: "/api/v1/repository/id/{repository_id}"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_REPO_GET
        };
    }

    rpc GetRepositoryByName (GetRepositoryByNameRequest) returns (GetRepositoryByNameResponse) {
        option (google.api.http) = {
            get: "/api/v1/repository/provider/{provider}/name/{name}"
            additional_bindings {
                get: "/api/v1/repository/name/{name}"
            }
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_REPO_GET
        };
    }

    rpc DeleteRepositoryById (DeleteRepositoryByIdRequest) returns (DeleteRepositoryByIdResponse) {
        option (google.api.http) = {
            delete: "/api/v1/repository/id/{repository_id}"
        };

        option (minder.v1.rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_REPO_DELETE
        };
    }

    rpc DeleteRepositoryByName (DeleteRepositoryByNameRequest) returns (DeleteRepositoryByNameResponse) {
        option (google.api.http) = {
            delete: "/api/v1/repository/provider/{provider}/name/{name}"
            additional_bindings {
                delete: "/api/v1/repository/name/{name}"
            }
        };

        option (minder.v1.rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_REPO_DELETE
        };
    }
}

// manage Users CRUD
service UserService {
    rpc CreateUser (CreateUserRequest) returns (CreateUserResponse) {
        option (google.api.http) = {
            post: "/api/v1/user"
            body: "*"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_USER
        };
    }

    rpc DeleteUser (DeleteUserRequest) returns (DeleteUserResponse) {
        option (google.api.http) = {
            delete: "/api/v1/user"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_USER
        };
    }

    rpc GetUser (GetUserRequest) returns (GetUserResponse) {
        option (google.api.http) = {
            get: "/api/v1/user"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_USER
        };
    }

}

service ProfileService {
    rpc CreateProfile (CreateProfileRequest) returns (CreateProfileResponse) {
        option (google.api.http) = {
            post: "/api/v1/profile"
            body: "*"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_PROFILE_CREATE
        };
    }

    rpc UpdateProfile (UpdateProfileRequest) returns (UpdateProfileResponse) {
        option (google.api.http) = {
            put: "/api/v1/profile"
            body: "*"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_PROFILE_UPDATE
        };
    }

    rpc DeleteProfile (DeleteProfileRequest) returns (DeleteProfileResponse) {
        option (google.api.http) = {
            delete: "/api/v1/profile/{id}"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_PROFILE_DELETE
        };
    }

    rpc ListProfiles (ListProfilesRequest) returns (ListProfilesResponse) {
        option (google.api.http) = {
            get: "/api/v1/profiles"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_PROFILE_GET
        };
    }

    rpc GetProfileById (GetProfileByIdRequest) returns (GetProfileByIdResponse) {
        option (google.api.http) = {
            get: "/api/v1/profile/{id}"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_PROFILE_GET
        };
    }

    rpc GetProfileStatusByName (GetProfileStatusByNameRequest) returns (GetProfileStatusByNameResponse) {
        option (google.api.http) = {
            get: "/api/v1/profile/name/{name}/status"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_PROFILE_STATUS_GET
        };
    }

    rpc GetProfileStatusByProject (GetProfileStatusByProjectRequest) returns (GetProfileStatusByProjectResponse) {
        option (google.api.http) = {
            get: "/api/v1/profile_status"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_PROFILE_STATUS_GET
        };
    }    

    rpc ListRuleTypes (ListRuleTypesRequest) returns (ListRuleTypesResponse) {
        option (google.api.http) = {
            get: "/api/v1/rule_types"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_RULE_TYPE_GET
        };
    }

    rpc GetRuleTypeByName (GetRuleTypeByNameRequest) returns (GetRuleTypeByNameResponse) {
        option (google.api.http) = {
            get: "/api/v1/rule_type/name/{name}"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_RULE_TYPE_GET
        };
    }

    rpc GetRuleTypeById (GetRuleTypeByIdRequest) returns (GetRuleTypeByIdResponse) {
        option (google.api.http) = {
            get: "/api/v1/rule_type/{id}"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_RULE_TYPE_GET
        };
    }

    rpc CreateRuleType (CreateRuleTypeRequest) returns (CreateRuleTypeResponse) {
        option (google.api.http) = {
            post: "/api/v1/rule_type"
            body: "*"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_RULE_TYPE_CREATE
        };
    }

    rpc UpdateRuleType (UpdateRuleTypeRequest) returns (UpdateRuleTypeResponse) {
        option (google.api.http) = {
            put: "/api/v1/rule_type"
            body: "*"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_RULE_TYPE_UPDATE
        };
    }

    rpc DeleteRuleType (DeleteRuleTypeRequest) returns (DeleteRuleTypeResponse) {
        option (google.api.http) = {
            delete: "/api/v1/rule_type/{id}"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_RULE_TYPE_DELETE
        };
    }
}

service PermissionsService {
    rpc ListRoles (ListRolesRequest) returns (ListRolesResponse) {
        option (google.api.http) = {
            get: "/api/v1/permissions/roles"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_ROLE_LIST
        };
    }

    rpc ListRoleAssignments (ListRoleAssignmentsRequest) returns (ListRoleAssignmentsResponse) {
        option (google.api.http) = {
            get: "/api/v1/permissions/assignments"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_ROLE_ASSIGNMENT_LIST
        };
    }

    rpc AssignRole (AssignRoleRequest) returns (AssignRoleResponse) {
        option (google.api.http) = {
            post: "/api/v1/permissions/assign"
            body: "*"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_ROLE_ASSIGNMENT_CREATE
        };
    }

    rpc RemoveRole (RemoveRoleRequest) returns (RemoveRoleResponse) {
        // The role name comes from the name field in the role object
        option (google.api.http) = {
            delete: "/api/v1/permissions/remove/{role_assignment.role}/subject/{role_assignment.subject}"
        };

        option (rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_ROLE_ASSIGNMENT_REMOVE
        };
    }
}

message CheckHealthRequest {
}

message CheckHealthResponse {
    string status = 1;
}

message GetAuthorizationURLRequest {
    bool  cli = 3;
    int32  port = 4;
    optional string owner = 5;
    Context context = 6;

    reserved 1, 2; // deprecated provider and project_id
}

message GetAuthorizationURLResponse {
    string url = 1;
}

message ExchangeCodeForTokenCLIRequest {
    string provider = 1 [deprecated=true];
    string code = 3;
    string state = 4;
    string redirect_uri = 5;
    Context context = 6;

    reserved 2; // deprecated project_id
}

message StoreProviderTokenRequest {
    string provider = 1 [deprecated=true];
    string access_token = 3;
    optional string owner = 4;
    Context context = 5;

    reserved 2; // deprecated project_id
}

message StoreProviderTokenResponse {    
}

// Project API Objects
message Project {
    string project_id = 1;
    string name = 3;
    string description = 4;
    google.protobuf.Timestamp created_at = 6;
    google.protobuf.Timestamp updated_at = 7;
}

// Repositories API objects

message ListRemoteRepositoriesFromProviderRequest {
    string provider = 1 [deprecated=true];
    Context context = 3;

    reserved 2; // deprecated project_id
}

message ListRemoteRepositoriesFromProviderResponse {
    repeated UpstreamRepositoryRef results = 1;
}

message UpstreamRepositoryRef {
    string owner = 1;
    string name = 2;
    int32 repo_id = 3;
}

message Repository {
    optional string id = 1; // This is optional when returning remote repositories
    optional Context context = 2;
    string owner = 3;
    string name = 4;
    int32 repo_id = 5;
    int64 hook_id = 6;
    string hook_url = 7;
    string deploy_url = 8;
    string clone_url = 9;
    string hook_name = 10;
    string hook_type = 11;
    string hook_uuid = 12;
    bool is_private = 13;
    bool is_fork = 14;
    bool registered = 15;
    google.protobuf.Timestamp created_at = 16;
    google.protobuf.Timestamp updated_at = 17;
    string default_branch = 18;
}

message RegisterRepositoryRequest {
    string provider = 1 [deprecated=true];
    UpstreamRepositoryRef repository = 3;
    Context context = 4;

    reserved 2; // deprecated project_id
}

message RegisterRepoResult {
    message Status {
        bool success = 1;
        optional string error = 2;
    }

    Repository repository = 1;
    Status status = 2;
}

message RegisterRepositoryResponse {
    RegisterRepoResult result = 1;
}

message GetRepositoryByIdRequest {
    string repository_id = 1;
    Context context = 2;
}

message GetRepositoryByIdResponse {
    Repository repository = 1;
}

message DeleteRepositoryByIdRequest {
    string repository_id = 1;
    Context context = 2;
}

message DeleteRepositoryByIdResponse {
    string repository_id = 1;
}

message GetRepositoryByNameRequest {
    string provider = 1 [deprecated=true];
    string name = 3;
    Context context = 4;

    reserved 2; // deprecated project_id
}

message GetRepositoryByNameResponse {
    Repository repository = 1;
}

message DeleteRepositoryByNameRequest {
    string provider = 1 [deprecated=true];
    string name = 3;
    Context context = 4;

    reserved 2; // deprecated project_id
}

message DeleteRepositoryByNameResponse {
    string name = 1;
}

message ListRepositoriesRequest {
    string provider = 1 [deprecated=true];
    int32 limit = 3;
    Context context = 5;
    string cursor = 6;

    reserved 2,4; // deprecated project_id, offset
    reserved "project_id", "offset";
}

message ListRepositoriesResponse {
    repeated Repository results = 1;

    // cursor is the cursor to use for the next page of results, empty if at the end
    string cursor = 2;
}

message VerifyProviderTokenFromRequest {
    string provider = 1 [deprecated=true];
    google.protobuf.Timestamp timestamp = 3;
    Context context = 4;

    reserved 2; // deprecated project_id
}

message VerifyProviderTokenFromResponse {
    string status = 1;
}

message BranchProtection {
  string branch = 1;
  bool is_protected = 2;
  // Add other relevant fields
}

// User service
message CreateUserRequest { }

message CreateUserResponse {
    int32 id = 1;
    string organization_id = 2;
    string organizatio_name = 3;
    string project_id = 4;
    string project_name = 5;
    string identity_subject = 6;
    google.protobuf.Timestamp created_at = 7;
    Context context = 8;
}

message DeleteUserRequest {
    reserved 1; // deprecated context
}

message DeleteUserResponse {
}

// user record to be returned
message UserRecord {
    int32 id = 1;
    string organization_id = 2;
    string identity_subject = 3;
    google.protobuf.Timestamp created_at = 4;
    google.protobuf.Timestamp updated_at = 5;
}

// list users
// get user
message GetUserRequest {
    reserved 1; // deprecated context
}

message GetUserResponse {
    optional UserRecord user = 1;
    repeated Project projects = 2;
}

// Profile service
message CreateProfileRequest {
    Profile profile = 1;
    reserved 2; // deprecated context
}

message CreateProfileResponse {
    Profile profile = 1;
}

message UpdateProfileRequest {
    Profile profile = 1;
    reserved 2; // deprecated context
}

message UpdateProfileResponse {
    Profile profile = 1;
}

message DeleteProfileRequest {
    // context is the context in which the rule type is evaluated.
    Context context = 1;
    // id is the id of the profile to delete
    string id = 2;
}

message DeleteProfileResponse {
}

// list profiles
message ListProfilesRequest {
    // context is the context which contains the profiles
    Context context = 1;
}

message ListProfilesResponse {
    repeated Profile profiles = 1;
}

// get profile by id
message GetProfileByIdRequest {
    // context is the context which contains the profiles
    Context context = 1;
    // id is the id of the profile to get
    string id = 2;
}

message GetProfileByIdResponse {
    Profile profile = 1;
}

// get the overall profile status
message ProfileStatus {
    // profile_id is the id of the profile
    string profile_id = 1;
    // profile_name is the name of the profile
    string profile_name = 2;
    // profile_status is the status of the profile
    string profile_status = 3;
    // last_updated is the last time the profile was updated
    google.protobuf.Timestamp last_updated = 4;
}

// get the status of the rules for a given profile
message RuleEvaluationStatus {
    // profile_id is the id of the profile
    string profile_id = 1;
    // rule_id is the id of the rule
    string rule_id = 2;
    // rule_name is the type of the rule. Deprecated in favor of rule_type_name
    string rule_name = 3 [deprecated=true];
    // entity is the entity that was evaluated
    string entity = 4;
    // status is the status of the evaluation
    string status = 5;
    // last_updated is the last time the profile was updated
    google.protobuf.Timestamp last_updated = 6;
    // entity_info is the information about the entity
    map<string, string> entity_info = 7;
    // details is the description of the evaluation if any
    string details = 8;
    // guidance is the guidance for the evaluation if any
    string guidance = 9;
    // remediation_status is the status of the remediation
    string remediation_status = 10;
    // remediation_last_updated is the last time the remediation was performed or attempted
    optional google.protobuf.Timestamp remediation_last_updated = 11;
    // remediation_details is the description of the remediation attempt if any
    string remediation_details = 12;
    // rule_type_name is the name of the rule
    string rule_type_name = 13;
    // rule_description_name is the name to describe the rule
    string rule_description_name = 14;
}

message GetProfileStatusByNameRequest {
    // context is the context in which the rule type is evaluated.
    Context context = 1;
    // name is the name of the profile to get
    string name = 2;

    // EntiryTypeId is a message that carries an ID together with a type to uniquely identify an entity
    // such as (repo, 1), (artifact, 2), ...
    // if the struct is reused in other messages, it should be moved to a top-level definition
    message EntityTypedId {
        // entity is the entity to get status for. Incompatible with `all`
        Entity type = 1;
        // id is the ID of the entity to get status for. Incompatible with `all`
        string id = 2;
    }

    EntityTypedId entity = 3;
    bool all = 4;

    // rule is the type of the rule. Deprecated in favor of rule_type
    string rule = 5 [deprecated=true];
    string rule_type = 6;
    string rule_name = 7;
}

message GetProfileStatusByNameResponse {
    // profile_status is the status of the profile
    ProfileStatus profile_status = 1;

    // rule_evaluation_status is the status of the rules
    repeated RuleEvaluationStatus rule_evaluation_status = 2;
}

message GetProfileStatusByProjectRequest {
    // context is the context in which the rule type is evaluated.
    Context context = 1;
}

message GetProfileStatusByProjectResponse {
    // profile_status is the status of the profile
    repeated ProfileStatus profile_status = 1;
}

// Entity defines the entity that is supported by the provider.
enum Entity {
    ENTITY_UNSPECIFIED = 0;
    ENTITY_REPOSITORIES = 1;
    ENTITY_BUILD_ENVIRONMENTS = 2;
    ENTITY_ARTIFACTS = 3;
    ENTITY_PULL_REQUESTS = 4;
}

// RESTProviderConfig contains the configuration for the REST provider.
message RESTProviderConfig {
    // base_url is the base URL for the REST provider.
	string base_url = 1;
}

// GitHubProviderConfig contains the configuration for the GitHub client
//
// Endpoint: is the GitHub API endpoint
//
// If using the public GitHub API, Endpoint can be left blank
// disable revive linting for this struct as there is nothing wrong with the
// naming convention
message GitHubProviderConfig {
    // Endpoint is the GitHub API endpoint. If using the public GitHub API, Endpoint can be left blank.
	string endpoint = 1;
}

// Context defines the context in which a rule is evaluated.
// this normally refers to a combination of the provider, organization and project.
message Context {
    // Removing the 'optional' keyword from the following two fields below will break
    // buf compatibility checks.

    // name of the provider
    optional string provider = 1;
    // ID of the project
    optional string project = 3;

    optional string retired_organization = 2;
}

// --- START RuleType CRUD definitions

// ListRuleTypesRequest is the request to list rule types.
message ListRuleTypesRequest {
    // context is the context in which the rule types are evaluated.
    Context context = 1;
}

// ListRuleTypesResponse is the response to list rule types.
message ListRuleTypesResponse {
    // rule_types is the list of rule types.
    repeated RuleType rule_types = 1;
}

// GetRuleTypeByNameRequest is the request to get a rule type by name.
message GetRuleTypeByNameRequest {
    // context is the context in which the rule type is evaluated.
    Context context = 1;
    // name is the name of the rule type.
    string name = 2;
}

// GetRuleTypeByNameResponse is the response to get a rule type by name.
message GetRuleTypeByNameResponse {
    // rule_type is the rule type.
    RuleType rule_type = 1;
}

// GetRuleTypeByIdRequest is the request to get a rule type by id.
message GetRuleTypeByIdRequest {
    // context is the context in which the rule type is evaluated.
    Context context = 1;
    // id is the id of the rule type.
    string id = 2;
}

// GetRuleTypeByIdResponse is the response to get a rule type by id.
message GetRuleTypeByIdResponse {
    // rule_type is the rule type.
    RuleType rule_type = 1;
}

// CreateRuleTypeRequest is the request to create a rule type.
message CreateRuleTypeRequest {
    // rule_type is the rule type to be created.
    RuleType rule_type = 1;
    reserved 2; // deprecated context
}

// CreateRuleTypeResponse is the response to create a rule type.
message CreateRuleTypeResponse {
    // rule_type is the rule type that was created.
    RuleType rule_type = 1;
}

// UpdateRuleTypeRequest is the request to update a rule type.
message UpdateRuleTypeRequest {
    // rule_type is the rule type to be updated.
    RuleType rule_type = 2;
    reserved 3; // deprecated context
}

// UpdateRuleTypeResponse is the response to update a rule type.
message UpdateRuleTypeResponse {
    // rule_type is the rule type that was updated.
    RuleType rule_type = 1;
}

// DeleteRuleTypeRequest is the request to delete a rule type.
message DeleteRuleTypeRequest {
    // context is the context in which the rule type is evaluated.
    Context context = 1;
    // id is the id of the rule type to be deleted.
    string id = 2;
}

// DeleteRuleTypeResponse is the response to delete a rule type.
message DeleteRuleTypeResponse {
}

// --- END RuleType CRUD definitions

// RestType defines the rest data evaluation.
// This is used to fetch data from a REST endpoint.
message RestType {
    message Fallback {
        int32 http_code = 1;
        string body = 2;
    }

    // endpoint is the endpoint to fetch data from.
    // This can be a URL or the path on the API.bool
    // This is a required field and must be set.
    // This is also evaluated via a template which allows
    // us dynamically fill in the values.
    string endpoint = 1;

    // method is the method to use to fetch data.
    string method = 2;

    // headers are the headers to be sent to the endpoint.
    repeated string headers = 3;

    // body is the body to be sent to the endpoint.
    optional string body = 4;

    // parse is the parsing mechanism to be used to parse the data.
    string parse = 5;

    // fallback provides a body that the ingester would return in case
    // the REST call returns a non-200 status code.
    repeated Fallback fallback = 6;
}

// BuiltinType defines the builtin data evaluation.
message BuiltinType {
    string method = 1;
}

// ArtifactType defines the artifact data evaluation.
message ArtifactType {
}

// GitType defines the git data ingester.
message GitType {
    // clone_url is the url of the git repository.
    string clone_url = 1;

    // branch is the branch of the git repository.
    string branch = 2;
}

// DiffType defines the diff data ingester.
message DiffType {
    message Ecosystem {
        // name is the name of the ecosystem.
        string name = 1;
        // depfile is the file that contains the dependencies for this ecosystem
        string depfile = 2;
    }

    // ecosystems is the list of ecosystems to be used
    // for the "dep" diff type.
    repeated Ecosystem ecosystems = 1;

    // type is the type of diff ingestor to use.
    // The default is "dep" which will leverage
    // the ecosystems array.
    string type = 2;
}

// RuleType defines rules that may or may not be user defined.
// The version is assumed from the folder's version.
message RuleType {
    // id is the id of the rule type.
    // This is mostly optional and is set by the server.
    optional string id = 1;

    // name is the name of the rule type.
    string name = 2;

    // context is the context in which the rule is evaluated.
    Context context = 3;

    // Definition defines the rule type. It encompases the schema and the data evaluation.
    message Definition {
        // in_entity is the entity in which the rule is evaluated.
        // This can be repository, build_environment or artifact.
        string in_entity = 1;

        // rule_schema is the schema of the rule. This is expressed in JSON Schema.
        google.protobuf.Struct rule_schema = 2;

        // param_schema is the schema of the parameters that are passed to the rule.
        // This is expressed in JSON Schema.
        optional google.protobuf.Struct param_schema = 3;

        // Ingest defines how the data is ingested.
        message Ingest {
            // type is the type of the data ingestion.
            // we currently support rest, artifact and builtin.
            string type = 1;

            // rest is the rest data ingestion.
            // this is only used if the type is rest.
            optional RestType rest = 3;

            // builtin is the builtin data ingestion.
            optional BuiltinType builtin = 4;

            // artifact is the artifact data ingestion.
            optional ArtifactType artifact = 5;

            // git is the git data ingestion.
            optional GitType git = 6;

            // diff is the diff data ingestion.
            optional DiffType diff = 7;
        }
        Ingest ingest = 4;

        // Eval defines the data evaluation definition.
        // This pertains to the way we traverse data from the upstream
        // endpoint and how we compare it to the rule.
        message Eval {
            // type is the type of the data evaluation.
            // Right now only `jq` is supported as a driver
            string type = 1;

            message JQComparison {
                message Operator {
                    string def = 1;
                }

                // Ingested points to the data retrieved in the `ingest` section
                Operator ingested = 1;

                // Profile points to the profile itself.
                Operator profile = 2;
            }

            message Rego {
                // type is the type of evaluation engine to use
                // for rego. We currently have two modes of operation:
                // - deny-by-default: this is the default mode of operation
                //   where we deny access by default and allow access only
                //   if the profile explicitly allows it. It expects the
                //   profile to set an `allow` variable to true or false.
                // - constraints: this is the mode of operation where we
                //   allow access by default and deny access only if a
                //   violation is found. It expects the profile to set a
                //   `violations` variable with a "msg" field.
                string type = 1;
                // def is the definition of the rego profile.
                string def = 2;
                // how are violations reported. This is only used if the
                // `constraints` type is selected. The default is `text`
                // which returns human-readable text. The other option is
                // `json` which returns a JSON array containing the violations.
                optional string violation_format = 3;
            }

            message Vulncheck {
                // no configuration for now
            }

            message Trusty {
                // e.g. https://staging.stacklok.dev/
                string endpoint = 1;
            }

            // jq is only used if the `jq` type is selected.
            // It defines the comparisons that are made between
            // the ingested data and the profile rule.
            repeated JQComparison jq = 2;

            // rego is only used if the `rego` type is selected.
            optional Rego rego = 3;

            // vulncheck is only used if the `vulncheck` type is selected.
            optional Vulncheck vulncheck = 4;

            // trusty is only used if the `trusty` type is selected.
            optional Trusty trusty = 5;
        }
        Eval eval = 5;

        message Remediate {
            string type = 1;

            message GhBranchProtectionType {
                string patch = 1;
            }

            // the name stutters a bit but we already use a PullRequest message for handling PR entities
            message PullRequestRemediation {
                message Content {
                    // the file to patch
                    string path = 1;
                    // how to patch the file. For now, only replace is supported
                    string action = 2;
                    // the content of the file
                    string content = 4;
                    // the GIT mode of the file. Not UNIX mode! String because the GH API also uses strings
                    // the usual modes are: 100644 for regular files, 100755 for executable files and
                    // 040000 for submodules (which we don't use but now you know the meaning of the 1 in 100644)
                    // see e.g. https://github.com/go-git/go-git/blob/32e0172851c35ae2fac495069c923330040903d2/plumbing/filemode/filemode.go#L16
                    optional string mode = 3;
                }

                message ActionsReplaceTagsWithSha {
                    // List of actions to exclude from the replacement
                    repeated string exclude = 1;
                }

                // the title of the PR
                string title = 1;
                // the body of the PR
                string body = 2;
                repeated Content contents = 3;
                // the method to use to create the PR. For now, these are supported:
                // -- minder.content - ensures that the content of the file is exactly as specified
                //                     refer to the Content message for more details
                // -- minder.actions.replace_tags_with_sha - finds any github actions within a workflow
                //                                           file and replaces the tag with the SHA
                string method = 4;

                // If the method is minder.actions.replace_tags_with_sha, this is the configuration
                // for that method
                optional ActionsReplaceTagsWithSha actions_replace_tags_with_sha = 5;
            }

            optional RestType rest = 2;
            optional GhBranchProtectionType gh_branch_protection = 3;
            optional PullRequestRemediation pull_request = 4;
        }
        Remediate remediate = 6;

        message Alert {
            string type = 1;

            message AlertTypeSA {
                string severity = 1;
            }
            optional AlertTypeSA security_advisory = 2;
        }
        Alert alert = 7;
    }

    // def is the definition of the rule type.
    Definition def = 4;

    // description is the description of the rule type.
    string description = 5;

    // guidance are instructions we give the user in case a rule fails.
    string guidance = 6;
}

// Profile defines a profile that is user defined.
message Profile {
    // context is the context in which the profile is evaluated.
    Context context = 1;

    // id is the id of the profile.
    // This is optional and is set by the system.
    optional string id = 2;

    // name is the name of the profile instance.
    string name = 3;

    // Rule defines the individual call of a certain rule type.
    message Rule {
        // type is the type of the rule to be instantiated.
        string type = 1;
        // params are the parameters that are passed to the rule.
        // This is optional and depends on the rule type.
        google.protobuf.Struct params = 2;
        // def is the definition of the rule.
        // This depends on the rule type.
        google.protobuf.Struct def = 3;

        // name is the descriptive name of the rule, not to be confused with type
        string name = 4;
    }

    // These are the entities that one could set in the profile.
    repeated Rule repository = 4;
    repeated Rule build_environment = 5;
    repeated Rule artifact = 6;
    repeated Rule pull_request = 7;

    // whether and how to remediate (on,off,dry_run)
    // this is optional as the default is set by the system
    optional string remediate = 8;

    // whether and how to alert (on,off,dry_run)
    // this is optional as the default is set by the system
    optional string alert = 9;

    // type is a placeholder for the object type. It should always be set to "profile".
    string type = 10;

    // version is the version of the profile type. In this case, it is "v1"
    string version = 11;
}

message ListRolesRequest {
    // context is the context in which the roles are evaluated.
    Context context = 1;
}

message ListRolesResponse {
    repeated Role roles = 1;
}

message ListRoleAssignmentsRequest {
    // context is the context in which the role assignments are evaluated.
    Context context = 1;
}

message ListRoleAssignmentsResponse {
    repeated RoleAssignment role_assignments = 1;
}

message AssignRoleRequest {
    // context is the context in which the role assignment is evaluated.
    Context context = 1;
    // role_assignment is the role assignment to be created.
    RoleAssignment role_assignment = 2;
}

message AssignRoleResponse {
    // role_assignment is the role assignment that was created.
    RoleAssignment role_assignment = 1;
}

message RemoveRoleRequest {
    // context is the context in which the role assignment is evaluated.
    Context context = 1;
    // role_assignment is the role assignment to be removed.
    RoleAssignment role_assignment = 2;
}

message RemoveRoleResponse {
    // role_assignment is the role assignment that was removed.
    RoleAssignment role_assignment = 1;
}

message Role {
    // name is the name of the role.
    string name = 1;
    // description is the description of the role.
    string description = 2;
}

message RoleAssignment {
    // role is the role that is assigned.
    string role = 1;
    // subject is the subject to which the role is assigned.
    string subject = 2;
    // projectt is the projectt in which the role is assigned.
    optional string project = 4;

    reserved 3; // deprecated context
}
