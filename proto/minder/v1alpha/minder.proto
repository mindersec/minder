//
// Copyright 2023 Stacklok, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package minder.v1alpha;
import "google/api/annotations.proto";
import "google/protobuf/descriptor.proto";
import "google/protobuf/timestamp.proto";
import "minder/v1/minder.proto";

option go_package = "github.com/stacklok/minder/pkg/api/protobuf/go/minder/v1alpha";

service EvalResultsService {
    rpc ListEvaluationHistory(ListEvaluationHistoryRequest) returns (ListEvaluationHistoryResponse) {
        option (google.api.http) = {
            get: "/api/v1alpha/history"
        };

        option (minder.v1.rpc_options) = {
            target_resource: TARGET_RESOURCE_PROJECT
            relation: RELATION_PROFILE_STATUS_GET
        };
    }
}

// ListEvaluationHistoryRequest represents a request message for the
// ListEvaluationHistory RPC.
//
// Most of its fields are used for filtering, except for `cursor`
// which is used for pagination.
message ListEvaluationHistoryRequest {
    minder.v1.Context context = 1;

    // List of entity types to retrieve.
    repeated string entity_type = 2;
    // List of entity names to retrieve.
    repeated string entity_name = 3;
    // List of profile names to retrieve.
    repeated string profile_name = 4;
    // List of evaluation statuses to retrieve.
    repeated string status = 5;
    // List of remediation statuses to retrieve.
    repeated string remediation = 6;
    // List of alert statuses to retrieve.
    repeated string alert = 7;
    // Timestamp representing the start time of the selection window.
    google.protobuf.Timestamp from = 8;
    // Timestamp representing the end time of the selection window.
    google.protobuf.Timestamp to = 9;

    // Cursor object to select the "page" of data to retrieve.
    minder.v1.Cursor cursor = 10;
}

// ListEvaluationHistoryResponse represents a response message for the
// ListEvaluationHistory RPC.
//
// It ships a collection of records retrieved and pointers to get to
// the next and/or previous pages of data.
message ListEvaluationHistoryResponse {
    // List of records retrieved.
    repeated EvaluationHistory data = 1;
    // Metadata of the current page and pointers to next and/or
    // previous pages.
    minder.v1.CursorPage page = 2;
}

message EvaluationHistory {
    // entity contains details of the entity which was evaluated.
    EvaluationHistoryEntity entity = 1;

    // rule contains details of the rule which the entity was evaluated against.
    EvaluationHistoryRule rule = 2;

    // status contains the evaluation status.
    EvaluationHistoryStatus status = 3;

    // alert contains details of the alerts for this evaluation.
    EvaluationHistoryAlert alert = 4;

    // remediation contains details of the remediation for this evaluation.
    EvaluationHistoryRemediation remediation = 5;
}

message EvaluationHistoryEntity {
    // id is the ID of the entity.
    string id = 1;

    // type is the entity type.
    minder.v1.Entity type = 2;

    // name is the entity name.
    string name = 3;
}

message EvaluationHistoryRule {
    // name is the name of the rule instance.
    string name = 1;

    // type is the name of the rule type.
    string type = 2;

    // profile is the name of the profile which contains the rule.
    string profile = 3;
}

message EvaluationHistoryStatus {
    // status is one of (success, error, failure, skipped)
    // not using enums to mirror the behaviour of the existing API contracts.
    string status = 1;

    // details contains optional details about the evaluation.
    // the structure and contents are rule type specific, and are subject to change.
    string details = 2;
}

message EvaluationHistoryRemediation {
    // status is one of (success, error, failure, skipped, not available)
    // not using enums to mirror the behaviour of the existing API contracts.
    string status = 1;

    // details contains optional details about the remediation.
    // the structure and contents are remediation specific, and are subject to change.
    string details = 2;
}

message EvaluationHistoryAlert {
    // status is one of (on, off, error, skipped, not available)
    // not using enums to mirror the behaviour of the existing API contracts.
    string status = 1;

    // details contains optional details about the alert.
    // the structure and contents are alert specific, and are subject to change.
    string details = 2;
}
