// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stacklok/minder/internal/db (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	sql "database/sql"
	json "encoding/json"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	db "github.com/stacklok/minder/internal/db"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddUserProject mocks base method.
func (m *MockStore) AddUserProject(arg0 context.Context, arg1 db.AddUserProjectParams) (db.UserProject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserProject", arg0, arg1)
	ret0, _ := ret[0].(db.UserProject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUserProject indicates an expected call of AddUserProject.
func (mr *MockStoreMockRecorder) AddUserProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserProject", reflect.TypeOf((*MockStore)(nil).AddUserProject), arg0, arg1)
}

// AddUserRole mocks base method.
func (m *MockStore) AddUserRole(arg0 context.Context, arg1 db.AddUserRoleParams) (db.UserRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserRole", arg0, arg1)
	ret0, _ := ret[0].(db.UserRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUserRole indicates an expected call of AddUserRole.
func (mr *MockStoreMockRecorder) AddUserRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserRole", reflect.TypeOf((*MockStore)(nil).AddUserRole), arg0, arg1)
}

// BeginTransaction mocks base method.
func (m *MockStore) BeginTransaction() (*sql.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTransaction")
	ret0, _ := ret[0].(*sql.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTransaction indicates an expected call of BeginTransaction.
func (mr *MockStoreMockRecorder) BeginTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTransaction", reflect.TypeOf((*MockStore)(nil).BeginTransaction))
}

// CheckHealth mocks base method.
func (m *MockStore) CheckHealth() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckHealth")
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckHealth indicates an expected call of CheckHealth.
func (mr *MockStoreMockRecorder) CheckHealth() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckHealth", reflect.TypeOf((*MockStore)(nil).CheckHealth))
}

// Commit mocks base method.
func (m *MockStore) Commit(arg0 *sql.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockStoreMockRecorder) Commit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockStore)(nil).Commit), arg0)
}

// CountProfilesByEntityType mocks base method.
func (m *MockStore) CountProfilesByEntityType(arg0 context.Context) ([]db.CountProfilesByEntityTypeRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountProfilesByEntityType", arg0)
	ret0, _ := ret[0].([]db.CountProfilesByEntityTypeRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountProfilesByEntityType indicates an expected call of CountProfilesByEntityType.
func (mr *MockStoreMockRecorder) CountProfilesByEntityType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountProfilesByEntityType", reflect.TypeOf((*MockStore)(nil).CountProfilesByEntityType), arg0)
}

// CountProfilesByName mocks base method.
func (m *MockStore) CountProfilesByName(arg0 context.Context, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountProfilesByName", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountProfilesByName indicates an expected call of CountProfilesByName.
func (mr *MockStoreMockRecorder) CountProfilesByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountProfilesByName", reflect.TypeOf((*MockStore)(nil).CountProfilesByName), arg0, arg1)
}

// CountRepositories mocks base method.
func (m *MockStore) CountRepositories(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountRepositories", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountRepositories indicates an expected call of CountRepositories.
func (mr *MockStoreMockRecorder) CountRepositories(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountRepositories", reflect.TypeOf((*MockStore)(nil).CountRepositories), arg0)
}

// CountUsers mocks base method.
func (m *MockStore) CountUsers(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUsers", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUsers indicates an expected call of CountUsers.
func (mr *MockStoreMockRecorder) CountUsers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUsers", reflect.TypeOf((*MockStore)(nil).CountUsers), arg0)
}

// CreateAccessToken mocks base method.
func (m *MockStore) CreateAccessToken(arg0 context.Context, arg1 db.CreateAccessTokenParams) (db.ProviderAccessToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessToken", arg0, arg1)
	ret0, _ := ret[0].(db.ProviderAccessToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccessToken indicates an expected call of CreateAccessToken.
func (mr *MockStoreMockRecorder) CreateAccessToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessToken", reflect.TypeOf((*MockStore)(nil).CreateAccessToken), arg0, arg1)
}

// CreateArtifact mocks base method.
func (m *MockStore) CreateArtifact(arg0 context.Context, arg1 db.CreateArtifactParams) (db.Artifact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateArtifact", arg0, arg1)
	ret0, _ := ret[0].(db.Artifact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateArtifact indicates an expected call of CreateArtifact.
func (mr *MockStoreMockRecorder) CreateArtifact(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateArtifact", reflect.TypeOf((*MockStore)(nil).CreateArtifact), arg0, arg1)
}

// CreateArtifactVersion mocks base method.
func (m *MockStore) CreateArtifactVersion(arg0 context.Context, arg1 db.CreateArtifactVersionParams) (db.ArtifactVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateArtifactVersion", arg0, arg1)
	ret0, _ := ret[0].(db.ArtifactVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateArtifactVersion indicates an expected call of CreateArtifactVersion.
func (mr *MockStoreMockRecorder) CreateArtifactVersion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateArtifactVersion", reflect.TypeOf((*MockStore)(nil).CreateArtifactVersion), arg0, arg1)
}

// CreateOrganization mocks base method.
func (m *MockStore) CreateOrganization(arg0 context.Context, arg1 db.CreateOrganizationParams) (db.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganization", arg0, arg1)
	ret0, _ := ret[0].(db.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrganization indicates an expected call of CreateOrganization.
func (mr *MockStoreMockRecorder) CreateOrganization(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganization", reflect.TypeOf((*MockStore)(nil).CreateOrganization), arg0, arg1)
}

// CreateProfile mocks base method.
func (m *MockStore) CreateProfile(arg0 context.Context, arg1 db.CreateProfileParams) (db.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProfile", arg0, arg1)
	ret0, _ := ret[0].(db.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProfile indicates an expected call of CreateProfile.
func (mr *MockStoreMockRecorder) CreateProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfile", reflect.TypeOf((*MockStore)(nil).CreateProfile), arg0, arg1)
}

// CreateProfileForEntity mocks base method.
func (m *MockStore) CreateProfileForEntity(arg0 context.Context, arg1 db.CreateProfileForEntityParams) (db.EntityProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProfileForEntity", arg0, arg1)
	ret0, _ := ret[0].(db.EntityProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProfileForEntity indicates an expected call of CreateProfileForEntity.
func (mr *MockStoreMockRecorder) CreateProfileForEntity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfileForEntity", reflect.TypeOf((*MockStore)(nil).CreateProfileForEntity), arg0, arg1)
}

// CreateProject mocks base method.
func (m *MockStore) CreateProject(arg0 context.Context, arg1 db.CreateProjectParams) (db.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", arg0, arg1)
	ret0, _ := ret[0].(db.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProject indicates an expected call of CreateProject.
func (mr *MockStoreMockRecorder) CreateProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockStore)(nil).CreateProject), arg0, arg1)
}

// CreateProvider mocks base method.
func (m *MockStore) CreateProvider(arg0 context.Context, arg1 db.CreateProviderParams) (db.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProvider", arg0, arg1)
	ret0, _ := ret[0].(db.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProvider indicates an expected call of CreateProvider.
func (mr *MockStoreMockRecorder) CreateProvider(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProvider", reflect.TypeOf((*MockStore)(nil).CreateProvider), arg0, arg1)
}

// CreatePullRequest mocks base method.
func (m *MockStore) CreatePullRequest(arg0 context.Context, arg1 db.CreatePullRequestParams) (db.PullRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePullRequest", arg0, arg1)
	ret0, _ := ret[0].(db.PullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePullRequest indicates an expected call of CreatePullRequest.
func (mr *MockStoreMockRecorder) CreatePullRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePullRequest", reflect.TypeOf((*MockStore)(nil).CreatePullRequest), arg0, arg1)
}

// CreateRepository mocks base method.
func (m *MockStore) CreateRepository(arg0 context.Context, arg1 db.CreateRepositoryParams) (db.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRepository", arg0, arg1)
	ret0, _ := ret[0].(db.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRepository indicates an expected call of CreateRepository.
func (mr *MockStoreMockRecorder) CreateRepository(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepository", reflect.TypeOf((*MockStore)(nil).CreateRepository), arg0, arg1)
}

// CreateRole mocks base method.
func (m *MockStore) CreateRole(arg0 context.Context, arg1 db.CreateRoleParams) (db.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", arg0, arg1)
	ret0, _ := ret[0].(db.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRole indicates an expected call of CreateRole.
func (mr *MockStoreMockRecorder) CreateRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockStore)(nil).CreateRole), arg0, arg1)
}

// CreateRuleType mocks base method.
func (m *MockStore) CreateRuleType(arg0 context.Context, arg1 db.CreateRuleTypeParams) (db.RuleType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRuleType", arg0, arg1)
	ret0, _ := ret[0].(db.RuleType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRuleType indicates an expected call of CreateRuleType.
func (mr *MockStoreMockRecorder) CreateRuleType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRuleType", reflect.TypeOf((*MockStore)(nil).CreateRuleType), arg0, arg1)
}

// CreateSessionState mocks base method.
func (m *MockStore) CreateSessionState(arg0 context.Context, arg1 db.CreateSessionStateParams) (db.SessionStore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSessionState", arg0, arg1)
	ret0, _ := ret[0].(db.SessionStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSessionState indicates an expected call of CreateSessionState.
func (mr *MockStoreMockRecorder) CreateSessionState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSessionState", reflect.TypeOf((*MockStore)(nil).CreateSessionState), arg0, arg1)
}

// CreateSigningKey mocks base method.
func (m *MockStore) CreateSigningKey(arg0 context.Context, arg1 db.CreateSigningKeyParams) (db.SigningKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSigningKey", arg0, arg1)
	ret0, _ := ret[0].(db.SigningKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSigningKey indicates an expected call of CreateSigningKey.
func (mr *MockStoreMockRecorder) CreateSigningKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSigningKey", reflect.TypeOf((*MockStore)(nil).CreateSigningKey), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// DeleteAccessToken mocks base method.
func (m *MockStore) DeleteAccessToken(arg0 context.Context, arg1 db.DeleteAccessTokenParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccessToken", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccessToken indicates an expected call of DeleteAccessToken.
func (mr *MockStoreMockRecorder) DeleteAccessToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessToken", reflect.TypeOf((*MockStore)(nil).DeleteAccessToken), arg0, arg1)
}

// DeleteArtifact mocks base method.
func (m *MockStore) DeleteArtifact(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteArtifact", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteArtifact indicates an expected call of DeleteArtifact.
func (mr *MockStoreMockRecorder) DeleteArtifact(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteArtifact", reflect.TypeOf((*MockStore)(nil).DeleteArtifact), arg0, arg1)
}

// DeleteArtifactVersion mocks base method.
func (m *MockStore) DeleteArtifactVersion(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteArtifactVersion", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteArtifactVersion indicates an expected call of DeleteArtifactVersion.
func (mr *MockStoreMockRecorder) DeleteArtifactVersion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteArtifactVersion", reflect.TypeOf((*MockStore)(nil).DeleteArtifactVersion), arg0, arg1)
}

// DeleteExpiredSessionStates mocks base method.
func (m *MockStore) DeleteExpiredSessionStates(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExpiredSessionStates", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExpiredSessionStates indicates an expected call of DeleteExpiredSessionStates.
func (mr *MockStoreMockRecorder) DeleteExpiredSessionStates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExpiredSessionStates", reflect.TypeOf((*MockStore)(nil).DeleteExpiredSessionStates), arg0)
}

// DeleteOldArtifactVersions mocks base method.
func (m *MockStore) DeleteOldArtifactVersions(arg0 context.Context, arg1 db.DeleteOldArtifactVersionsParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOldArtifactVersions", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOldArtifactVersions indicates an expected call of DeleteOldArtifactVersions.
func (mr *MockStoreMockRecorder) DeleteOldArtifactVersions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOldArtifactVersions", reflect.TypeOf((*MockStore)(nil).DeleteOldArtifactVersions), arg0, arg1)
}

// DeleteOrganization mocks base method.
func (m *MockStore) DeleteOrganization(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrganization", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrganization indicates an expected call of DeleteOrganization.
func (mr *MockStoreMockRecorder) DeleteOrganization(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrganization", reflect.TypeOf((*MockStore)(nil).DeleteOrganization), arg0, arg1)
}

// DeleteProfile mocks base method.
func (m *MockStore) DeleteProfile(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProfile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProfile indicates an expected call of DeleteProfile.
func (mr *MockStoreMockRecorder) DeleteProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProfile", reflect.TypeOf((*MockStore)(nil).DeleteProfile), arg0, arg1)
}

// DeleteProfileForEntity mocks base method.
func (m *MockStore) DeleteProfileForEntity(arg0 context.Context, arg1 db.DeleteProfileForEntityParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProfileForEntity", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProfileForEntity indicates an expected call of DeleteProfileForEntity.
func (mr *MockStoreMockRecorder) DeleteProfileForEntity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProfileForEntity", reflect.TypeOf((*MockStore)(nil).DeleteProfileForEntity), arg0, arg1)
}

// DeleteProject mocks base method.
func (m *MockStore) DeleteProject(arg0 context.Context, arg1 uuid.UUID) ([]db.DeleteProjectRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProject", arg0, arg1)
	ret0, _ := ret[0].([]db.DeleteProjectRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProject indicates an expected call of DeleteProject.
func (mr *MockStoreMockRecorder) DeleteProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProject", reflect.TypeOf((*MockStore)(nil).DeleteProject), arg0, arg1)
}

// DeleteProvider mocks base method.
func (m *MockStore) DeleteProvider(arg0 context.Context, arg1 db.DeleteProviderParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProvider", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProvider indicates an expected call of DeleteProvider.
func (mr *MockStoreMockRecorder) DeleteProvider(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProvider", reflect.TypeOf((*MockStore)(nil).DeleteProvider), arg0, arg1)
}

// DeletePullRequest mocks base method.
func (m *MockStore) DeletePullRequest(arg0 context.Context, arg1 db.DeletePullRequestParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePullRequest", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePullRequest indicates an expected call of DeletePullRequest.
func (mr *MockStoreMockRecorder) DeletePullRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePullRequest", reflect.TypeOf((*MockStore)(nil).DeletePullRequest), arg0, arg1)
}

// DeleteRepository mocks base method.
func (m *MockStore) DeleteRepository(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRepository", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRepository indicates an expected call of DeleteRepository.
func (mr *MockStoreMockRecorder) DeleteRepository(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepository", reflect.TypeOf((*MockStore)(nil).DeleteRepository), arg0, arg1)
}

// DeleteRole mocks base method.
func (m *MockStore) DeleteRole(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRole indicates an expected call of DeleteRole.
func (mr *MockStoreMockRecorder) DeleteRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockStore)(nil).DeleteRole), arg0, arg1)
}

// DeleteRuleInstantiation mocks base method.
func (m *MockStore) DeleteRuleInstantiation(arg0 context.Context, arg1 db.DeleteRuleInstantiationParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRuleInstantiation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRuleInstantiation indicates an expected call of DeleteRuleInstantiation.
func (mr *MockStoreMockRecorder) DeleteRuleInstantiation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRuleInstantiation", reflect.TypeOf((*MockStore)(nil).DeleteRuleInstantiation), arg0, arg1)
}

// DeleteRuleStatusesForProfileAndRuleType mocks base method.
func (m *MockStore) DeleteRuleStatusesForProfileAndRuleType(arg0 context.Context, arg1 db.DeleteRuleStatusesForProfileAndRuleTypeParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRuleStatusesForProfileAndRuleType", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRuleStatusesForProfileAndRuleType indicates an expected call of DeleteRuleStatusesForProfileAndRuleType.
func (mr *MockStoreMockRecorder) DeleteRuleStatusesForProfileAndRuleType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRuleStatusesForProfileAndRuleType", reflect.TypeOf((*MockStore)(nil).DeleteRuleStatusesForProfileAndRuleType), arg0, arg1)
}

// DeleteRuleType mocks base method.
func (m *MockStore) DeleteRuleType(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRuleType", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRuleType indicates an expected call of DeleteRuleType.
func (mr *MockStoreMockRecorder) DeleteRuleType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRuleType", reflect.TypeOf((*MockStore)(nil).DeleteRuleType), arg0, arg1)
}

// DeleteSessionState mocks base method.
func (m *MockStore) DeleteSessionState(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSessionState", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSessionState indicates an expected call of DeleteSessionState.
func (mr *MockStoreMockRecorder) DeleteSessionState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSessionState", reflect.TypeOf((*MockStore)(nil).DeleteSessionState), arg0, arg1)
}

// DeleteSessionStateByProjectID mocks base method.
func (m *MockStore) DeleteSessionStateByProjectID(arg0 context.Context, arg1 db.DeleteSessionStateByProjectIDParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSessionStateByProjectID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSessionStateByProjectID indicates an expected call of DeleteSessionStateByProjectID.
func (mr *MockStoreMockRecorder) DeleteSessionStateByProjectID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSessionStateByProjectID", reflect.TypeOf((*MockStore)(nil).DeleteSessionStateByProjectID), arg0, arg1)
}

// DeleteSigningKey mocks base method.
func (m *MockStore) DeleteSigningKey(arg0 context.Context, arg1 db.DeleteSigningKeyParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSigningKey", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSigningKey indicates an expected call of DeleteSigningKey.
func (mr *MockStoreMockRecorder) DeleteSigningKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSigningKey", reflect.TypeOf((*MockStore)(nil).DeleteSigningKey), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockStore) DeleteUser(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStoreMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore)(nil).DeleteUser), arg0, arg1)
}

// EnqueueFlush mocks base method.
func (m *MockStore) EnqueueFlush(arg0 context.Context, arg1 db.EnqueueFlushParams) (db.FlushCache, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnqueueFlush", arg0, arg1)
	ret0, _ := ret[0].(db.FlushCache)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnqueueFlush indicates an expected call of EnqueueFlush.
func (mr *MockStoreMockRecorder) EnqueueFlush(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnqueueFlush", reflect.TypeOf((*MockStore)(nil).EnqueueFlush), arg0, arg1)
}

// FlushCache mocks base method.
func (m *MockStore) FlushCache(arg0 context.Context, arg1 db.FlushCacheParams) (db.FlushCache, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushCache", arg0, arg1)
	ret0, _ := ret[0].(db.FlushCache)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlushCache indicates an expected call of FlushCache.
func (mr *MockStoreMockRecorder) FlushCache(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushCache", reflect.TypeOf((*MockStore)(nil).FlushCache), arg0, arg1)
}

// GetAccessTokenByProjectID mocks base method.
func (m *MockStore) GetAccessTokenByProjectID(arg0 context.Context, arg1 db.GetAccessTokenByProjectIDParams) (db.ProviderAccessToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessTokenByProjectID", arg0, arg1)
	ret0, _ := ret[0].(db.ProviderAccessToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessTokenByProjectID indicates an expected call of GetAccessTokenByProjectID.
func (mr *MockStoreMockRecorder) GetAccessTokenByProjectID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessTokenByProjectID", reflect.TypeOf((*MockStore)(nil).GetAccessTokenByProjectID), arg0, arg1)
}

// GetAccessTokenByProvider mocks base method.
func (m *MockStore) GetAccessTokenByProvider(arg0 context.Context, arg1 string) ([]db.ProviderAccessToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessTokenByProvider", arg0, arg1)
	ret0, _ := ret[0].([]db.ProviderAccessToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessTokenByProvider indicates an expected call of GetAccessTokenByProvider.
func (mr *MockStoreMockRecorder) GetAccessTokenByProvider(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessTokenByProvider", reflect.TypeOf((*MockStore)(nil).GetAccessTokenByProvider), arg0, arg1)
}

// GetAccessTokenSinceDate mocks base method.
func (m *MockStore) GetAccessTokenSinceDate(arg0 context.Context, arg1 db.GetAccessTokenSinceDateParams) (db.ProviderAccessToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessTokenSinceDate", arg0, arg1)
	ret0, _ := ret[0].(db.ProviderAccessToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessTokenSinceDate indicates an expected call of GetAccessTokenSinceDate.
func (mr *MockStoreMockRecorder) GetAccessTokenSinceDate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessTokenSinceDate", reflect.TypeOf((*MockStore)(nil).GetAccessTokenSinceDate), arg0, arg1)
}

// GetArtifactByID mocks base method.
func (m *MockStore) GetArtifactByID(arg0 context.Context, arg1 uuid.UUID) (db.GetArtifactByIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtifactByID", arg0, arg1)
	ret0, _ := ret[0].(db.GetArtifactByIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtifactByID indicates an expected call of GetArtifactByID.
func (mr *MockStoreMockRecorder) GetArtifactByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtifactByID", reflect.TypeOf((*MockStore)(nil).GetArtifactByID), arg0, arg1)
}

// GetArtifactByName mocks base method.
func (m *MockStore) GetArtifactByName(arg0 context.Context, arg1 db.GetArtifactByNameParams) (db.GetArtifactByNameRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtifactByName", arg0, arg1)
	ret0, _ := ret[0].(db.GetArtifactByNameRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtifactByName indicates an expected call of GetArtifactByName.
func (mr *MockStoreMockRecorder) GetArtifactByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtifactByName", reflect.TypeOf((*MockStore)(nil).GetArtifactByName), arg0, arg1)
}

// GetArtifactVersionByID mocks base method.
func (m *MockStore) GetArtifactVersionByID(arg0 context.Context, arg1 uuid.UUID) (db.ArtifactVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtifactVersionByID", arg0, arg1)
	ret0, _ := ret[0].(db.ArtifactVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtifactVersionByID indicates an expected call of GetArtifactVersionByID.
func (mr *MockStoreMockRecorder) GetArtifactVersionByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtifactVersionByID", reflect.TypeOf((*MockStore)(nil).GetArtifactVersionByID), arg0, arg1)
}

// GetArtifactVersionBySha mocks base method.
func (m *MockStore) GetArtifactVersionBySha(arg0 context.Context, arg1 string) (db.ArtifactVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtifactVersionBySha", arg0, arg1)
	ret0, _ := ret[0].(db.ArtifactVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtifactVersionBySha indicates an expected call of GetArtifactVersionBySha.
func (mr *MockStoreMockRecorder) GetArtifactVersionBySha(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtifactVersionBySha", reflect.TypeOf((*MockStore)(nil).GetArtifactVersionBySha), arg0, arg1)
}

// GetChildrenProjects mocks base method.
func (m *MockStore) GetChildrenProjects(arg0 context.Context, arg1 uuid.UUID) ([]db.GetChildrenProjectsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChildrenProjects", arg0, arg1)
	ret0, _ := ret[0].([]db.GetChildrenProjectsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChildrenProjects indicates an expected call of GetChildrenProjects.
func (mr *MockStoreMockRecorder) GetChildrenProjects(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChildrenProjects", reflect.TypeOf((*MockStore)(nil).GetChildrenProjects), arg0, arg1)
}

// GetEntityProfileByProjectAndName mocks base method.
func (m *MockStore) GetEntityProfileByProjectAndName(arg0 context.Context, arg1 db.GetEntityProfileByProjectAndNameParams) ([]db.GetEntityProfileByProjectAndNameRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityProfileByProjectAndName", arg0, arg1)
	ret0, _ := ret[0].([]db.GetEntityProfileByProjectAndNameRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityProfileByProjectAndName indicates an expected call of GetEntityProfileByProjectAndName.
func (mr *MockStoreMockRecorder) GetEntityProfileByProjectAndName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityProfileByProjectAndName", reflect.TypeOf((*MockStore)(nil).GetEntityProfileByProjectAndName), arg0, arg1)
}

// GetFeatureInProject mocks base method.
func (m *MockStore) GetFeatureInProject(arg0 context.Context, arg1 db.GetFeatureInProjectParams) (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeatureInProject", arg0, arg1)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeatureInProject indicates an expected call of GetFeatureInProject.
func (mr *MockStoreMockRecorder) GetFeatureInProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeatureInProject", reflect.TypeOf((*MockStore)(nil).GetFeatureInProject), arg0, arg1)
}

// GetOrganization mocks base method.
func (m *MockStore) GetOrganization(arg0 context.Context, arg1 uuid.UUID) (db.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganization", arg0, arg1)
	ret0, _ := ret[0].(db.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganization indicates an expected call of GetOrganization.
func (mr *MockStoreMockRecorder) GetOrganization(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganization", reflect.TypeOf((*MockStore)(nil).GetOrganization), arg0, arg1)
}

// GetOrganizationByName mocks base method.
func (m *MockStore) GetOrganizationByName(arg0 context.Context, arg1 string) (db.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationByName", arg0, arg1)
	ret0, _ := ret[0].(db.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationByName indicates an expected call of GetOrganizationByName.
func (mr *MockStoreMockRecorder) GetOrganizationByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationByName", reflect.TypeOf((*MockStore)(nil).GetOrganizationByName), arg0, arg1)
}

// GetOrganizationForUpdate mocks base method.
func (m *MockStore) GetOrganizationForUpdate(arg0 context.Context, arg1 string) (db.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationForUpdate indicates an expected call of GetOrganizationForUpdate.
func (mr *MockStoreMockRecorder) GetOrganizationForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationForUpdate", reflect.TypeOf((*MockStore)(nil).GetOrganizationForUpdate), arg0, arg1)
}

// GetParentProjects mocks base method.
func (m *MockStore) GetParentProjects(arg0 context.Context, arg1 uuid.UUID) ([]uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParentProjects", arg0, arg1)
	ret0, _ := ret[0].([]uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParentProjects indicates an expected call of GetParentProjects.
func (mr *MockStoreMockRecorder) GetParentProjects(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParentProjects", reflect.TypeOf((*MockStore)(nil).GetParentProjects), arg0, arg1)
}

// GetParentProjectsUntil mocks base method.
func (m *MockStore) GetParentProjectsUntil(arg0 context.Context, arg1 db.GetParentProjectsUntilParams) ([]uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParentProjectsUntil", arg0, arg1)
	ret0, _ := ret[0].([]uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParentProjectsUntil indicates an expected call of GetParentProjectsUntil.
func (mr *MockStoreMockRecorder) GetParentProjectsUntil(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParentProjectsUntil", reflect.TypeOf((*MockStore)(nil).GetParentProjectsUntil), arg0, arg1)
}

// GetProfileByID mocks base method.
func (m *MockStore) GetProfileByID(arg0 context.Context, arg1 uuid.UUID) (db.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileByID", arg0, arg1)
	ret0, _ := ret[0].(db.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileByID indicates an expected call of GetProfileByID.
func (mr *MockStoreMockRecorder) GetProfileByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileByID", reflect.TypeOf((*MockStore)(nil).GetProfileByID), arg0, arg1)
}

// GetProfileByIDAndLock mocks base method.
func (m *MockStore) GetProfileByIDAndLock(arg0 context.Context, arg1 uuid.UUID) (db.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileByIDAndLock", arg0, arg1)
	ret0, _ := ret[0].(db.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileByIDAndLock indicates an expected call of GetProfileByIDAndLock.
func (mr *MockStoreMockRecorder) GetProfileByIDAndLock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileByIDAndLock", reflect.TypeOf((*MockStore)(nil).GetProfileByIDAndLock), arg0, arg1)
}

// GetProfileByNameAndLock mocks base method.
func (m *MockStore) GetProfileByNameAndLock(arg0 context.Context, arg1 db.GetProfileByNameAndLockParams) (db.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileByNameAndLock", arg0, arg1)
	ret0, _ := ret[0].(db.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileByNameAndLock indicates an expected call of GetProfileByNameAndLock.
func (mr *MockStoreMockRecorder) GetProfileByNameAndLock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileByNameAndLock", reflect.TypeOf((*MockStore)(nil).GetProfileByNameAndLock), arg0, arg1)
}

// GetProfileByProjectAndID mocks base method.
func (m *MockStore) GetProfileByProjectAndID(arg0 context.Context, arg1 db.GetProfileByProjectAndIDParams) ([]db.GetProfileByProjectAndIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileByProjectAndID", arg0, arg1)
	ret0, _ := ret[0].([]db.GetProfileByProjectAndIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileByProjectAndID indicates an expected call of GetProfileByProjectAndID.
func (mr *MockStoreMockRecorder) GetProfileByProjectAndID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileByProjectAndID", reflect.TypeOf((*MockStore)(nil).GetProfileByProjectAndID), arg0, arg1)
}

// GetProfileForEntity mocks base method.
func (m *MockStore) GetProfileForEntity(arg0 context.Context, arg1 db.GetProfileForEntityParams) (db.EntityProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileForEntity", arg0, arg1)
	ret0, _ := ret[0].(db.EntityProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileForEntity indicates an expected call of GetProfileForEntity.
func (mr *MockStoreMockRecorder) GetProfileForEntity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileForEntity", reflect.TypeOf((*MockStore)(nil).GetProfileForEntity), arg0, arg1)
}

// GetProfileStatusByIdAndProject mocks base method.
func (m *MockStore) GetProfileStatusByIdAndProject(arg0 context.Context, arg1 db.GetProfileStatusByIdAndProjectParams) (db.GetProfileStatusByIdAndProjectRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileStatusByIdAndProject", arg0, arg1)
	ret0, _ := ret[0].(db.GetProfileStatusByIdAndProjectRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileStatusByIdAndProject indicates an expected call of GetProfileStatusByIdAndProject.
func (mr *MockStoreMockRecorder) GetProfileStatusByIdAndProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileStatusByIdAndProject", reflect.TypeOf((*MockStore)(nil).GetProfileStatusByIdAndProject), arg0, arg1)
}

// GetProfileStatusByNameAndProject mocks base method.
func (m *MockStore) GetProfileStatusByNameAndProject(arg0 context.Context, arg1 db.GetProfileStatusByNameAndProjectParams) (db.GetProfileStatusByNameAndProjectRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileStatusByNameAndProject", arg0, arg1)
	ret0, _ := ret[0].(db.GetProfileStatusByNameAndProjectRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileStatusByNameAndProject indicates an expected call of GetProfileStatusByNameAndProject.
func (mr *MockStoreMockRecorder) GetProfileStatusByNameAndProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileStatusByNameAndProject", reflect.TypeOf((*MockStore)(nil).GetProfileStatusByNameAndProject), arg0, arg1)
}

// GetProfileStatusByProject mocks base method.
func (m *MockStore) GetProfileStatusByProject(arg0 context.Context, arg1 uuid.UUID) ([]db.GetProfileStatusByProjectRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileStatusByProject", arg0, arg1)
	ret0, _ := ret[0].([]db.GetProfileStatusByProjectRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileStatusByProject indicates an expected call of GetProfileStatusByProject.
func (mr *MockStoreMockRecorder) GetProfileStatusByProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileStatusByProject", reflect.TypeOf((*MockStore)(nil).GetProfileStatusByProject), arg0, arg1)
}

// GetProjectByID mocks base method.
func (m *MockStore) GetProjectByID(arg0 context.Context, arg1 uuid.UUID) (db.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectByID", arg0, arg1)
	ret0, _ := ret[0].(db.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectByID indicates an expected call of GetProjectByID.
func (mr *MockStoreMockRecorder) GetProjectByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectByID", reflect.TypeOf((*MockStore)(nil).GetProjectByID), arg0, arg1)
}

// GetProjectByName mocks base method.
func (m *MockStore) GetProjectByName(arg0 context.Context, arg1 string) (db.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectByName", arg0, arg1)
	ret0, _ := ret[0].(db.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectByName indicates an expected call of GetProjectByName.
func (mr *MockStoreMockRecorder) GetProjectByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectByName", reflect.TypeOf((*MockStore)(nil).GetProjectByName), arg0, arg1)
}

// GetProjectIDPortBySessionState mocks base method.
func (m *MockStore) GetProjectIDPortBySessionState(arg0 context.Context, arg1 string) (db.GetProjectIDPortBySessionStateRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectIDPortBySessionState", arg0, arg1)
	ret0, _ := ret[0].(db.GetProjectIDPortBySessionStateRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectIDPortBySessionState indicates an expected call of GetProjectIDPortBySessionState.
func (mr *MockStoreMockRecorder) GetProjectIDPortBySessionState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectIDPortBySessionState", reflect.TypeOf((*MockStore)(nil).GetProjectIDPortBySessionState), arg0, arg1)
}

// GetProviderByID mocks base method.
func (m *MockStore) GetProviderByID(arg0 context.Context, arg1 db.GetProviderByIDParams) (db.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProviderByID", arg0, arg1)
	ret0, _ := ret[0].(db.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProviderByID indicates an expected call of GetProviderByID.
func (mr *MockStoreMockRecorder) GetProviderByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProviderByID", reflect.TypeOf((*MockStore)(nil).GetProviderByID), arg0, arg1)
}

// GetProviderByName mocks base method.
func (m *MockStore) GetProviderByName(arg0 context.Context, arg1 db.GetProviderByNameParams) (db.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProviderByName", arg0, arg1)
	ret0, _ := ret[0].(db.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProviderByName indicates an expected call of GetProviderByName.
func (mr *MockStoreMockRecorder) GetProviderByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProviderByName", reflect.TypeOf((*MockStore)(nil).GetProviderByName), arg0, arg1)
}

// GetPullRequest mocks base method.
func (m *MockStore) GetPullRequest(arg0 context.Context, arg1 db.GetPullRequestParams) (db.PullRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequest", arg0, arg1)
	ret0, _ := ret[0].(db.PullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequest indicates an expected call of GetPullRequest.
func (mr *MockStoreMockRecorder) GetPullRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequest", reflect.TypeOf((*MockStore)(nil).GetPullRequest), arg0, arg1)
}

// GetPullRequestByID mocks base method.
func (m *MockStore) GetPullRequestByID(arg0 context.Context, arg1 uuid.UUID) (db.PullRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequestByID", arg0, arg1)
	ret0, _ := ret[0].(db.PullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequestByID indicates an expected call of GetPullRequestByID.
func (mr *MockStoreMockRecorder) GetPullRequestByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequestByID", reflect.TypeOf((*MockStore)(nil).GetPullRequestByID), arg0, arg1)
}

// GetQuerierWithTransaction mocks base method.
func (m *MockStore) GetQuerierWithTransaction(arg0 *sql.Tx) db.ExtendQuerier {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuerierWithTransaction", arg0)
	ret0, _ := ret[0].(db.ExtendQuerier)
	return ret0
}

// GetQuerierWithTransaction indicates an expected call of GetQuerierWithTransaction.
func (mr *MockStoreMockRecorder) GetQuerierWithTransaction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuerierWithTransaction", reflect.TypeOf((*MockStore)(nil).GetQuerierWithTransaction), arg0)
}

// GetRepositoryByID mocks base method.
func (m *MockStore) GetRepositoryByID(arg0 context.Context, arg1 uuid.UUID) (db.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepositoryByID", arg0, arg1)
	ret0, _ := ret[0].(db.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepositoryByID indicates an expected call of GetRepositoryByID.
func (mr *MockStoreMockRecorder) GetRepositoryByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositoryByID", reflect.TypeOf((*MockStore)(nil).GetRepositoryByID), arg0, arg1)
}

// GetRepositoryByIDAndProject mocks base method.
func (m *MockStore) GetRepositoryByIDAndProject(arg0 context.Context, arg1 db.GetRepositoryByIDAndProjectParams) (db.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepositoryByIDAndProject", arg0, arg1)
	ret0, _ := ret[0].(db.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepositoryByIDAndProject indicates an expected call of GetRepositoryByIDAndProject.
func (mr *MockStoreMockRecorder) GetRepositoryByIDAndProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositoryByIDAndProject", reflect.TypeOf((*MockStore)(nil).GetRepositoryByIDAndProject), arg0, arg1)
}

// GetRepositoryByRepoID mocks base method.
func (m *MockStore) GetRepositoryByRepoID(arg0 context.Context, arg1 int32) (db.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepositoryByRepoID", arg0, arg1)
	ret0, _ := ret[0].(db.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepositoryByRepoID indicates an expected call of GetRepositoryByRepoID.
func (mr *MockStoreMockRecorder) GetRepositoryByRepoID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositoryByRepoID", reflect.TypeOf((*MockStore)(nil).GetRepositoryByRepoID), arg0, arg1)
}

// GetRepositoryByRepoName mocks base method.
func (m *MockStore) GetRepositoryByRepoName(arg0 context.Context, arg1 db.GetRepositoryByRepoNameParams) (db.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepositoryByRepoName", arg0, arg1)
	ret0, _ := ret[0].(db.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepositoryByRepoName indicates an expected call of GetRepositoryByRepoName.
func (mr *MockStoreMockRecorder) GetRepositoryByRepoName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositoryByRepoName", reflect.TypeOf((*MockStore)(nil).GetRepositoryByRepoName), arg0, arg1)
}

// GetRoleByID mocks base method.
func (m *MockStore) GetRoleByID(arg0 context.Context, arg1 int32) (db.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleByID", arg0, arg1)
	ret0, _ := ret[0].(db.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleByID indicates an expected call of GetRoleByID.
func (mr *MockStoreMockRecorder) GetRoleByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleByID", reflect.TypeOf((*MockStore)(nil).GetRoleByID), arg0, arg1)
}

// GetRoleByName mocks base method.
func (m *MockStore) GetRoleByName(arg0 context.Context, arg1 db.GetRoleByNameParams) (db.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleByName", arg0, arg1)
	ret0, _ := ret[0].(db.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleByName indicates an expected call of GetRoleByName.
func (mr *MockStoreMockRecorder) GetRoleByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleByName", reflect.TypeOf((*MockStore)(nil).GetRoleByName), arg0, arg1)
}

// GetRootProjects mocks base method.
func (m *MockStore) GetRootProjects(arg0 context.Context) ([]db.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRootProjects", arg0)
	ret0, _ := ret[0].([]db.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRootProjects indicates an expected call of GetRootProjects.
func (mr *MockStoreMockRecorder) GetRootProjects(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRootProjects", reflect.TypeOf((*MockStore)(nil).GetRootProjects), arg0)
}

// GetRuleEvaluationByProfileIdAndRuleType mocks base method.
func (m *MockStore) GetRuleEvaluationByProfileIdAndRuleType(arg0 context.Context, arg1 uuid.UUID, arg2 db.NullEntities, arg3 uuid.NullUUID, arg4 sql.NullString) (db.ListRuleEvaluationsByProfileIdRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRuleEvaluationByProfileIdAndRuleType", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(db.ListRuleEvaluationsByProfileIdRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRuleEvaluationByProfileIdAndRuleType indicates an expected call of GetRuleEvaluationByProfileIdAndRuleType.
func (mr *MockStoreMockRecorder) GetRuleEvaluationByProfileIdAndRuleType(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRuleEvaluationByProfileIdAndRuleType", reflect.TypeOf((*MockStore)(nil).GetRuleEvaluationByProfileIdAndRuleType), arg0, arg1, arg2, arg3, arg4)
}

// GetRuleTypeByID mocks base method.
func (m *MockStore) GetRuleTypeByID(arg0 context.Context, arg1 uuid.UUID) (db.RuleType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRuleTypeByID", arg0, arg1)
	ret0, _ := ret[0].(db.RuleType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRuleTypeByID indicates an expected call of GetRuleTypeByID.
func (mr *MockStoreMockRecorder) GetRuleTypeByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRuleTypeByID", reflect.TypeOf((*MockStore)(nil).GetRuleTypeByID), arg0, arg1)
}

// GetRuleTypeByName mocks base method.
func (m *MockStore) GetRuleTypeByName(arg0 context.Context, arg1 db.GetRuleTypeByNameParams) (db.RuleType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRuleTypeByName", arg0, arg1)
	ret0, _ := ret[0].(db.RuleType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRuleTypeByName indicates an expected call of GetRuleTypeByName.
func (mr *MockStoreMockRecorder) GetRuleTypeByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRuleTypeByName", reflect.TypeOf((*MockStore)(nil).GetRuleTypeByName), arg0, arg1)
}

// GetSessionState mocks base method.
func (m *MockStore) GetSessionState(arg0 context.Context, arg1 int32) (db.SessionStore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionState", arg0, arg1)
	ret0, _ := ret[0].(db.SessionStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionState indicates an expected call of GetSessionState.
func (mr *MockStoreMockRecorder) GetSessionState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionState", reflect.TypeOf((*MockStore)(nil).GetSessionState), arg0, arg1)
}

// GetSessionStateByProjectID mocks base method.
func (m *MockStore) GetSessionStateByProjectID(arg0 context.Context, arg1 uuid.UUID) (db.SessionStore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionStateByProjectID", arg0, arg1)
	ret0, _ := ret[0].(db.SessionStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionStateByProjectID indicates an expected call of GetSessionStateByProjectID.
func (mr *MockStoreMockRecorder) GetSessionStateByProjectID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionStateByProjectID", reflect.TypeOf((*MockStore)(nil).GetSessionStateByProjectID), arg0, arg1)
}

// GetSigningKeyByIdentifier mocks base method.
func (m *MockStore) GetSigningKeyByIdentifier(arg0 context.Context, arg1 string) (db.SigningKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSigningKeyByIdentifier", arg0, arg1)
	ret0, _ := ret[0].(db.SigningKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSigningKeyByIdentifier indicates an expected call of GetSigningKeyByIdentifier.
func (mr *MockStoreMockRecorder) GetSigningKeyByIdentifier(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSigningKeyByIdentifier", reflect.TypeOf((*MockStore)(nil).GetSigningKeyByIdentifier), arg0, arg1)
}

// GetSigningKeyByProjectID mocks base method.
func (m *MockStore) GetSigningKeyByProjectID(arg0 context.Context, arg1 uuid.UUID) (db.SigningKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSigningKeyByProjectID", arg0, arg1)
	ret0, _ := ret[0].(db.SigningKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSigningKeyByProjectID indicates an expected call of GetSigningKeyByProjectID.
func (mr *MockStoreMockRecorder) GetSigningKeyByProjectID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSigningKeyByProjectID", reflect.TypeOf((*MockStore)(nil).GetSigningKeyByProjectID), arg0, arg1)
}

// GetUserByID mocks base method.
func (m *MockStore) GetUserByID(arg0 context.Context, arg1 int32) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockStoreMockRecorder) GetUserByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockStore)(nil).GetUserByID), arg0, arg1)
}

// GetUserBySubject mocks base method.
func (m *MockStore) GetUserBySubject(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBySubject", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBySubject indicates an expected call of GetUserBySubject.
func (mr *MockStoreMockRecorder) GetUserBySubject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBySubject", reflect.TypeOf((*MockStore)(nil).GetUserBySubject), arg0, arg1)
}

// GetUserProjects mocks base method.
func (m *MockStore) GetUserProjects(arg0 context.Context, arg1 int32) ([]db.GetUserProjectsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserProjects", arg0, arg1)
	ret0, _ := ret[0].([]db.GetUserProjectsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserProjects indicates an expected call of GetUserProjects.
func (mr *MockStoreMockRecorder) GetUserProjects(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProjects", reflect.TypeOf((*MockStore)(nil).GetUserProjects), arg0, arg1)
}

// GetUserRoles mocks base method.
func (m *MockStore) GetUserRoles(arg0 context.Context, arg1 int32) ([]db.GetUserRolesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRoles", arg0, arg1)
	ret0, _ := ret[0].([]db.GetUserRolesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRoles indicates an expected call of GetUserRoles.
func (mr *MockStoreMockRecorder) GetUserRoles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRoles", reflect.TypeOf((*MockStore)(nil).GetUserRoles), arg0, arg1)
}

// GlobalListProviders mocks base method.
func (m *MockStore) GlobalListProviders(arg0 context.Context) ([]db.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GlobalListProviders", arg0)
	ret0, _ := ret[0].([]db.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GlobalListProviders indicates an expected call of GlobalListProviders.
func (mr *MockStoreMockRecorder) GlobalListProviders(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GlobalListProviders", reflect.TypeOf((*MockStore)(nil).GlobalListProviders), arg0)
}

// ListAllRepositories mocks base method.
func (m *MockStore) ListAllRepositories(arg0 context.Context, arg1 string) ([]db.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllRepositories", arg0, arg1)
	ret0, _ := ret[0].([]db.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllRepositories indicates an expected call of ListAllRepositories.
func (mr *MockStoreMockRecorder) ListAllRepositories(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllRepositories", reflect.TypeOf((*MockStore)(nil).ListAllRepositories), arg0, arg1)
}

// ListArtifactVersionsByArtifactID mocks base method.
func (m *MockStore) ListArtifactVersionsByArtifactID(arg0 context.Context, arg1 db.ListArtifactVersionsByArtifactIDParams) ([]db.ArtifactVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListArtifactVersionsByArtifactID", arg0, arg1)
	ret0, _ := ret[0].([]db.ArtifactVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListArtifactVersionsByArtifactID indicates an expected call of ListArtifactVersionsByArtifactID.
func (mr *MockStoreMockRecorder) ListArtifactVersionsByArtifactID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArtifactVersionsByArtifactID", reflect.TypeOf((*MockStore)(nil).ListArtifactVersionsByArtifactID), arg0, arg1)
}

// ListArtifactVersionsByArtifactIDAndTag mocks base method.
func (m *MockStore) ListArtifactVersionsByArtifactIDAndTag(arg0 context.Context, arg1 db.ListArtifactVersionsByArtifactIDAndTagParams) ([]db.ArtifactVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListArtifactVersionsByArtifactIDAndTag", arg0, arg1)
	ret0, _ := ret[0].([]db.ArtifactVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListArtifactVersionsByArtifactIDAndTag indicates an expected call of ListArtifactVersionsByArtifactIDAndTag.
func (mr *MockStoreMockRecorder) ListArtifactVersionsByArtifactIDAndTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArtifactVersionsByArtifactIDAndTag", reflect.TypeOf((*MockStore)(nil).ListArtifactVersionsByArtifactIDAndTag), arg0, arg1)
}

// ListArtifactsByRepoID mocks base method.
func (m *MockStore) ListArtifactsByRepoID(arg0 context.Context, arg1 uuid.UUID) ([]db.Artifact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListArtifactsByRepoID", arg0, arg1)
	ret0, _ := ret[0].([]db.Artifact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListArtifactsByRepoID indicates an expected call of ListArtifactsByRepoID.
func (mr *MockStoreMockRecorder) ListArtifactsByRepoID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArtifactsByRepoID", reflect.TypeOf((*MockStore)(nil).ListArtifactsByRepoID), arg0, arg1)
}

// ListFlushCache mocks base method.
func (m *MockStore) ListFlushCache(arg0 context.Context) ([]db.FlushCache, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFlushCache", arg0)
	ret0, _ := ret[0].([]db.FlushCache)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFlushCache indicates an expected call of ListFlushCache.
func (mr *MockStoreMockRecorder) ListFlushCache(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFlushCache", reflect.TypeOf((*MockStore)(nil).ListFlushCache), arg0)
}

// ListOrganizations mocks base method.
func (m *MockStore) ListOrganizations(arg0 context.Context, arg1 db.ListOrganizationsParams) ([]db.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizations", arg0, arg1)
	ret0, _ := ret[0].([]db.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrganizations indicates an expected call of ListOrganizations.
func (mr *MockStoreMockRecorder) ListOrganizations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizations", reflect.TypeOf((*MockStore)(nil).ListOrganizations), arg0, arg1)
}

// ListProfilesByProjectID mocks base method.
func (m *MockStore) ListProfilesByProjectID(arg0 context.Context, arg1 uuid.UUID) ([]db.ListProfilesByProjectIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProfilesByProjectID", arg0, arg1)
	ret0, _ := ret[0].([]db.ListProfilesByProjectIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProfilesByProjectID indicates an expected call of ListProfilesByProjectID.
func (mr *MockStoreMockRecorder) ListProfilesByProjectID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProfilesByProjectID", reflect.TypeOf((*MockStore)(nil).ListProfilesByProjectID), arg0, arg1)
}

// ListProfilesInstantiatingRuleType mocks base method.
func (m *MockStore) ListProfilesInstantiatingRuleType(arg0 context.Context, arg1 uuid.UUID) ([]db.ListProfilesInstantiatingRuleTypeRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProfilesInstantiatingRuleType", arg0, arg1)
	ret0, _ := ret[0].([]db.ListProfilesInstantiatingRuleTypeRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProfilesInstantiatingRuleType indicates an expected call of ListProfilesInstantiatingRuleType.
func (mr *MockStoreMockRecorder) ListProfilesInstantiatingRuleType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProfilesInstantiatingRuleType", reflect.TypeOf((*MockStore)(nil).ListProfilesInstantiatingRuleType), arg0, arg1)
}

// ListProvidersByProjectID mocks base method.
func (m *MockStore) ListProvidersByProjectID(arg0 context.Context, arg1 uuid.UUID) ([]db.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProvidersByProjectID", arg0, arg1)
	ret0, _ := ret[0].([]db.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProvidersByProjectID indicates an expected call of ListProvidersByProjectID.
func (mr *MockStoreMockRecorder) ListProvidersByProjectID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProvidersByProjectID", reflect.TypeOf((*MockStore)(nil).ListProvidersByProjectID), arg0, arg1)
}

// ListRegisteredRepositoriesByProjectIDAndProvider mocks base method.
func (m *MockStore) ListRegisteredRepositoriesByProjectIDAndProvider(arg0 context.Context, arg1 db.ListRegisteredRepositoriesByProjectIDAndProviderParams) ([]db.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRegisteredRepositoriesByProjectIDAndProvider", arg0, arg1)
	ret0, _ := ret[0].([]db.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRegisteredRepositoriesByProjectIDAndProvider indicates an expected call of ListRegisteredRepositoriesByProjectIDAndProvider.
func (mr *MockStoreMockRecorder) ListRegisteredRepositoriesByProjectIDAndProvider(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegisteredRepositoriesByProjectIDAndProvider", reflect.TypeOf((*MockStore)(nil).ListRegisteredRepositoriesByProjectIDAndProvider), arg0, arg1)
}

// ListRepositoriesByOwner mocks base method.
func (m *MockStore) ListRepositoriesByOwner(arg0 context.Context, arg1 db.ListRepositoriesByOwnerParams) ([]db.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepositoriesByOwner", arg0, arg1)
	ret0, _ := ret[0].([]db.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRepositoriesByOwner indicates an expected call of ListRepositoriesByOwner.
func (mr *MockStoreMockRecorder) ListRepositoriesByOwner(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositoriesByOwner", reflect.TypeOf((*MockStore)(nil).ListRepositoriesByOwner), arg0, arg1)
}

// ListRepositoriesByProjectID mocks base method.
func (m *MockStore) ListRepositoriesByProjectID(arg0 context.Context, arg1 db.ListRepositoriesByProjectIDParams) ([]db.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepositoriesByProjectID", arg0, arg1)
	ret0, _ := ret[0].([]db.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRepositoriesByProjectID indicates an expected call of ListRepositoriesByProjectID.
func (mr *MockStoreMockRecorder) ListRepositoriesByProjectID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositoriesByProjectID", reflect.TypeOf((*MockStore)(nil).ListRepositoriesByProjectID), arg0, arg1)
}

// ListRoles mocks base method.
func (m *MockStore) ListRoles(arg0 context.Context, arg1 db.ListRolesParams) ([]db.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoles", arg0, arg1)
	ret0, _ := ret[0].([]db.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoles indicates an expected call of ListRoles.
func (mr *MockStoreMockRecorder) ListRoles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoles", reflect.TypeOf((*MockStore)(nil).ListRoles), arg0, arg1)
}

// ListRolesByProjectID mocks base method.
func (m *MockStore) ListRolesByProjectID(arg0 context.Context, arg1 db.ListRolesByProjectIDParams) ([]db.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRolesByProjectID", arg0, arg1)
	ret0, _ := ret[0].([]db.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRolesByProjectID indicates an expected call of ListRolesByProjectID.
func (mr *MockStoreMockRecorder) ListRolesByProjectID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRolesByProjectID", reflect.TypeOf((*MockStore)(nil).ListRolesByProjectID), arg0, arg1)
}

// ListRuleEvaluationsByProfileId mocks base method.
func (m *MockStore) ListRuleEvaluationsByProfileId(arg0 context.Context, arg1 db.ListRuleEvaluationsByProfileIdParams) ([]db.ListRuleEvaluationsByProfileIdRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRuleEvaluationsByProfileId", arg0, arg1)
	ret0, _ := ret[0].([]db.ListRuleEvaluationsByProfileIdRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRuleEvaluationsByProfileId indicates an expected call of ListRuleEvaluationsByProfileId.
func (mr *MockStoreMockRecorder) ListRuleEvaluationsByProfileId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRuleEvaluationsByProfileId", reflect.TypeOf((*MockStore)(nil).ListRuleEvaluationsByProfileId), arg0, arg1)
}

// ListRuleTypesByProviderAndProject mocks base method.
func (m *MockStore) ListRuleTypesByProviderAndProject(arg0 context.Context, arg1 db.ListRuleTypesByProviderAndProjectParams) ([]db.RuleType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRuleTypesByProviderAndProject", arg0, arg1)
	ret0, _ := ret[0].([]db.RuleType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRuleTypesByProviderAndProject indicates an expected call of ListRuleTypesByProviderAndProject.
func (mr *MockStoreMockRecorder) ListRuleTypesByProviderAndProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRuleTypesByProviderAndProject", reflect.TypeOf((*MockStore)(nil).ListRuleTypesByProviderAndProject), arg0, arg1)
}

// ListUsers mocks base method.
func (m *MockStore) ListUsers(arg0 context.Context, arg1 db.ListUsersParams) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", arg0, arg1)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockStoreMockRecorder) ListUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockStore)(nil).ListUsers), arg0, arg1)
}

// ListUsersByOrganization mocks base method.
func (m *MockStore) ListUsersByOrganization(arg0 context.Context, arg1 db.ListUsersByOrganizationParams) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsersByOrganization", arg0, arg1)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsersByOrganization indicates an expected call of ListUsersByOrganization.
func (mr *MockStoreMockRecorder) ListUsersByOrganization(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersByOrganization", reflect.TypeOf((*MockStore)(nil).ListUsersByOrganization), arg0, arg1)
}

// ListUsersByProject mocks base method.
func (m *MockStore) ListUsersByProject(arg0 context.Context, arg1 db.ListUsersByProjectParams) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsersByProject", arg0, arg1)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsersByProject indicates an expected call of ListUsersByProject.
func (mr *MockStoreMockRecorder) ListUsersByProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersByProject", reflect.TypeOf((*MockStore)(nil).ListUsersByProject), arg0, arg1)
}

// ListUsersByRoleId mocks base method.
func (m *MockStore) ListUsersByRoleId(arg0 context.Context, arg1 int32) ([]int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsersByRoleId", arg0, arg1)
	ret0, _ := ret[0].([]int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsersByRoleId indicates an expected call of ListUsersByRoleId.
func (mr *MockStoreMockRecorder) ListUsersByRoleId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersByRoleId", reflect.TypeOf((*MockStore)(nil).ListUsersByRoleId), arg0, arg1)
}

// LockIfThresholdNotExceeded mocks base method.
func (m *MockStore) LockIfThresholdNotExceeded(arg0 context.Context, arg1 db.LockIfThresholdNotExceededParams) (db.EntityExecutionLock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockIfThresholdNotExceeded", arg0, arg1)
	ret0, _ := ret[0].(db.EntityExecutionLock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LockIfThresholdNotExceeded indicates an expected call of LockIfThresholdNotExceeded.
func (mr *MockStoreMockRecorder) LockIfThresholdNotExceeded(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockIfThresholdNotExceeded", reflect.TypeOf((*MockStore)(nil).LockIfThresholdNotExceeded), arg0, arg1)
}

// ReleaseLock mocks base method.
func (m *MockStore) ReleaseLock(arg0 context.Context, arg1 db.ReleaseLockParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseLock", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseLock indicates an expected call of ReleaseLock.
func (mr *MockStoreMockRecorder) ReleaseLock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseLock", reflect.TypeOf((*MockStore)(nil).ReleaseLock), arg0, arg1)
}

// Rollback mocks base method.
func (m *MockStore) Rollback(arg0 *sql.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockStoreMockRecorder) Rollback(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockStore)(nil).Rollback), arg0)
}

// UpdateAccessToken mocks base method.
func (m *MockStore) UpdateAccessToken(arg0 context.Context, arg1 db.UpdateAccessTokenParams) (db.ProviderAccessToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccessToken", arg0, arg1)
	ret0, _ := ret[0].(db.ProviderAccessToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccessToken indicates an expected call of UpdateAccessToken.
func (mr *MockStoreMockRecorder) UpdateAccessToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccessToken", reflect.TypeOf((*MockStore)(nil).UpdateAccessToken), arg0, arg1)
}

// UpdateLease mocks base method.
func (m *MockStore) UpdateLease(arg0 context.Context, arg1 db.UpdateLeaseParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLease", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLease indicates an expected call of UpdateLease.
func (mr *MockStoreMockRecorder) UpdateLease(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLease", reflect.TypeOf((*MockStore)(nil).UpdateLease), arg0, arg1)
}

// UpdateOrganization mocks base method.
func (m *MockStore) UpdateOrganization(arg0 context.Context, arg1 db.UpdateOrganizationParams) (db.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrganization", arg0, arg1)
	ret0, _ := ret[0].(db.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrganization indicates an expected call of UpdateOrganization.
func (mr *MockStoreMockRecorder) UpdateOrganization(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganization", reflect.TypeOf((*MockStore)(nil).UpdateOrganization), arg0, arg1)
}

// UpdateProfile mocks base method.
func (m *MockStore) UpdateProfile(arg0 context.Context, arg1 db.UpdateProfileParams) (db.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", arg0, arg1)
	ret0, _ := ret[0].(db.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockStoreMockRecorder) UpdateProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockStore)(nil).UpdateProfile), arg0, arg1)
}

// UpdateRepository mocks base method.
func (m *MockStore) UpdateRepository(arg0 context.Context, arg1 db.UpdateRepositoryParams) (db.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRepository", arg0, arg1)
	ret0, _ := ret[0].(db.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRepository indicates an expected call of UpdateRepository.
func (mr *MockStoreMockRecorder) UpdateRepository(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRepository", reflect.TypeOf((*MockStore)(nil).UpdateRepository), arg0, arg1)
}

// UpdateRepositoryByID mocks base method.
func (m *MockStore) UpdateRepositoryByID(arg0 context.Context, arg1 db.UpdateRepositoryByIDParams) (db.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRepositoryByID", arg0, arg1)
	ret0, _ := ret[0].(db.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRepositoryByID indicates an expected call of UpdateRepositoryByID.
func (mr *MockStoreMockRecorder) UpdateRepositoryByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRepositoryByID", reflect.TypeOf((*MockStore)(nil).UpdateRepositoryByID), arg0, arg1)
}

// UpdateRole mocks base method.
func (m *MockStore) UpdateRole(arg0 context.Context, arg1 db.UpdateRoleParams) (db.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRole", arg0, arg1)
	ret0, _ := ret[0].(db.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRole indicates an expected call of UpdateRole.
func (mr *MockStoreMockRecorder) UpdateRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*MockStore)(nil).UpdateRole), arg0, arg1)
}

// UpdateRuleType mocks base method.
func (m *MockStore) UpdateRuleType(arg0 context.Context, arg1 db.UpdateRuleTypeParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRuleType", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRuleType indicates an expected call of UpdateRuleType.
func (mr *MockStoreMockRecorder) UpdateRuleType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRuleType", reflect.TypeOf((*MockStore)(nil).UpdateRuleType), arg0, arg1)
}

// UpsertArtifact mocks base method.
func (m *MockStore) UpsertArtifact(arg0 context.Context, arg1 db.UpsertArtifactParams) (db.Artifact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertArtifact", arg0, arg1)
	ret0, _ := ret[0].(db.Artifact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertArtifact indicates an expected call of UpsertArtifact.
func (mr *MockStoreMockRecorder) UpsertArtifact(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertArtifact", reflect.TypeOf((*MockStore)(nil).UpsertArtifact), arg0, arg1)
}

// UpsertArtifactVersion mocks base method.
func (m *MockStore) UpsertArtifactVersion(arg0 context.Context, arg1 db.UpsertArtifactVersionParams) (db.ArtifactVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertArtifactVersion", arg0, arg1)
	ret0, _ := ret[0].(db.ArtifactVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertArtifactVersion indicates an expected call of UpsertArtifactVersion.
func (mr *MockStoreMockRecorder) UpsertArtifactVersion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertArtifactVersion", reflect.TypeOf((*MockStore)(nil).UpsertArtifactVersion), arg0, arg1)
}

// UpsertProfileForEntity mocks base method.
func (m *MockStore) UpsertProfileForEntity(arg0 context.Context, arg1 db.UpsertProfileForEntityParams) (db.EntityProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertProfileForEntity", arg0, arg1)
	ret0, _ := ret[0].(db.EntityProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertProfileForEntity indicates an expected call of UpsertProfileForEntity.
func (mr *MockStoreMockRecorder) UpsertProfileForEntity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertProfileForEntity", reflect.TypeOf((*MockStore)(nil).UpsertProfileForEntity), arg0, arg1)
}

// UpsertPullRequest mocks base method.
func (m *MockStore) UpsertPullRequest(arg0 context.Context, arg1 db.UpsertPullRequestParams) (db.PullRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertPullRequest", arg0, arg1)
	ret0, _ := ret[0].(db.PullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertPullRequest indicates an expected call of UpsertPullRequest.
func (mr *MockStoreMockRecorder) UpsertPullRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertPullRequest", reflect.TypeOf((*MockStore)(nil).UpsertPullRequest), arg0, arg1)
}

// UpsertRuleDetailsAlert mocks base method.
func (m *MockStore) UpsertRuleDetailsAlert(arg0 context.Context, arg1 db.UpsertRuleDetailsAlertParams) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertRuleDetailsAlert", arg0, arg1)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertRuleDetailsAlert indicates an expected call of UpsertRuleDetailsAlert.
func (mr *MockStoreMockRecorder) UpsertRuleDetailsAlert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertRuleDetailsAlert", reflect.TypeOf((*MockStore)(nil).UpsertRuleDetailsAlert), arg0, arg1)
}

// UpsertRuleDetailsEval mocks base method.
func (m *MockStore) UpsertRuleDetailsEval(arg0 context.Context, arg1 db.UpsertRuleDetailsEvalParams) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertRuleDetailsEval", arg0, arg1)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertRuleDetailsEval indicates an expected call of UpsertRuleDetailsEval.
func (mr *MockStoreMockRecorder) UpsertRuleDetailsEval(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertRuleDetailsEval", reflect.TypeOf((*MockStore)(nil).UpsertRuleDetailsEval), arg0, arg1)
}

// UpsertRuleDetailsRemediate mocks base method.
func (m *MockStore) UpsertRuleDetailsRemediate(arg0 context.Context, arg1 db.UpsertRuleDetailsRemediateParams) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertRuleDetailsRemediate", arg0, arg1)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertRuleDetailsRemediate indicates an expected call of UpsertRuleDetailsRemediate.
func (mr *MockStoreMockRecorder) UpsertRuleDetailsRemediate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertRuleDetailsRemediate", reflect.TypeOf((*MockStore)(nil).UpsertRuleDetailsRemediate), arg0, arg1)
}

// UpsertRuleEvaluations mocks base method.
func (m *MockStore) UpsertRuleEvaluations(arg0 context.Context, arg1 db.UpsertRuleEvaluationsParams) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertRuleEvaluations", arg0, arg1)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertRuleEvaluations indicates an expected call of UpsertRuleEvaluations.
func (mr *MockStoreMockRecorder) UpsertRuleEvaluations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertRuleEvaluations", reflect.TypeOf((*MockStore)(nil).UpsertRuleEvaluations), arg0, arg1)
}

// UpsertRuleInstantiation mocks base method.
func (m *MockStore) UpsertRuleInstantiation(arg0 context.Context, arg1 db.UpsertRuleInstantiationParams) (db.EntityProfileRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertRuleInstantiation", arg0, arg1)
	ret0, _ := ret[0].(db.EntityProfileRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertRuleInstantiation indicates an expected call of UpsertRuleInstantiation.
func (mr *MockStoreMockRecorder) UpsertRuleInstantiation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertRuleInstantiation", reflect.TypeOf((*MockStore)(nil).UpsertRuleInstantiation), arg0, arg1)
}
