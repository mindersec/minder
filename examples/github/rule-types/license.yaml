---
version: v1
type: rule-type
name: license
context:
  provider: github
description: Verifies that there's a license file of a given type present in the repository.
guidance: |
  The license rule type ensures that a license file is present in the repository and its license type complies with
  the configured license type in your profile.

  For more information, see
  https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/adding-a-license-to-a-repository
def:
  # Defines the section of the pipeline the rule will appear in.
  # This will affect the template used to render multiple parts
  # of the rule.
  in_entity: repository
  # Defines the schema for writing a rule with this rule being checked
  # In this case there are no settings that need to be configured
  rule_schema:
    type: object
    properties:
      license_filename:
        type: string
        description: |
          The license filename to look for.
          For example, LICENSE, LICENSE.txt, etc.
        default: LICENSE
      license_type:
        type: string
        description: |
          The license type to look for.
          For example, Apache, MIT, etc.
          Leave "" to only check for the presence of the license file.
    required:
      - license_filename
      - license_type
  # Defines the configuration for ingesting data relevant for the rule
  ingest:
    type: git
    git:
      branch: main
  # Defines the configuration for evaluating data ingested against the given profile
  # The following example checks for the presence of a license file and the license type.
  # If the license type is not specified (license_type = ""), then only the presence of the license file is checked.
  eval:
    type: rego
    rego:
      type: deny-by-default
      def: |
        package minder

        import future.keywords.if

        default allow := false

        allow if {
            # Read the license file and check if it contains the license type
            fileStr := file.read(input.profile.license_filename)
            contains(fileStr, input.profile.license_type)
        } else if {
            # Check if the file exists and the license type is left blank
            file.exists(input.profile.license_filename)
            input.profile.license_type == ""
        }
  # Defines the configuration for alerting on the rule
  alert:
    type: security_advisory
    security_advisory:
      severity: "low"
