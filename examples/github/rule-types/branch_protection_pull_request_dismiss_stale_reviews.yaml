---
version: v1
type: rule-type
name: branch_protection_pull_request_dismiss_stale_reviews
context:
  provider: github
  group: Root Group
description: Verifies that a branch has proper protections.
guidance: |
  ## Configure branch protection to dismiss stale reviews

  You can protect important branches by setting branch protection rules, which define whether
  collaborators can delete or force push to the branch and set requirements for any pushes to the branch,
  such as passing status checks or a linear commit history.

  For more information, see
  https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/managing-protected-branches/managing-a-branch-protection-rule
def:
  # Defines the section of the pipeline the rule will appear in.
  # This will affect the template that is used to render multiple parts
  # of the rule.
  in_entity: repository
  # Defines the schema for parameters that will be passed to the rule
  param_schema:
    properties:
      branch:
        type: string
        description: "The name of the branch to check."
    required:
      - branch
  # Defines the schema for writing a rule with this rule being checked
  rule_schema:
    type: object
    properties:
      enabled:
        description: "Set to true if you want to automatically dismiss approving reviews when someone pushes a new commit."
        type: boolean
  # Defines the configuration for ingesting data relevant for the rule
  ingest:
    type: rest
    rest:
      # This is the path to the data source. Given that this will evaluate
      # for each repository in the organization, we use a template that
      # will be evaluated for each repository. The structure to use is the
      # protobuf structure for the entity that is being evaluated.
      endpoint: '/repos/{{.Entity.Owner}}/{{.Entity.Repository}}/branches/{{ index .Params "branch" }}/protection'
      # This is the method to use to retrieve the data. It should already default to JSON
      parse: json
  # Defines the configuration for evaluating data ingested against the given policy
  eval:
    type: jq
    jq:
      # Ingested points to the data retrieved in the `ingest` section
      - ingested:
          def: ".required_pull_request_reviews.dismiss_stale_reviews"
        # policy points to the policy itself.
        policy:
          def: ".enabled"
