---
version: v1
type: rule-type
name: dependabot_configured
context:
  provider: github
  group: Root Group
description: Verifies that Dependabot is configured for the repository
guidance: |
  Dependabot enables Automated dependency updates for repositories.
  It is recommended that repositories have some form of automated dependency updates enabled
  to ensure that vulnerabilities are not introduced into the codebase.

  For more information, see
  https://docs.github.com/en/code-security/dependabot/dependabot-version-updates/configuration-options-for-the-dependabot.yml-file
def:
  # Defines the section of the pipeline the rule will appear in.
  # This will affect the template that is used to render multiple parts
  # of the rule.
  in_entity: repository
  # Defines the schema for writing a rule with this rule being checked
  # In this case there is no settings that need to be configured
  rule_schema:
    type: object
    properties:
      package_ecosystem:
        type: string
        description: |
          The package ecosystem that the rule applies to.
          For example, npm, docker, github-actions, etc.
      schedule_interval:
        type: string
        description: |
          The interval that the rule should be evaluated.
          For example, daily, weekly, monthly, etc.
      apply_if_file:
        type: string
        description: |
          Optional. If specified, the rule will only be evaluated if the given file exists.
          This is useful for rules that are only applicable to certain types of repositories.
    required:
      - package_ecosystem
      - schedule_interval
  # Defines the configuration for ingesting data relevant for the rule
  ingest:
    type: git
    git:
      branch: main
  # Defines the configuration for evaluating data ingested against the given policy
  # This example uses the checks for a dependabot configuration in the dependabot.yml file
  # configured to run weekly for the package ecosystem specified.
  # Another example, for NPM could be:
  # update["package-ecosystem"] == "npm"
  # update.schedule.interval == "daily"
  eval:
    type: rego
    rego:
      type: deny-by-default
      def: |
        package mediator

        default allow := false

        # Set allow if we don't need to skip and the rule evaluation passes
        allow {
            # Read the dependabot configuration
            fileStr := file.read("./.github/dependabot.yml")

            # Parse the YAML content
            config := yaml.unmarshal(fileStr)

            # Ensure a configuration contains the package ecosystem daily update schedule
            update := config.updates[_]
            update["package-ecosystem"] == input.policy.package_ecosystem
            update.schedule.interval == input.policy.schedule_interval
        }

        # We skip if the apply_if_file is specified and the file does not exist
        skip {
            input.policy.apply_if_file != ""
            not file.exists(input.policy.apply_if_file)
        }