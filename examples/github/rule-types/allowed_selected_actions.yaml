---
version: v1
type: rule-type
name: allowed_selected_actions
context:
  provider: github
description: |
  Verifies the settings for selected actions and reusable workflows that are allowed
  in a repository. To use this rule, the repository profile for allowed_actions must
  be configured to selected.
guidance: |
  Having an overview over which actions and reusable workflows are allowed in a repository is important and allows for a better overall security posture.

  For more information, see
  https://docs.github.com/en/rest/actions/permissions#set-allowed-actions-and-reusable-workflows-for-a-repository
def:
  # Defines the section of the pipeline the rule will appear in.
  # This will affect the template used to render multiple parts
  # of the rule.
  in_entity: repository
  # Defines the schema for writing a rule with this rule being checked
  rule_schema:
    type: object
    properties:
      github_owned_allowed:
        type: boolean
        "description": "Whether GitHub-owned actions are allowed. For example, this includes the actions in the `actions` organization."
      verified_allowed:
        type: boolean
        "description": "Whether actions from GitHub Marketplace verified creators are allowed. Set to `true` to allow all actions by GitHub Marketplace verified creators."
      patterns_allowed:
        type: array
        description: "Specifies a list of string-matching patterns to allow specific action(s) and reusable workflow(s). Wildcards, tags, and SHAs are allowed. For example, `monalisa/octocat@*`, `monalisa/octocat@v2`, `monalisa/*`.\n\n**Note**: The `patterns_allowed` setting only applies to public repositories."
        items:
          type: string
  # Defines the configuration for ingesting data relevant for the rule
  ingest:
    type: rest
    rest:
      # This is the path to the data source. Given that this will evaluate
      # for each repository in the organization, we use a template that
      # will be evaluated for each repository. The structure to use is the
      # protobuf structure for the entity that is being evaluated.
      endpoint: "/repos/{{.Entity.Owner}}/{{.Entity.Name}}/actions/permissions/selected-actions"
      # This is the method to use to retrieve the data. It should already default to JSON
      parse: json
  # Defines the configuration for evaluating data ingested against the given profile
  eval:
    type: jq
    jq:
      # Ingested points to the data retrieved in the `ingest` section
      - ingested:
          def: ".github_owned_allowed"
        # profile points to the profile itself.
        profile:
          def: '.github_owned_allowed'
      - ingested:
          def: ".verified_allowed"
        profile:
          def: '.verified_allowed'
      - ingested:
          def: ".patterns_allowed"
        profile:
          def: ".patterns_allowed"
  # Defines the configuration for remediating on the rule
  remediate:
    type: rest
    rest:
      method: PUT
      endpoint: "/repos/{{.Entity.Owner}}/{{.Entity.Name}}/actions/permissions/selected-actions"
      body: |
        {"github_owned_allowed":{{ .Profile.github_owned_allowed }},"verified_allowed":{{ .Profile.verified_allowed }},"patterns_allowed":[{{range $index, $pattern := .Profile.patterns_allowed}}{{if $index}},{{end}}"{{ $pattern }}"{{end}}]}
  # Defines the configuration for alerting on the rule
  alert:
    type: security_advisory
    security_advisory:
      severity: "medium"