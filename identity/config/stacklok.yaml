# SPDX-FileCopyrightText: Copyright 2024 The Minder Authors
# SPDX-License-Identifier: Apache-2.0

# From:
# create realms -s realm=stacklok -s loginTheme=keycloak -s eventsEnabled=true -s 'enabledEventTypes=["DELETE_ACCOUNT"]' -s eventsExpiration=604800 -s enabled=true
realm: stacklok
enabled: true
loginTheme: keycloak
eventsEnabled: true
enabledEventTypes:
  - DELETE_ACCOUNT
eventsExpiration: 604800
adminEventsEnabled: true
attributes:
  adminEventsExpiration: 604800

# From:
# Add account deletion capability to stacklok realm (see https://www.keycloak.org/docs/latest/server_admin/#authentication-operations)
# update "/authentication/required-actions/delete_account" -r stacklok -b '{ "alias" : "delete_account", "name" : "Delete Account", "providerId" : "delete_account", "enabled" : true, "defaultAction" : false, "priority" : 60, "config" : { }}'
requiredActions:
  - alias: delete_account
    name: Delete Account
    providerId: delete_account
    enabled: true
    defaultAction: false
  - alias: VERIFY_PROFILE
    name: Verify Profile
    providerId: VERIFY_PROFILE
    enabled: false
    defaultAction: false

# From:
# Give all users permission to delete their own account
# add-roles -r stacklok --rname default-roles-stacklok --rolename delete-account --cclientid account
roles:
  realm:
    - name: default-roles-stacklok
      composites:
        client:
          account:
            - delete-account
            - view-profile
            - manage-account

# Collect gh_login and gh_id from GitHub and expose them in tokens
clientScopes:
  - name: gh-data
    description: "Add GitHub information to tokens"
    protocol: openid-connect
    attributes:
      "include.in.token.scope": "true"
      "display.on.consent.screen": "false"
    protocolMappers:
      - name: gh_id
        protocol: openid-connect
        protocolMapper: oidc-usermodel-attribute-mapper
        consentRequired: false
        config:
          userinfo.token.claim: "true"
          id.token.claim: "true"
          access.token.claim: "true"
          claim.name: "gh_id"
          jsonType.label: "String"
          user.attribute: "gh_id"
      - name: gh_login
        protocol: openid-connect
        protocolMapper: oidc-usermodel-attribute-mapper
        consentRequired: false
        config:
          userinfo.token.claim: "true"
          id.token.claim: "true"
          access.token.claim: "true"
          claim.name: "gh_login"
          jsonType.label: "String"
          user.attribute: "gh_login"
  - name: offline_access
    description: "OpenID Connect built-in scope: offline_access"
    protocol: openid-connect
    attributes:
      "include.in.token.scope": "true"
      "display.on.consent.screen": "false"
  - name: minder-audience
    description: "Add minder to audience claim"
    protocol: openid-connect
    attributes:
      "include.in.token.scope": "true"
      "display.on.consent.screen": "false"
    protocolMappers:
      - name: minder_audience
        protocol: openid-connect
        protocolMapper: oidc-audience-mapper
        consentRequired: false
        config:
          id.token.claim: "false"
          access.token.claim: "true"
          introspection.token.claim: "true"
          included.custom.audience: "minder"
          userinfo.token.claim: "false"

clients:
  - clientId: minder-cli
    enabled: true
    redirectUris:
      - "http://localhost/*"
    publicClient: true
    # If you set one of these, you seem to need to set both (per CLI experimentation)
    defaultClientScopes:
      - basic
      - acr
      - email
      - profile
      - roles
      - web-origins
      - gh-data
      - minder-audience
    optionalClientScopes:
      - microprofile-jwt
      - offline_access
  - clientId: minder-ui
    enabled: true
    redirectUris:
      - "http://localhost/*"
    publicClient: true
    # If you set one of these, you seem to need to set both (per CLI experimentation)
    defaultClientScopes:
      - basic
      - acr
      - email
      - profile
      - roles
      - web-origins
      - gh-data
      - minder-audience
    optionalClientScopes:
      - microprofile-jwt
      - offline_access
  # From:
  # create clients -r stacklok -s clientId=minder-server -s serviceAccountsEnabled=true -s clientAuthenticatorType=client-secret -s secret="$KC_MINDER_SERVER_SECRET" -s enabled=true -s defaultClientScopes='["acr","email","profile","roles","web-origins","gh-data"]' -s optionalClientScopes='["microprofile-jwt","offline_access"]'
  - clientId: minder-server
    enabled: true
    serviceAccountsEnabled: true
    clientAuthenticatorType: client-secret
    secret: "$(env:KC_MINDER_SERVER_SECRET)"

users:
  - username: service-account-minder-server
    clientRoles:
      realm-management:
        # From:
        # Give minder-server the capability to view events
        # add-roles -r stacklok --uusername service-account-minder-server --cclientid realm-management --rolename view-events
        - view-events
        # From:
        # Give minder-server the capability to delete users
        # add-roles -r stacklok --uusername service-account-minder-server --cclientid realm-management --rolename manage-users
        - manage-users

# Allow unmanaged attributes for gh_id and gh_login
components:
  org.keycloak.userprofile.UserProfileProvider:
    - providerId: "declarative-user-profile"
      config:
        kc.user.profile.config:
        - >-
          {"attributes":[{"name":"username","displayName":"${username}","validations":{"length":{"min":3,"max":255},"username-prohibited-characters":{},"up-username-not-idn-homograph":{}},"permissions":{"view":["admin","user"],"edit":["admin","user"]},"multivalued":false},{"name":"email","displayName":"${email}","validations":{"email":{},"length":{"max":255}},"required":{"roles":["user"]},"permissions":{"view":["admin","user"],"edit":["admin","user"]},"multivalued":false},{"name":"firstName","displayName":"${firstName}","validations":{"length":{"max":255},"person-name-prohibited-characters":{}},"required":{"roles":["user"]},"permissions":{"view":["admin","user"],"edit":["admin","user"]},"multivalued":false},{"name":"lastName","displayName":"${lastName}","validations":{"length":{"max":255},"person-name-prohibited-characters":{}},"required":{"roles":["user"]},"permissions":{"view":["admin","user"],"edit":["admin","user"]},"multivalued":false}],"groups":[{"name":"user-metadata","displayHeader":"User metadata","displayDescription":"Attributes, which refer to user metadata"}],"unmanagedAttributePolicy":"ENABLED"}

authenticationFlows:
  - alias: "browser"
    description: "browser based authentication"
    providerId: "basic-flow"
    topLevel: true
    builtIn: true
    authenticationExecutions:
      - authenticatorConfig: "github-default"
        authenticator: "identity-provider-redirector"
        authenticatorFlow: false
        requirement: "ALTERNATIVE"
        priority: 25
        autheticatorFlow: false
        userSetupAllowed: false
  - alias: "first broker login"
    providerId: "basic-flow"
    topLevel: true
    builtIn: true
    authenticationExecutions:
      - authenticatorConfig: "review profile config"
        authenticator: "idp-review-profile"
        authenticatorFlow: false
        requirement: "DISABLED"
        priority: 10
        autheticatorFlow: false
        userSetupAllowed: false
authenticatorConfig:
  - alias: "github-default"
    config:
      defaultProvider: "github"
