on:
  workflow_call:
  workflow_dispatch:
jobs:
  test:
    name: Unit testing
    runs-on: ubuntu-latest
    steps:
      # Checkout your project with git
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      # Install Go on the VM running the action.
      - name: Set up Go
        uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5.0.2
        with:
          go-version-file: 'go.mod'
      - name: Set up helm (test dependency)
        uses: azure/setup-helm@fe7b79cd5ee1e45176fcad797de68ecaf3ca4814 # v4.2.0
      # Install gotestfmt on the VM running the action.
      - name: Set up gotestfmt
        uses: GoTestTools/gotestfmt-action@8b4478c7019be847373babde9300210e7de34bfb # v2.2.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      # copy config file into place
      - name: Copy config file
        run: cp config/server-config.yaml.example ./server-config.yaml
      - name: Launch Registry
        run: |
          if [ "$(docker inspect -f '{{.State.Running}}' registry 2>/dev/null || true)" != 'true' ]; then
            docker run -d --restart=always -p "127.0.0.1:5000:5000" --network bridge --name registry \
            registry:2
          fi
      # Run the tests
      - name: Run tests
        env:
          MINDER_TEST_REGISTRY: "localhost:5000"
        run: make test-silent
  cover:
    name: Coverage
    permissions:
      contents: read
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      - name: Set up Go
        uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5.0.2
        with:
          go-version-file: 'go.mod'
      - name: Set up helm (test dependency)
        uses: azure/setup-helm@fe7b79cd5ee1e45176fcad797de68ecaf3ca4814 # v4.2.0
      - name: Copy config file
        run: cp config/server-config.yaml.example ./server-config.yaml
      - name: Run coverage
        run: make cover
      - name: Try converting to LCOV
        run: go run github.com/jandelgado/gcov2lcov@latest -infile=./coverage.out -outfile=./coverage.lcov
      - name: Coveralls GitHub Action
        uses: coverallsapp/github-action@643bc377ffa44ace6394b2b5d0d3950076de9f63 # v2.3.0

  authz:
    name: Authz tests
    runs-on: ubuntu-latest
    steps:
      # Checkout your project with git
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      # Install Go on the VM running the action.
      - name: Set up Go
        uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5.0.2
        with:
          go-version-file: 'go.mod'
      - name: Run `make bootstrap`
        run: |
          make bootstrap
      - name: Run authz tests
        run: |-
          make authz-tests
