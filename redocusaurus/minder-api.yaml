swagger: '2.0'
info:
  title: minder/v1/minder.proto
  version: version not set
tags:
  - name: HealthService
  - name: ArtifactService
  - name: OAuthService
  - name: RepositoryService
  - name: UserService
  - name: ProfileService
  - name: EvalResultsService
  - name: PermissionsService
  - name: ProjectsService
  - name: ProvidersService
consumes:
  - application/json
produces:
  - application/json
paths:
  /api/v1/artifact/name/{name}:
    get:
      operationId: ArtifactService_GetArtifactByName
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/v1GetArtifactByNameResponse'
      parameters:
        - name: name
          in: path
          required: true
          type: string
          pattern: .+
        - name: context.provider
          description: name of the provider
          in: query
          required: false
          type: string
        - name: context.project
          description: ID of the project
          in: query
          required: false
          type: string
        - name: context.retiredOrganization
          in: query
          required: false
          type: string
      tags:
        - ArtifactService
  /api/v1/artifact/{id}:
    get:
      operationId: ArtifactService_GetArtifactById
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/v1GetArtifactByIdResponse'
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: context.provider
          description: name of the provider
          in: query
          required: false
          type: string
        - name: context.project
          description: ID of the project
          in: query
          required: false
          type: string
        - name: context.retiredOrganization
          in: query
          required: false
          type: string
      tags:
        - ArtifactService
  /api/v1/artifacts:
    get:
      operationId: ArtifactService_ListArtifacts2
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/v1ListArtifactsResponse'
      parameters:
        - name: provider
          in: query
          required: false
          type: string
        - name: context.provider
          description: name of the provider
          in: query
          required: false
          type: string
        - name: context.project
          description: ID of the project
          in: query
          required: false
          type: string
        - name: context.retiredOrganization
          in: query
          required: false
          type: string
        - name: from
          in: query
          required: false
          type: string
      tags:
        - ArtifactService
  /api/v1/artifacts/{provider}:
    get:
      operationId: ArtifactService_ListArtifacts
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/v1ListArtifactsResponse'
      parameters:
        - name: provider
          in: path
          required: true
          type: string
        - name: context.provider
          description: name of the provider
          in: query
          required: false
          type: string
        - name: context.project
          description: ID of the project
          in: query
          required: false
          type: string
        - name: context.retiredOrganization
          in: query
          required: false
          type: string
        - name: from
          in: query
          required: false
          type: string
      tags:
        - ArtifactService
  /api/v1/auth/token:
    post:
      operationId: OAuthService_StoreProviderToken2
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/v1StoreProviderTokenResponse'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1StoreProviderTokenRequest'
      tags:
        - OAuthService
  /api/v1/auth/url:
    get:
      operationId: OAuthService_GetAuthorizationURL
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/v1GetAuthorizationURLResponse'
      parameters:
        - name: cli
          in: query
          required: false
          type: boolean
        - name: port
          in: query
          required: false
          type: integer
          format: int32
        - name: owner
          in: query
          required: false
          type: string
        - name: context.provider
          description: name of the provider
          in: query
          required: false
          type: string
        - name: context.project
          description: ID of the project
          in: query
          required: false
          type: string
        - name: context.retiredOrganization
          in: query
          required: false
          type: string
        - name: redirectUrl
          in: query
          required: false
          type: string
      tags:
        - OAuthService
  /api/v1/auth/verify:
    get:
      summary: >-
        VerifyProviderCredential verifies that a credential has been created
        matching the enrollment nonce
      operationId: OAuthService_VerifyProviderCredential
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/v1VerifyProviderCredentialResponse'
      parameters:
        - name: context.provider
          description: name of the provider
          in: query
          required: false
          type: string
        - name: context.project
          description: ID of the project
          in: query
          required: false
          type: string
        - name: context.retiredOrganization
          in: query
          required: false
          type: string
        - name: enrollmentNonce
          description: >-
            enrollment_nonce is the state parameter returned when enrolling the
            provider
          in: query
          required: false
          type: string
      tags:
        - OAuthService
  /api/v1/auth/verify/{provider}/{timestamp}:
    get:
      summary: >-
        VerifyProviderTokenFrom verifies that a token has been created for a
        provider since given timestamp
      operationId: OAuthService_VerifyProviderTokenFrom
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/v1VerifyProviderTokenFromResponse'
      parameters:
        - name: provider
          in: path
          required: true
          type: string
        - name: timestamp
          in: path
          required: true
          type: string
          format: date-time
        - name: context.provider
          description: name of the provider
          in: query
          required: false
          type: string
        - name: context.project
          description: ID of the project
          in: query
          required: false
          type: string
        - name: context.retiredOrganization
          in: query
          required: false
          type: string
      tags:
        - OAuthService
  /api/v1/auth/verify/{timestamp}:
    get:
      summary: >-
        VerifyProviderTokenFrom verifies that a token has been created for a
        provider since given timestamp
      operationId: OAuthService_VerifyProviderTokenFrom2
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/v1VerifyProviderTokenFromResponse'
      parameters:
        - name: timestamp
          in: path
          required: true
          type: string
          format: date-time
        - name: provider
          in: query
          required: false
          type: string
        - name: context.provider
          description: name of the provider
          in: query
          required: false
          type: string
        - name: context.project
          description: ID of the project
          in: query
          required: false
          type: string
        - name: context.retiredOrganization
          in: query
          required: false
          type: string
      tags:
        - OAuthService
  /api/v1/auth/{provider}/token:
    post:
      operationId: OAuthService_StoreProviderToken
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/v1StoreProviderTokenResponse'
      parameters:
        - name: provider
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/OAuthServiceStoreProviderTokenBody'
      tags:
        - OAuthService
  /api/v1/health:
    get:
      operationId: HealthService_CheckHealth
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/v1CheckHealthResponse'
      tags:
        - HealthService
  /api/v1/my/providers:
    get:
      summary: |-
        GetUnclaimedProviders returns a list of known provider configurations
        that this user could claim based on their identity.  This is a read-only
        operation for use by clients which wish to present a menu of options.
      operationId: ProvidersService_GetUnclaimedProviders
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/v1GetUnclaimedProvidersResponse'
      parameters:
        - name: context.provider
          description: name of the provider
          in: query
          required: false
          type: string
        - name: context.project
          description: ID of the project
          in: query
          required: false
          type: string
        - name: context.retiredOrganization
          in: query
          required: false
          type: string
      tags:
        - ProvidersService
  /api/v1/permissions/assign:
    post:
      operationId: PermissionsService_AssignRole
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/v1AssignRoleResponse'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1AssignRoleRequest'
      tags:
        - PermissionsService
  /api/v1/permissions/assignments:
    get:
      operationId: PermissionsService_ListRoleAssignments
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/v1ListRoleAssignmentsResponse'
      parameters:
        - name: context.provider
          description: name of the provider
          in: query
          required: false
          type: string
        - name: context.project
          description: ID of the project
          in: query
          required: false
          type: string
        - name: context.retiredOrganization
          in: query
          required: false
          type: string
      tags:
        - PermissionsService
  /api/v1/permissions/remove/{roleAssignment.role}/subject/{roleAssignment.subject}:
    delete:
      operationId: PermissionsService_RemoveRole
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/v1RemoveRoleResponse'
      parameters:
        - name: roleAssignment.role
          description: role is the role that is assigned.
          in: path
          required: true
          type: string
        - name: roleAssignment.subject
          description: subject is the subject to which the role is assigned.
          in: path
          required: true
          type: string
        - name: context.provider
          description: name of the provider
          in: query
          required: false
          type: string
        - name: context.project
          description: ID of the project
          in: query
          required: false
          type: string
        - name: context.retiredOrganization
          in: query
          required: false
          type: string
        - name: roleAssignment.project
          description: projectt is the projectt in which the role is assigned.
          in: query
          required: false
          type: string
      tags:
        - PermissionsService
  /api/v1/permissions/roles:
    get:
      operationId: PermissionsService_ListRoles
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/v1ListRolesResponse'
      parameters:
        - name: context.provider
          description: name of the provider
          in: query
          required: false
          type: string
        - name: context.project
          description: ID of the project
          in: query
          required: false
          type: string
        - name: context.retiredOrganization
          in: query
          required: false
          type: string
      tags:
        - PermissionsService
  /api/v1/profile:
    post:
      operationId: ProfileService_CreateProfile
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/v1CreateProfileResponse'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1CreateProfileRequest'
      tags:
        - ProfileService
    put:
      operationId: ProfileService_UpdateProfile
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/v1UpdateProfileResponse'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1UpdateProfileRequest'
      tags:
        - ProfileService
  /api/v1/profile/name/{name}/status:
    get:
      operationId: ProfileService_GetProfileStatusByName
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/v1GetProfileStatusByNameResponse'
      parameters:
        - name: name
          description: name is the name of the profile to get
          in: path
          required: true
          type: string
          pattern: .+
        - name: context.provider
          description: name of the provider
          in: query
          required: false
          type: string
        - name: context.project
          description: ID of the project
          in: query
          required: false
          type: string
        - name: context.retiredOrganization
          in: query
          required: false
          type: string
        - name: entity.type
          description: entity is the entity to get status for. Incompatible with `all`
          in: query
          required: false
          type: string
          enum:
            - ENTITY_UNSPECIFIED
            - ENTITY_REPOSITORIES
            - ENTITY_BUILD_ENVIRONMENTS
            - ENTITY_ARTIFACTS
            - ENTITY_PULL_REQUESTS
          default: ENTITY_UNSPECIFIED
        - name: entity.id
          description: >-
            id is the ID of the entity to get status for. Incompatible with
            `all`
          in: query
          required: false
          type: string
        - name: all
          in: query
          required: false
          type: boolean
        - name: rule
          description: rule is the type of the rule. Deprecated in favor of rule_type
          in: query
          required: false
          type: string
        - name: ruleType
          in: query
          required: false
          type: string
        - name: ruleName
          in: query
          required: false
          type: string
      tags:
        - ProfileService
  /api/v1/profile/{id}:
    get:
      operationId: ProfileService_GetProfileById
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/v1GetProfileByIdResponse'
      parameters:
        - name: id
          description: id is the id of the profile to get
          in: path
          required: true
          type: string
        - name: context.provider
          description: name of the provider
          in: query
          required: false
          type: string
        - name: context.project
          description: ID of the project
          in: query
          required: false
          type: string
        - name: context.retiredOrganization
          in: query
          required: false
          type: string
      tags:
        - ProfileService
    delete:
      operationId: ProfileService_DeleteProfile
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/v1DeleteProfileResponse'
      parameters:
        - name: id
          description: id is the id of the profile to delete
          in: path
          required: true
          type: string
        - name: context.provider
          description: name of the provider
          in: query
          required: false
          type: string
        - name: context.project
          description: ID of the project
          in: query
          required: false
          type: string
        - name: context.retiredOrganization
          in: query
          required: false
          type: string
      tags:
        - ProfileService
    patch:
      operationId: ProfileService_PatchProfile
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/v1PatchProfileResponse'
      parameters:
        - name: id
          description: |-
            The id of the profile to patch. Same explanation about explicitness
            as for the context
          in: path
          required: true
          type: string
        - name: patch
          description: The patch to apply to the profile
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1Profile'
        - name: context.provider
          description: name of the provider
          in: query
          required: false
          type: string
        - name: context.project
          description: ID of the project
          in: query
          required: false
          type: string
        - name: context.retiredOrganization
          in: query
          required: false
          type: string
      tags:
        - ProfileService
  /api/v1/profile_status:
    get:
      operationId: ProfileService_GetProfileStatusByProject
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/v1GetProfileStatusByProjectResponse'
      parameters:
        - name: context.provider
          description: name of the provider
          in: query
          required: false
          type: string
        - name: context.project
          description: ID of the project
          in: query
          required: false
          type: string
        - name: context.retiredOrganization
          in: query
          required: false
          type: string
      tags:
        - ProfileService
  /api/v1/profiles:
    get:
      operationId: ProfileService_ListProfiles
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/v1ListProfilesResponse'
      parameters:
        - name: context.provider
          description: name of the provider
          in: query
          required: false
          type: string
        - name: context.project
          description: ID of the project
          in: query
          required: false
          type: string
        - name: context.retiredOrganization
          in: query
          required: false
          type: string
        - name: labelFilter
          description: >-
            Filter profiles to only those matching the specified labels.


            The default is to return all user-created profiles; the string "*"
            can

            be used to select all profiles, including system profiles.  This
            syntax

            may be expanded in the future.
          in: query
          required: false
          type: string
      tags:
        - ProfileService
  /api/v1/projects:
    get:
      operationId: ProjectsService_ListProjects
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/v1ListProjectsResponse'
      tags:
        - ProjectsService
    delete:
      operationId: ProjectsService_DeleteProject
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/v1DeleteProjectResponse'
      parameters:
        - name: context.provider
          description: name of the provider
          in: query
          required: false
          type: string
        - name: context.project
          description: ID of the project
          in: query
          required: false
          type: string
        - name: context.retiredOrganization
          in: query
          required: false
          type: string
      tags:
        - ProjectsService
    post:
      operationId: ProjectsService_CreateProject
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/v1CreateProjectResponse'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1CreateProjectRequest'
      tags:
        - ProjectsService
    put:
      operationId: ProjectsService_UpdateProject
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/v1UpdateProjectResponse'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1UpdateProjectRequest'
      tags:
        - ProjectsService
    patch:
      operationId: ProjectsService_PatchProject
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/v1PatchProjectResponse'
      parameters:
        - name: patch
          description: patch is the patch to apply to the project
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1ProjectPatch'
        - name: context.provider
          description: name of the provider
          in: query
          required: false
          type: string
        - name: context.project
          description: ID of the project
          in: query
          required: false
          type: string
        - name: context.retiredOrganization
          in: query
          required: false
          type: string
      tags:
        - ProjectsService
  /api/v1/projects/entity/reconcile:
    post:
      operationId: ProjectsService_CreateEntityReconciliationTask
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/v1CreateEntityReconciliationTaskResponse'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1CreateEntityReconciliationTaskRequest'
      tags:
        - ProjectsService
  /api/v1/provider_classes:
    get:
      operationId: ProvidersService_ListProviderClasses
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/v1ListProviderClassesResponse'
      parameters:
        - name: context.provider
          description: name of the provider
          in: query
          required: false
          type: string
        - name: context.project
          description: ID of the project
          in: query
          required: false
          type: string
        - name: context.retiredOrganization
          in: query
          required: false
          type: string
      tags:
        - ProvidersService
  /api/v1/providers:
    get:
      operationId: ProvidersService_ListProviders
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/v1ListProvidersResponse'
      parameters:
        - name: context.provider
          description: name of the provider
          in: query
          required: false
          type: string
        - name: context.project
          description: ID of the project
          in: query
          required: false
          type: string
        - name: context.retiredOrganization
          in: query
          required: false
          type: string
        - name: limit
          description: limit is the maximum number of providers to return.
          in: query
          required: false
          type: integer
          format: int32
        - name: cursor
          description: >-
            cursor is the cursor to use for the page of results, empty if at the
            beginning
          in: query
          required: false
          type: string
      tags:
        - ProvidersService
    delete:
      operationId: ProvidersService_DeleteProvider
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/v1DeleteProviderResponse'
      parameters:
        - name: context.provider
          description: name of the provider
          in: query
          required: false
          type: string
        - name: context.project
          description: ID of the project
          in: query
          required: false
          type: string
        - name: context.retiredOrganization
          in: query
          required: false
          type: string
      tags:
        - ProvidersService
    post:
      operationId: ProvidersService_CreateProvider
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/v1CreateProviderResponse'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1CreateProviderRequest'
      tags:
        - ProvidersService
  /api/v1/providers/{id}:
    delete:
      operationId: ProvidersService_DeleteProviderByID
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/v1DeleteProviderByIDResponse'
      parameters:
        - name: id
          description: id is the id of the provider to delete
          in: path
          required: true
          type: string
        - name: context.provider
          description: name of the provider
          in: query
          required: false
          type: string
        - name: context.project
          description: ID of the project
          in: query
          required: false
          type: string
        - name: context.retiredOrganization
          in: query
          required: false
          type: string
      tags:
        - ProvidersService
  /api/v1/providers/{name}:
    get:
      operationId: ProvidersService_GetProvider
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/v1GetProviderResponse'
      parameters:
        - name: name
          description: name is the name of the provider to get.
          in: path
          required: true
          type: string
        - name: context.provider
          description: name of the provider
          in: query
          required: false
          type: string
        - name: context.project
          description: ID of the project
          in: query
          required: false
          type: string
        - name: context.retiredOrganization
          in: query
          required: false
          type: string
      tags:
        - ProvidersService
  /api/v1/repositories:
    get:
      operationId: RepositoryService_ListRepositories2
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/v1ListRepositoriesResponse'
      parameters:
        - name: provider
          in: query
          required: false
          type: string
        - name: limit
          in: query
          required: false
          type: string
          format: int64
        - name: context.provider
          description: name of the provider
          in: query
          required: false
          type: string
        - name: context.project
          description: ID of the project
          in: query
          required: false
          type: string
        - name: context.retiredOrganization
          in: query
          required: false
          type: string
        - name: cursor
          in: query
          required: false
          type: string
      tags:
        - RepositoryService
  /api/v1/repositories/provider/{provider}:
    get:
      operationId: RepositoryService_ListRepositories
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/v1ListRepositoriesResponse'
      parameters:
        - name: provider
          in: path
          required: true
          type: string
        - name: limit
          in: query
          required: false
          type: string
          format: int64
        - name: context.provider
          description: name of the provider
          in: query
          required: false
          type: string
        - name: context.project
          description: ID of the project
          in: query
          required: false
          type: string
        - name: context.retiredOrganization
          in: query
          required: false
          type: string
        - name: cursor
          in: query
          required: false
          type: string
      tags:
        - RepositoryService
  /api/v1/repositories/provider/{provider}/remote:
    get:
      operationId: RepositoryService_ListRemoteRepositoriesFromProvider
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/v1ListRemoteRepositoriesFromProviderResponse'
      parameters:
        - name: provider
          in: path
          required: true
          type: string
        - name: context.provider
          description: name of the provider
          in: query
          required: false
          type: string
        - name: context.project
          description: ID of the project
          in: query
          required: false
          type: string
        - name: context.retiredOrganization
          in: query
          required: false
          type: string
      tags:
        - RepositoryService
  /api/v1/repositories/remote:
    get:
      operationId: RepositoryService_ListRemoteRepositoriesFromProvider2
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/v1ListRemoteRepositoriesFromProviderResponse'
      parameters:
        - name: provider
          in: query
          required: false
          type: string
        - name: context.provider
          description: name of the provider
          in: query
          required: false
          type: string
        - name: context.project
          description: ID of the project
          in: query
          required: false
          type: string
        - name: context.retiredOrganization
          in: query
          required: false
          type: string
      tags:
        - RepositoryService
  /api/v1/repository/id/{repositoryId}:
    get:
      operationId: RepositoryService_GetRepositoryById
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/v1GetRepositoryByIdResponse'
      parameters:
        - name: repositoryId
          in: path
          required: true
          type: string
        - name: context.provider
          description: name of the provider
          in: query
          required: false
          type: string
        - name: context.project
          description: ID of the project
          in: query
          required: false
          type: string
        - name: context.retiredOrganization
          in: query
          required: false
          type: string
      tags:
        - RepositoryService
    delete:
      operationId: RepositoryService_DeleteRepositoryById
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/v1DeleteRepositoryByIdResponse'
      parameters:
        - name: repositoryId
          in: path
          required: true
          type: string
        - name: context.provider
          description: name of the provider
          in: query
          required: false
          type: string
        - name: context.project
          description: ID of the project
          in: query
          required: false
          type: string
        - name: context.retiredOrganization
          in: query
          required: false
          type: string
      tags:
        - RepositoryService
  /api/v1/repository/name/{name}:
    get:
      operationId: RepositoryService_GetRepositoryByName2
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/v1GetRepositoryByNameResponse'
      parameters:
        - name: name
          in: path
          required: true
          type: string
          pattern: .+
        - name: provider
          in: query
          required: false
          type: string
        - name: context.provider
          description: name of the provider
          in: query
          required: false
          type: string
        - name: context.project
          description: ID of the project
          in: query
          required: false
          type: string
        - name: context.retiredOrganization
          in: query
          required: false
          type: string
      tags:
        - RepositoryService
    delete:
      operationId: RepositoryService_DeleteRepositoryByName2
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/v1DeleteRepositoryByNameResponse'
      parameters:
        - name: name
          in: path
          required: true
          type: string
          pattern: .+
        - name: provider
          in: query
          required: false
          type: string
        - name: context.provider
          description: name of the provider
          in: query
          required: false
          type: string
        - name: context.project
          description: ID of the project
          in: query
          required: false
          type: string
        - name: context.retiredOrganization
          in: query
          required: false
          type: string
      tags:
        - RepositoryService
  /api/v1/repository/provider/{provider}/name/{name}:
    get:
      operationId: RepositoryService_GetRepositoryByName
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/v1GetRepositoryByNameResponse'
      parameters:
        - name: provider
          in: path
          required: true
          type: string
        - name: name
          in: path
          required: true
          type: string
          pattern: .+
        - name: context.provider
          description: name of the provider
          in: query
          required: false
          type: string
        - name: context.project
          description: ID of the project
          in: query
          required: false
          type: string
        - name: context.retiredOrganization
          in: query
          required: false
          type: string
      tags:
        - RepositoryService
    delete:
      operationId: RepositoryService_DeleteRepositoryByName
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/v1DeleteRepositoryByNameResponse'
      parameters:
        - name: provider
          in: path
          required: true
          type: string
        - name: name
          in: path
          required: true
          type: string
          pattern: .+
        - name: context.provider
          description: name of the provider
          in: query
          required: false
          type: string
        - name: context.project
          description: ID of the project
          in: query
          required: false
          type: string
        - name: context.retiredOrganization
          in: query
          required: false
          type: string
      tags:
        - RepositoryService
  /api/v1/repository/provider/{provider}/register:
    post:
      operationId: RepositoryService_RegisterRepository
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/v1RegisterRepositoryResponse'
      parameters:
        - name: provider
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/RepositoryServiceRegisterRepositoryBody'
      tags:
        - RepositoryService
  /api/v1/repository/register:
    post:
      operationId: RepositoryService_RegisterRepository2
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/v1RegisterRepositoryResponse'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1RegisterRepositoryRequest'
      tags:
        - RepositoryService
  /api/v1/results:
    get:
      operationId: EvalResultsService_ListEvaluationResults
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/v1ListEvaluationResultsResponse'
      parameters:
        - name: context.provider
          description: name of the provider
          in: query
          required: false
          type: string
        - name: context.project
          description: ID of the project
          in: query
          required: false
          type: string
        - name: context.retiredOrganization
          in: query
          required: false
          type: string
        - name: profile
          description: ID can contain either a profile name or an ID
          in: query
          required: false
          type: string
        - name: labelFilter
          description: >-
            Filter profiles to only those matching the specified labels.


            The default is to return all user-created profiles; the string "*"
            can

            be used to select all profiles, including system profiles.  This
            syntax

            may be expanded in the future.
          in: query
          required: false
          type: string
        - name: ruleName
          description: |-
            If set, only return evaluation results for the named rules.
            If empty, return evaluation results for all rules
          in: query
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
      tags:
        - EvalResultsService
  /api/v1/rule_type:
    post:
      operationId: ProfileService_CreateRuleType
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/v1CreateRuleTypeResponse'
      parameters:
        - name: body
          description: CreateRuleTypeRequest is the request to create a rule type.
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1CreateRuleTypeRequest'
      tags:
        - ProfileService
    put:
      operationId: ProfileService_UpdateRuleType
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/v1UpdateRuleTypeResponse'
      parameters:
        - name: body
          description: UpdateRuleTypeRequest is the request to update a rule type.
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1UpdateRuleTypeRequest'
      tags:
        - ProfileService
  /api/v1/rule_type/name/{name}:
    get:
      operationId: ProfileService_GetRuleTypeByName
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/v1GetRuleTypeByNameResponse'
      parameters:
        - name: name
          description: name is the name of the rule type.
          in: path
          required: true
          type: string
          pattern: .+
        - name: context.provider
          description: name of the provider
          in: query
          required: false
          type: string
        - name: context.project
          description: ID of the project
          in: query
          required: false
          type: string
        - name: context.retiredOrganization
          in: query
          required: false
          type: string
      tags:
        - ProfileService
  /api/v1/rule_type/{id}:
    get:
      operationId: ProfileService_GetRuleTypeById
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/v1GetRuleTypeByIdResponse'
      parameters:
        - name: id
          description: id is the id of the rule type.
          in: path
          required: true
          type: string
        - name: context.provider
          description: name of the provider
          in: query
          required: false
          type: string
        - name: context.project
          description: ID of the project
          in: query
          required: false
          type: string
        - name: context.retiredOrganization
          in: query
          required: false
          type: string
      tags:
        - ProfileService
    delete:
      operationId: ProfileService_DeleteRuleType
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/v1DeleteRuleTypeResponse'
      parameters:
        - name: id
          description: id is the id of the rule type to be deleted.
          in: path
          required: true
          type: string
        - name: context.provider
          description: name of the provider
          in: query
          required: false
          type: string
        - name: context.project
          description: ID of the project
          in: query
          required: false
          type: string
        - name: context.retiredOrganization
          in: query
          required: false
          type: string
      tags:
        - ProfileService
  /api/v1/rule_types:
    get:
      operationId: ProfileService_ListRuleTypes
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/v1ListRuleTypesResponse'
      parameters:
        - name: context.provider
          description: name of the provider
          in: query
          required: false
          type: string
        - name: context.project
          description: ID of the project
          in: query
          required: false
          type: string
        - name: context.retiredOrganization
          in: query
          required: false
          type: string
      tags:
        - ProfileService
  /api/v1/user:
    get:
      operationId: UserService_GetUser
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/v1GetUserResponse'
      tags:
        - UserService
    delete:
      operationId: UserService_DeleteUser
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/v1DeleteUserResponse'
      tags:
        - UserService
    post:
      operationId: UserService_CreateUser
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/v1CreateUserResponse'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1CreateUserRequest'
      tags:
        - UserService
definitions:
  AlertAlertTypeSA:
    type: object
    properties:
      severity:
        type: string
  DefinitionAlert:
    type: object
    properties:
      type:
        type: string
      securityAdvisory:
        $ref: '#/definitions/AlertAlertTypeSA'
  DefinitionEval:
    type: object
    properties:
      type:
        type: string
        title: |-
          type is the type of the data evaluation.
          Right now only `jq` is supported as a driver
      jq:
        type: array
        items:
          type: object
          $ref: '#/definitions/EvalJQComparison'
        description: |-
          jq is only used if the `jq` type is selected.
          It defines the comparisons that are made between
          the ingested data and the profile rule.
      rego:
        $ref: '#/definitions/EvalRego'
        description: rego is only used if the `rego` type is selected.
      vulncheck:
        $ref: '#/definitions/EvalVulncheck'
        description: vulncheck is only used if the `vulncheck` type is selected.
      trusty:
        $ref: '#/definitions/EvalTrusty'
        title: |-
          The trusty type is no longer used, but is still here for backwards
          compatibility with existing stored rules
      homoglyphs:
        $ref: '#/definitions/EvalHomoglyphs'
        description: homoglyphs is only used if the `homoglyphs` type is selected.
    description: |-
      Eval defines the data evaluation definition.
      This pertains to the way we traverse data from the upstream
      endpoint and how we compare it to the rule.
  DefinitionIngest:
    type: object
    properties:
      type:
        type: string
        description: |-
          type is the type of the data ingestion.
          we currently support rest, artifact and builtin.
      rest:
        $ref: '#/definitions/v1RestType'
        description: |-
          rest is the rest data ingestion.
          this is only used if the type is rest.
      builtin:
        $ref: '#/definitions/v1BuiltinType'
        description: builtin is the builtin data ingestion.
      artifact:
        $ref: '#/definitions/v1ArtifactType'
        description: artifact is the artifact data ingestion.
      git:
        $ref: '#/definitions/v1GitType'
        description: git is the git data ingestion.
      diff:
        $ref: '#/definitions/v1DiffType'
        description: diff is the diff data ingestion.
    description: Ingest defines how the data is ingested.
  DefinitionRemediate:
    type: object
    properties:
      type:
        type: string
      rest:
        $ref: '#/definitions/v1RestType'
      ghBranchProtection:
        $ref: '#/definitions/RemediateGhBranchProtectionType'
      pullRequest:
        $ref: '#/definitions/RemediatePullRequestRemediation'
  DiffTypeEcosystem:
    type: object
    properties:
      name:
        type: string
        description: name is the name of the ecosystem.
      depfile:
        type: string
        title: depfile is the file that contains the dependencies for this ecosystem
  EvalHomoglyphs:
    type: object
    properties:
      type:
        type: string
  EvalJQComparison:
    type: object
    properties:
      ingested:
        $ref: '#/definitions/JQComparisonOperator'
        title: Ingested points to the data retrieved in the `ingest` section
      profile:
        $ref: '#/definitions/JQComparisonOperator'
        description: Profile points to the profile itself.
  EvalRego:
    type: object
    properties:
      type:
        type: string
        description: |-
          type is the type of evaluation engine to use
          for rego. We currently have two modes of operation:
          - deny-by-default: this is the default mode of operation
            where we deny access by default and allow access only
            if the profile explicitly allows it. It expects the
            profile to set an `allow` variable to true or false.
          - constraints: this is the mode of operation where we
            allow access by default and deny access only if a
            violation is found. It expects the profile to set a
            `violations` variable with a "msg" field.
      def:
        type: string
        description: def is the definition of the rego profile.
      violationFormat:
        type: string
        description: |-
          how are violations reported. This is only used if the
          `constraints` type is selected. The default is `text`
          which returns human-readable text. The other option is
          `json` which returns a JSON array containing the violations.
  EvalTrusty:
    type: object
    properties:
      endpoint:
        type: string
        title: |-
          This is no longer used, but is still here for backwards
          compatibility with existing stored rules
  EvalVulncheck:
    type: object
    title: no configuration for now
  JQComparisonOperator:
    type: object
    properties:
      def:
        type: string
  ListEvaluationResultsResponseEntityEvaluationResults:
    type: object
    properties:
      entity:
        $ref: '#/definitions/v1EntityTypedId'
      profiles:
        type: array
        items:
          type: object
          $ref: >-
            #/definitions/ListEvaluationResultsResponseEntityProfileEvaluationResults
  ListEvaluationResultsResponseEntityProfileEvaluationResults:
    type: object
    properties:
      profileStatus:
        $ref: '#/definitions/v1ProfileStatus'
        title: >-
          profile_status is the status of the profile - id, name, status,
          last_updated
      results:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1RuleEvaluationStatus'
        title: >-
          Note that some fields like profile_id and entity might be empty

          Eventually we might replace this type with another one that fits the
          API better
  OAuthServiceStoreProviderTokenBody:
    type: object
    properties:
      accessToken:
        type: string
      owner:
        type: string
      context:
        $ref: '#/definitions/v1Context'
  ProfileRule:
    type: object
    properties:
      type:
        type: string
        description: type is the type of the rule to be instantiated.
      params:
        type: object
        description: |-
          params are the parameters that are passed to the rule.
          This is optional and depends on the rule type.
      def:
        type: object
        description: |-
          def is the definition of the rule.
          This depends on the rule type.
      name:
        type: string
        title: name is the descriptive name of the rule, not to be confused with type
    description: Rule defines the individual call of a certain rule type.
  PullRequestRemediationActionsReplaceTagsWithSha:
    type: object
    properties:
      exclude:
        type: array
        items:
          type: string
        title: List of actions to exclude from the replacement
  PullRequestRemediationContent:
    type: object
    properties:
      path:
        type: string
        title: the file to patch
      action:
        type: string
        title: how to patch the file. For now, only replace is supported
      content:
        type: string
        title: the content of the file
      mode:
        type: string
        title: >-
          the GIT mode of the file. Not UNIX mode! String because the GH API
          also uses strings

          the usual modes are: 100644 for regular files, 100755 for executable
          files and

          040000 for submodules (which we don't use but now you know the meaning
          of the 1 in 100644)

          see e.g.
          https://github.com/go-git/go-git/blob/32e0172851c35ae2fac495069c923330040903d2/plumbing/filemode/filemode.go#L16
  RemediateGhBranchProtectionType:
    type: object
    properties:
      patch:
        type: string
  RemediatePullRequestRemediation:
    type: object
    properties:
      title:
        type: string
        title: the title of the PR
      body:
        type: string
        title: the body of the PR
      contents:
        type: array
        items:
          type: object
          $ref: '#/definitions/PullRequestRemediationContent'
      method:
        type: string
        title: >-
          the method to use to create the PR. For now, these are supported:

          -- minder.content - ensures that the content of the file is exactly as
          specified
                              refer to the Content message for more details
          -- minder.actions.replace_tags_with_sha - finds any github actions
          within a workflow
                                                    file and replaces the tag with the SHA
      actionsReplaceTagsWithSha:
        $ref: '#/definitions/PullRequestRemediationActionsReplaceTagsWithSha'
        title: >-
          If the method is minder.actions.replace_tags_with_sha, this is the
          configuration

          for that method
    title: >-
      the name stutters a bit but we already use a PullRequest message for
      handling PR entities
  RepositoryServiceRegisterRepositoryBody:
    type: object
    properties:
      repository:
        $ref: '#/definitions/v1UpstreamRepositoryRef'
      context:
        $ref: '#/definitions/v1Context'
  RestTypeFallback:
    type: object
    properties:
      httpCode:
        type: integer
        format: int32
      body:
        type: string
  RuleTypeDefinition:
    type: object
    properties:
      inEntity:
        type: string
        description: |-
          in_entity is the entity in which the rule is evaluated.
          This can be repository, build_environment or artifact.
      ruleSchema:
        type: object
        description: >-
          rule_schema is the schema of the rule. This is expressed in JSON
          Schema.
      paramSchema:
        type: object
        description: >-
          param_schema is the schema of the parameters that are passed to the
          rule.

          This is expressed in JSON Schema.
      ingest:
        $ref: '#/definitions/DefinitionIngest'
      eval:
        $ref: '#/definitions/DefinitionEval'
      remediate:
        $ref: '#/definitions/DefinitionRemediate'
      alert:
        $ref: '#/definitions/DefinitionAlert'
    description: >-
      Definition defines the rule type. It encompases the schema and the data
      evaluation.
  protobufNullValue:
    type: string
    enum:
      - NULL_VALUE
    default: NULL_VALUE
    description: |-
      `NullValue` is a singleton enumeration to represent the null value for the
      `Value` type union.

      The JSON representation for `NullValue` is JSON `null`.

       - NULL_VALUE: Null value.
  v1Artifact:
    type: object
    properties:
      artifactPk:
        type: string
      owner:
        type: string
      name:
        type: string
      type:
        type: string
      visibility:
        type: string
      repository:
        type: string
      versions:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1ArtifactVersion'
      createdAt:
        type: string
        format: date-time
      context:
        $ref: '#/definitions/v1Context'
  v1ArtifactType:
    type: object
    description: ArtifactType defines the artifact data evaluation.
  v1ArtifactVersion:
    type: object
    properties:
      versionId:
        type: string
        format: int64
      tags:
        type: array
        items:
          type: string
      sha:
        type: string
      createdAt:
        type: string
        format: date-time
  v1AssignRoleRequest:
    type: object
    properties:
      context:
        $ref: '#/definitions/v1Context'
        description: context is the context in which the role assignment is evaluated.
      roleAssignment:
        $ref: '#/definitions/v1RoleAssignment'
        description: role_assignment is the role assignment to be created.
  v1AssignRoleResponse:
    type: object
    properties:
      roleAssignment:
        $ref: '#/definitions/v1RoleAssignment'
        description: role_assignment is the role assignment that was created.
  v1AuthorizationFlow:
    type: string
    enum:
      - AUTHORIZATION_FLOW_UNSPECIFIED
      - AUTHORIZATION_FLOW_NONE
      - AUTHORIZATION_FLOW_USER_INPUT
      - AUTHORIZATION_FLOW_OAUTH2_AUTHORIZATION_CODE_FLOW
      - AUTHORIZATION_FLOW_GITHUB_APP_FLOW
    default: AUTHORIZATION_FLOW_UNSPECIFIED
  v1AuthorizationParams:
    type: object
    properties:
      authorizationUrl:
        type: string
        description: authorization_url is an external URL to use to authorize the provider.
  v1BuiltinType:
    type: object
    properties:
      method:
        type: string
    description: BuiltinType defines the builtin data evaluation.
  v1CheckHealthResponse:
    type: object
    properties:
      status:
        type: string
  v1Context:
    type: object
    properties:
      provider:
        type: string
        title: name of the provider
      project:
        type: string
        title: ID of the project
      retiredOrganization:
        type: string
    description: >-
      Context defines the context in which a rule is evaluated.

      this normally refers to a combination of the provider, organization and
      project.


      Removing the 'optional' keyword from the following two fields below will
      break
       buf compatibility checks.
  v1CreateEntityReconciliationTaskRequest:
    type: object
    properties:
      entity:
        $ref: '#/definitions/v1EntityTypedId'
        description: entity is the entity to be reconciled.
      context:
        $ref: '#/definitions/v1Context'
        description: >-
          context is the context in which the entity reconciliation task is
          created.
  v1CreateEntityReconciliationTaskResponse:
    type: object
  v1CreateProfileRequest:
    type: object
    properties:
      profile:
        $ref: '#/definitions/v1Profile'
    title: Profile service
  v1CreateProfileResponse:
    type: object
    properties:
      profile:
        $ref: '#/definitions/v1Profile'
  v1CreateProjectRequest:
    type: object
    properties:
      context:
        $ref: '#/definitions/v1Context'
        description: context is the context in which the project is created.
      name:
        type: string
        description: name is the name of the project to create.
  v1CreateProjectResponse:
    type: object
    properties:
      project:
        $ref: '#/definitions/v1Project'
        description: project is the project that was created.
  v1CreateProviderRequest:
    type: object
    properties:
      context:
        $ref: '#/definitions/v1Context'
        description: context is the context in which the provider is created.
      provider:
        $ref: '#/definitions/v1Provider'
        description: provider is the provider to be created.
  v1CreateProviderResponse:
    type: object
    properties:
      provider:
        $ref: '#/definitions/v1Provider'
        description: provider is the provider that was created.
      authorization:
        $ref: '#/definitions/v1AuthorizationParams'
        description: |-
          authorization provides additional authorization information needed
          to complete the initialization of the provider.
  v1CreateRuleTypeRequest:
    type: object
    properties:
      ruleType:
        $ref: '#/definitions/v1RuleType'
        description: rule_type is the rule type to be created.
    description: CreateRuleTypeRequest is the request to create a rule type.
  v1CreateRuleTypeResponse:
    type: object
    properties:
      ruleType:
        $ref: '#/definitions/v1RuleType'
        description: rule_type is the rule type that was created.
    description: CreateRuleTypeResponse is the response to create a rule type.
  v1CreateUserRequest:
    type: object
    title: User service
  v1CreateUserResponse:
    type: object
    properties:
      id:
        type: integer
        format: int32
      organizationId:
        type: string
      organizatioName:
        type: string
      projectId:
        type: string
      projectName:
        type: string
      identitySubject:
        type: string
      createdAt:
        type: string
        format: date-time
      context:
        $ref: '#/definitions/v1Context'
  v1DeleteProfileResponse:
    type: object
  v1DeleteProjectResponse:
    type: object
    properties:
      projectId:
        type: string
        description: project_id is the id of the project that was deleted.
  v1DeleteProviderByIDResponse:
    type: object
    properties:
      id:
        type: string
        title: id is the id of the provider that was deleted
  v1DeleteProviderResponse:
    type: object
    properties:
      name:
        type: string
        title: name is the name of the provider that was deleted
  v1DeleteRepositoryByIdResponse:
    type: object
    properties:
      repositoryId:
        type: string
  v1DeleteRepositoryByNameResponse:
    type: object
    properties:
      name:
        type: string
  v1DeleteRuleTypeResponse:
    type: object
    description: DeleteRuleTypeResponse is the response to delete a rule type.
  v1DeleteUserResponse:
    type: object
  v1DiffType:
    type: object
    properties:
      ecosystems:
        type: array
        items:
          type: object
          $ref: '#/definitions/DiffTypeEcosystem'
        description: |-
          ecosystems is the list of ecosystems to be used
          for the "dep" diff type.
      type:
        type: string
        description: |-
          type is the type of diff ingestor to use.
          The default is "dep" which will leverage
          the ecosystems array.
    description: DiffType defines the diff data ingester.
  v1Entity:
    type: string
    enum:
      - ENTITY_UNSPECIFIED
      - ENTITY_REPOSITORIES
      - ENTITY_BUILD_ENVIRONMENTS
      - ENTITY_ARTIFACTS
      - ENTITY_PULL_REQUESTS
    default: ENTITY_UNSPECIFIED
    description: Entity defines the entity that is supported by the provider.
  v1EntityTypedId:
    type: object
    properties:
      type:
        $ref: '#/definitions/v1Entity'
        title: entity is the entity to get status for. Incompatible with `all`
      id:
        type: string
        title: id is the ID of the entity to get status for. Incompatible with `all`
    description: >-
      EntiryTypeId is a message that carries an ID together with a type to
      uniquely identify an entity

      such as (repo, 1), (artifact, 2), ...
  v1EvalResultAlert:
    type: object
    properties:
      status:
        type: string
        title: status is the status of the alert
      lastUpdated:
        type: string
        format: date-time
        title: last_updated is the last time the alert was performed or attempted
      details:
        type: string
        title: details is the description of the alert attempt if any
      url:
        type: string
        title: url is the URL to the alert
    title: EvalResultAlert holds the alert details for a given rule evaluation
  v1GetArtifactByIdResponse:
    type: object
    properties:
      artifact:
        $ref: '#/definitions/v1Artifact'
      versions:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1ArtifactVersion'
  v1GetArtifactByNameResponse:
    type: object
    properties:
      artifact:
        $ref: '#/definitions/v1Artifact'
      versions:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1ArtifactVersion'
  v1GetAuthorizationURLResponse:
    type: object
    properties:
      url:
        type: string
      state:
        type: string
  v1GetProfileByIdResponse:
    type: object
    properties:
      profile:
        $ref: '#/definitions/v1Profile'
  v1GetProfileStatusByNameResponse:
    type: object
    properties:
      profileStatus:
        $ref: '#/definitions/v1ProfileStatus'
        title: profile_status is the status of the profile
      ruleEvaluationStatus:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1RuleEvaluationStatus'
        title: rule_evaluation_status is the status of the rules
  v1GetProfileStatusByProjectResponse:
    type: object
    properties:
      profileStatus:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1ProfileStatus'
        title: profile_status is the status of the profile
  v1GetProviderResponse:
    type: object
    properties:
      provider:
        $ref: '#/definitions/v1Provider'
        description: provider is the provider that was retrieved.
  v1GetRepositoryByIdResponse:
    type: object
    properties:
      repository:
        $ref: '#/definitions/v1Repository'
  v1GetRepositoryByNameResponse:
    type: object
    properties:
      repository:
        $ref: '#/definitions/v1Repository'
  v1GetRuleTypeByIdResponse:
    type: object
    properties:
      ruleType:
        $ref: '#/definitions/v1RuleType'
        description: rule_type is the rule type.
    description: GetRuleTypeByIdResponse is the response to get a rule type by id.
  v1GetRuleTypeByNameResponse:
    type: object
    properties:
      ruleType:
        $ref: '#/definitions/v1RuleType'
        description: rule_type is the rule type.
    description: GetRuleTypeByNameResponse is the response to get a rule type by name.
  v1GetUnclaimedProvidersResponse:
    type: object
    properties:
      providers:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1ProviderParameter'
        description: >-
          providers is a set of parameters which can be supplied to allow the
          user

          to assign existing unclaimed credentials to a new provider in the
          project

          via CreateProvider().
  v1GetUserResponse:
    type: object
    properties:
      user:
        $ref: '#/definitions/v1UserRecord'
      projects:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1Project'
  v1GitHubAppParams:
    type: object
    properties:
      installationId:
        type: string
        format: int64
        description: |-
          The GitHub installation ID for the app.  On create, this is the only
          parameter used; the organization parameters are ignored.
      organization:
        type: string
        description: >-
          The GitHub organization slug where the app is installed.  This is an

          output-only parameter, and is validated on input if set (i.e. the
          value

          must be either empty or match the org of the installation_id).
      organizationId:
        type: string
        format: int64
        description: >-
          The GitHub organization ID where the app is installed.  This is an

          output-only parameter, and is validated on input if set (i.e. the
          value

          must be either empty or match the org of the installation_id).
    description: GitHubAppParams is the parameters for a GitHub App provider.
  v1GitType:
    type: object
    properties:
      cloneUrl:
        type: string
        description: clone_url is the url of the git repository.
      branch:
        type: string
        description: branch is the branch of the git repository.
    description: GitType defines the git data ingester.
  v1ListArtifactsResponse:
    type: object
    properties:
      results:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1Artifact'
  v1ListEvaluationResultsResponse:
    type: object
    properties:
      entities:
        type: array
        items:
          type: object
          $ref: '#/definitions/ListEvaluationResultsResponseEntityEvaluationResults'
        description: >-
          Each entity selected by the list request will have _single_ entry in
          entities which contains results of all evaluations for each profile.
  v1ListProfilesResponse:
    type: object
    properties:
      profiles:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1Profile'
  v1ListProjectsResponse:
    type: object
    properties:
      projects:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1Project'
  v1ListProviderClassesResponse:
    type: object
    properties:
      providerClasses:
        type: array
        items:
          type: string
        description: provider_classes is the list of provider classes.
  v1ListProvidersResponse:
    type: object
    properties:
      providers:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1Provider'
      cursor:
        type: string
        title: >-
          cursor is the cursor to use for the next page of results, empty if at
          the end
  v1ListRemoteRepositoriesFromProviderResponse:
    type: object
    properties:
      results:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1UpstreamRepositoryRef'
  v1ListRepositoriesResponse:
    type: object
    properties:
      results:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1Repository'
      cursor:
        type: string
        title: >-
          cursor is the cursor to use for the next page of results, empty if at
          the end
  v1ListRoleAssignmentsResponse:
    type: object
    properties:
      roleAssignments:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1RoleAssignment'
  v1ListRolesResponse:
    type: object
    properties:
      roles:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1Role'
  v1ListRuleTypesResponse:
    type: object
    properties:
      ruleTypes:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1RuleType'
        description: rule_types is the list of rule types.
    description: ListRuleTypesResponse is the response to list rule types.
  v1PatchProfileResponse:
    type: object
    properties:
      profile:
        $ref: '#/definitions/v1Profile'
  v1PatchProjectResponse:
    type: object
    properties:
      project:
        $ref: '#/definitions/v1Project'
        description: project is the project that was updated.
  v1Profile:
    type: object
    properties:
      context:
        $ref: '#/definitions/v1Context'
        description: context is the context in which the profile is evaluated.
      id:
        type: string
        description: |-
          id is the id of the profile.
          This is optional and is set by the system.
      name:
        type: string
        description: name is the name of the profile instance.
      labels:
        type: array
        items:
          type: string
        description: >-
          labels are a set of system-provided attributes which can be used to

          filter profiles and status results.  Labels cannot be set by the user,

          but are returned in ListProfiles.


          Labels use DNS label constraints, with a possible namespace prefix

          separated by a colon (:).  They are intended to allow filtering, but

          not to store arbitrary metadata.

          DNS labels are 1-63 character alphanumeric strings with internal
          hyphens.

          An RE2-style validation regex would be:


          DNS_STR = "[a-zA-Z0-9](?[-a-zA-Z0-9]{0,61}[a-zA-Z0-9])?"

          ($DNS_STR:)?$DNS_STR
      repository:
        type: array
        items:
          type: object
          $ref: '#/definitions/ProfileRule'
        description: These are the entities that one could set in the profile.
      buildEnvironment:
        type: array
        items:
          type: object
          $ref: '#/definitions/ProfileRule'
      artifact:
        type: array
        items:
          type: object
          $ref: '#/definitions/ProfileRule'
      pullRequest:
        type: array
        items:
          type: object
          $ref: '#/definitions/ProfileRule'
      remediate:
        type: string
        title: |-
          whether and how to remediate (on,off,dry_run)
          this is optional and defaults to "off"
      alert:
        type: string
        title: |-
          whether and how to alert (on,off,dry_run)
          this is optional and defaults to "on"
      type:
        type: string
        description: >-
          type is a placeholder for the object type. It should always be set to
          "profile".
      version:
        type: string
        title: version is the version of the profile type. In this case, it is "v1"
      displayName:
        type: string
        description: display_name is the display name of the profile.
    description: Profile defines a profile that is user defined.
  v1ProfileStatus:
    type: object
    properties:
      profileId:
        type: string
        title: profile_id is the id of the profile
      profileName:
        type: string
        title: profile_name is the name of the profile
      profileStatus:
        type: string
        title: profile_status is the status of the profile
      lastUpdated:
        type: string
        format: date-time
        title: last_updated is the last time the profile was updated
      profileDisplayName:
        type: string
        title: profile_display_name is the display name of the profile
    title: get the overall profile status
  v1Project:
    type: object
    properties:
      projectId:
        type: string
      name:
        type: string
      description:
        type: string
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
      displayName:
        type: string
        description: |-
          display_name allows for a human-readable name to be used.
          display_names are short *non-unique* strings to provide
          a user-friendly name for presentation in lists, etc.
    title: Project API Objects
  v1ProjectPatch:
    type: object
    properties:
      displayName:
        type: string
        description: display_name is the display name of the project to update.
      description:
        type: string
        description: description is the description of the project to update.
  v1Provider:
    type: object
    properties:
      name:
        type: string
        description: name is the name of the provider.
      class:
        type: string
        description: >-
          class is the name of the provider implementation, eg. 'github' or
          'gh-app'.
      project:
        type: string
        description: >-
          project is the project where the provider is.  This is ignored on
          input

          in favor of the context field in CreateProviderRequest.
      version:
        type: string
        description: version is the version of the provider.
      implements:
        type: array
        items:
          $ref: '#/definitions/v1ProviderType'
        description: implements is the list of interfaces that the provider implements.
      config:
        type: object
        description: config is the configuration of the provider.
      authFlows:
        type: array
        items:
          $ref: '#/definitions/v1AuthorizationFlow'
        description: >-
          auth_flows is the list of authorization flows that the provider
          supports.
      parameters:
        $ref: '#/definitions/v1ProviderParameter'
        description: parameters is the list of parameters that the provider requires.
      credentialsState:
        type: string
        description: >-
          credentials_state is the state of the credentials for the provider.

          This is an output-only field. It may be: "set", "unset",
          "not_applicable".
  v1ProviderParameter:
    type: object
    properties:
      githubApp:
        $ref: '#/definitions/v1GitHubAppParams'
  v1ProviderType:
    type: string
    enum:
      - PROVIDER_TYPE_UNSPECIFIED
      - PROVIDER_TYPE_GITHUB
      - PROVIDER_TYPE_REST
      - PROVIDER_TYPE_GIT
      - PROVIDER_TYPE_OCI
      - PROVIDER_TYPE_REPO_LISTER
    default: PROVIDER_TYPE_UNSPECIFIED
    description: ProviderTrait is the type of the provider.
  v1RegisterRepoResult:
    type: object
    properties:
      repository:
        $ref: '#/definitions/v1Repository'
      status:
        $ref: '#/definitions/v1RegisterRepoResultStatus'
  v1RegisterRepoResultStatus:
    type: object
    properties:
      success:
        type: boolean
      error:
        type: string
  v1RegisterRepositoryRequest:
    type: object
    properties:
      provider:
        type: string
      repository:
        $ref: '#/definitions/v1UpstreamRepositoryRef'
      context:
        $ref: '#/definitions/v1Context'
  v1RegisterRepositoryResponse:
    type: object
    properties:
      result:
        $ref: '#/definitions/v1RegisterRepoResult'
  v1RemoveRoleResponse:
    type: object
    properties:
      roleAssignment:
        $ref: '#/definitions/v1RoleAssignment'
        description: role_assignment is the role assignment that was removed.
  v1Repository:
    type: object
    properties:
      id:
        type: string
        title: This is optional when returning remote repositories
      context:
        $ref: '#/definitions/v1Context'
      owner:
        type: string
      name:
        type: string
      repoId:
        type: string
        format: int64
      hookId:
        type: string
        format: int64
      hookUrl:
        type: string
      deployUrl:
        type: string
      cloneUrl:
        type: string
      hookName:
        type: string
      hookType:
        type: string
      hookUuid:
        type: string
      isPrivate:
        type: boolean
      isFork:
        type: boolean
      registered:
        type: boolean
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
      defaultBranch:
        type: string
      license:
        type: string
  v1RestType:
    type: object
    properties:
      endpoint:
        type: string
        description: |-
          endpoint is the endpoint to fetch data from.
          This can be a URL or the path on the API.bool
          This is a required field and must be set.
          This is also evaluated via a template which allows
          us dynamically fill in the values.
      method:
        type: string
        description: method is the method to use to fetch data.
      headers:
        type: array
        items:
          type: string
        description: headers are the headers to be sent to the endpoint.
      body:
        type: string
        description: body is the body to be sent to the endpoint.
      parse:
        type: string
        description: parse is the parsing mechanism to be used to parse the data.
      fallback:
        type: array
        items:
          type: object
          $ref: '#/definitions/RestTypeFallback'
        description: |-
          fallback provides a body that the ingester would return in case
          the REST call returns a non-200 status code.
    description: |-
      RestType defines the rest data evaluation.
      This is used to fetch data from a REST endpoint.
  v1Role:
    type: object
    properties:
      name:
        type: string
        description: name is the name of the role.
      description:
        type: string
        description: description is the description of the role.
  v1RoleAssignment:
    type: object
    properties:
      role:
        type: string
        description: role is the role that is assigned.
      subject:
        type: string
        description: subject is the subject to which the role is assigned.
      project:
        type: string
        description: projectt is the projectt in which the role is assigned.
  v1RuleEvaluationStatus:
    type: object
    properties:
      profileId:
        type: string
        title: profile_id is the id of the profile
      ruleId:
        type: string
        title: rule_id is the id of the rule
      ruleName:
        type: string
        title: >-
          rule_name is the type of the rule. Deprecated in favor of
          rule_type_name
      entity:
        type: string
        title: entity is the entity that was evaluated
      status:
        type: string
        title: status is the status of the evaluation
      lastUpdated:
        type: string
        format: date-time
        title: last_updated is the last time the profile was updated
      entityInfo:
        type: object
        additionalProperties:
          type: string
        title: entity_info is the information about the entity
      details:
        type: string
        title: details is the description of the evaluation if any
      guidance:
        type: string
        title: guidance is the guidance for the evaluation if any
      remediationStatus:
        type: string
        title: remediation_status is the status of the remediation
      remediationLastUpdated:
        type: string
        format: date-time
        title: >-
          remediation_last_updated is the last time the remediation was
          performed or attempted
      remediationDetails:
        type: string
        title: >-
          remediation_details is the description of the remediation attempt if
          any
      ruleTypeName:
        type: string
        title: rule_type_name is the name of the rule
      ruleDescriptionName:
        type: string
        title: rule_description_name is the name to describe the rule
      alert:
        $ref: '#/definitions/v1EvalResultAlert'
        title: >-
          alert holds the alert details if the rule generated an alert in an
          external system
      severity:
        $ref: '#/definitions/v1Severity'
        title: severity is the severity of the rule
      ruleEvaluationId:
        type: string
        title: rule_evaluation_id is the id of the rule evaluation
      remediationUrl:
        type: string
        title: >-
          remediation_url is a url to get more data about a remediation, for PRs
          is the link to the PR
      ruleDisplayName:
        type: string
        title: rule_display_name captures the display name of the rule
    title: get the status of the rules for a given profile
  v1RuleType:
    type: object
    properties:
      id:
        type: string
        description: |-
          id is the id of the rule type.
          This is mostly optional and is set by the server.
      name:
        type: string
        description: name is the name of the rule type.
      displayName:
        type: string
        description: display_name is the display name of the rule type.
      context:
        $ref: '#/definitions/v1Context'
        description: context is the context in which the rule is evaluated.
      def:
        $ref: '#/definitions/RuleTypeDefinition'
        description: def is the definition of the rule type.
      description:
        type: string
        description: description is the description of the rule type.
      guidance:
        type: string
        description: guidance are instructions we give the user in case a rule fails.
      severity:
        $ref: '#/definitions/v1Severity'
        description: severity is the severity of the rule type.
    description: |-
      RuleType defines rules that may or may not be user defined.
      The version is assumed from the folder's version.
  v1Severity:
    type: object
    properties:
      value:
        $ref: '#/definitions/v1SeverityValue'
        description: value is the severity value.
    description: Severity defines the severity of the rule.
  v1SeverityValue:
    type: string
    enum:
      - VALUE_UNSPECIFIED
      - VALUE_UNKNOWN
      - VALUE_INFO
      - VALUE_LOW
      - VALUE_MEDIUM
      - VALUE_HIGH
      - VALUE_CRITICAL
    default: VALUE_UNSPECIFIED
    description: |-
      Value enumerates the severity values.

       - VALUE_UNKNOWN: unknown severity means that the severity is unknown or hasn't
      been set.
       - VALUE_INFO: info severity means that the severity is informational and
      does not incur risk.
       - VALUE_LOW: low severity means that the severity is low and does not
      incur significant risk.
       - VALUE_MEDIUM: medium severity means that the severity is medium and may
      incur some risk.
       - VALUE_HIGH: high severity means that the severity is high and may incur
      significant risk.
       - VALUE_CRITICAL: critical severity means that the severity is critical and
      requires immediate attention.
  v1StoreProviderTokenRequest:
    type: object
    properties:
      provider:
        type: string
      accessToken:
        type: string
      owner:
        type: string
      context:
        $ref: '#/definitions/v1Context'
  v1StoreProviderTokenResponse:
    type: object
  v1UpdateProfileRequest:
    type: object
    properties:
      profile:
        $ref: '#/definitions/v1Profile'
  v1UpdateProfileResponse:
    type: object
    properties:
      profile:
        $ref: '#/definitions/v1Profile'
  v1UpdateProjectRequest:
    type: object
    properties:
      context:
        $ref: '#/definitions/v1Context'
        description: context is the context in which the project is updated.
      displayName:
        type: string
        description: display_name is the display name of the project to update.
      description:
        type: string
        description: description is the description of the project to update.
  v1UpdateProjectResponse:
    type: object
    properties:
      project:
        $ref: '#/definitions/v1Project'
        description: project is the project that was updated.
  v1UpdateRuleTypeRequest:
    type: object
    properties:
      ruleType:
        $ref: '#/definitions/v1RuleType'
        description: rule_type is the rule type to be updated.
    description: UpdateRuleTypeRequest is the request to update a rule type.
  v1UpdateRuleTypeResponse:
    type: object
    properties:
      ruleType:
        $ref: '#/definitions/v1RuleType'
        description: rule_type is the rule type that was updated.
    description: UpdateRuleTypeResponse is the response to update a rule type.
  v1UpstreamRepositoryRef:
    type: object
    properties:
      owner:
        type: string
      name:
        type: string
      repoId:
        type: string
        format: int64
        description: |-
          The upstream identity of the repository, as an integer.
          This is only set on output, and is ignored on input.
      context:
        $ref: '#/definitions/v1Context'
  v1UserRecord:
    type: object
    properties:
      id:
        type: integer
        format: int32
      identitySubject:
        type: string
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
    title: user record to be returned
  v1VerifyProviderCredentialResponse:
    type: object
    properties:
      created:
        type: boolean
      providerName:
        type: string
    title: >-
      VerifyProviderCredentialRequest responds with a boolean indicating if the
      provider has been created and the provider

      name, if it has been created
  v1VerifyProviderTokenFromResponse:
    type: object
    properties:
      status:
        type: string
