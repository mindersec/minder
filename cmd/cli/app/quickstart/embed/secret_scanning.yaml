---
version: v1
release_phase: beta
type: rule-type
name: secret_scanning
display_name: Enable secret scanning to detect hardcoded secrets
short_failure_message: Secret scanning is not enabled
severity:
  value: high
context:
  provider: github
description: |
  Verifies that secret scanning is enabled for a given repository.
  Note that this will will not work as expected for private repositories
  unless you have GitHub Advanced Security enabled. If you still want to use
  this rule because you have a mixture of private and public repositories,
  enable the `skip_private_repos` flag.
guidance: |
  Ensure that secret scanning is enabled for the repository.

  Secret scanning is a feature that scans repositories for secrets and
  alerts the repository owner when a secret is found. To enable this
  feature in GitHub, you must enable it in the repository settings.

  For more information, see [GitHub's
  documentation](https://docs.github.com/en/github/administering-a-repository/about-secret-scanning).
def:
  # Defines the section of the pipeline the rule will appear in.
  # This will affect the template used to render multiple parts
  # of the rule.
  in_entity: repository
  # Defines the schema for writing a rule with this rule being checked
  rule_schema:
    properties:
      skip_private_repos:
        type: boolean
        default: true
        description: |
          If true, this rule will be marked as skipped for private repositories
  # Defines the configuration for ingesting data relevant for the rule
  ingest:
    type: rest
    rest:
      # This is the path to the data source. Given that this will evaluate
      # for each repository in the organization, we use a template that
      # will be evaluated for each repository. The structure to use is the
      # protobuf structure for the entity that is being evaluated.
      endpoint: "/repos/{{.Entity.Owner}}/{{.Entity.Name}}"
      # This is the method to use to retrieve the data. It should already default to JSON
      parse: json
  # Defines the configuration for evaluating data ingested against the given profile
  eval:
    type: rego
    rego:
      type: deny-by-default
      def: |
        package minder

        import future.keywords.if

        default allow := false
        default skip := false
        default message := "Secret scanning is disabled"

        allow if {
          input.ingested.security_and_analysis.secret_scanning.status == "enabled"
        }

        skip if {
          input.profile.skip_private_repos == true
          input.ingested.private == true
        }
  remediate:
    type: rest
    rest:
      method: PATCH
      endpoint: "/repos/{{.Entity.Owner}}/{{.Entity.Name}}"
      body: |
        { "security_and_analysis": {"secret_scanning": { "status": "enabled" } } }
  # Defines the configuration for alerting on the rule
  alert:
    type: security_advisory
    security_advisory: {}
