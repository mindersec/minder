"use strict";(self.webpackChunkminder_docs=self.webpackChunkminder_docs||[]).push([[4385],{29281:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"understand/key_concepts","title":"Key Concepts","description":"Minder implements a platform for enforcing supply chain security policy in a","source":"@site/docs/understand/key_concepts.md","sourceDirName":"understand","slug":"/understand/key_concepts","permalink":"/understand/key_concepts","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"title":"Key Concepts","sidebar_position":5},"sidebar":"minder","previous":{"title":"Automatic remediations","permalink":"/getting_started/remediations"},"next":{"title":"Profiles and rules","permalink":"/understand/profiles"}}');var s=i(74848),r=i(28453);const a={title:"Key Concepts",sidebar_position:5},o=void 0,l={},c=[{value:"Managing supply chains with Minder",id:"managing-supply-chains-with-minder",level:2},{value:"Projects",id:"projects",level:3},{value:"Entities",id:"entities",level:3},{value:"Providers",id:"providers",level:3},{value:"Origination",id:"origination",level:4},{value:"Profiles",id:"profiles",level:3},{value:"Rule types",id:"rule-types",level:4},{value:"Executing policy with Minder",id:"executing-policy-with-minder",level:2},{value:"Phases of evaluation",id:"phases-of-evaluation",level:3},{value:"Ingesters",id:"ingesters",level:3},{value:"Evaluation engines",id:"evaluation-engines",level:3},{value:"Data sources",id:"data-sources",level:4},{value:"Remediations and alerts",id:"remediations-and-alerts",level:4},{value:"Historical evaluation records",id:"historical-evaluation-records",level:4}];function d(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["Minder implements a platform for enforcing supply chain security policy in a\n",(0,s.jsx)(n.em,{children:"continuous"})," and ",(0,s.jsx)(n.em,{children:"automated"})," manner. In addition to policy checks, Minder also\nsupports defining ",(0,s.jsx)(n.em,{children:"remediation"})," actions that can be automatically executed to\nassist teams in following the defined policies. This section introduces the key\nconcepts in Minder for defining ",(0,s.jsx)(n.em,{children:"what"})," policies should be applied to ",(0,s.jsx)(n.em,{children:"which"}),"\nresources, and how Minder uses these concepts to enforce security policies."]}),"\n",(0,s.jsx)(n.h2,{id:"managing-supply-chains-with-minder",children:"Managing supply chains with Minder"}),"\n",(0,s.jsx)(n.h3,{id:"projects",children:"Projects"}),"\n",(0,s.jsx)(n.p,{children:"Projects are the unit of tenancy (separation and control of resources by\ndifferent users) in Minder. Projects are used to group supply chain components\nwhich are managed by a common team, and to apply policies to those components.\nOne user may be a member of multiple projects, and one project may be managed by\nmultiple users."}),"\n",(0,s.jsxs)(n.p,{children:["Users can be assigned a ",(0,s.jsx)(n.a,{href:"/user_management/user_roles",children:"role"})," in a project,\nwhich determines their permissions to view and manage the project's resources,\nsuch as ",(0,s.jsx)(n.a,{href:"#entities",children:"entities"}),", ",(0,s.jsx)(n.a,{href:"#providers",children:"providers"}),", and\n",(0,s.jsx)(n.a,{href:"#profiles",children:"profiles"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"entities",children:"Entities"}),"\n",(0,s.jsxs)(n.p,{children:["Entities represent components in the supply chain, such as repositories, pull\nrequests, or artifacts. Minder uses entities to track which supply chain\ncomponents are associated with which policies and rules, which guides\n",(0,s.jsx)(n.a,{href:"#phases-of-evaluation",children:"rule evaluation"})," when it occurs. In addition to an\nintrinsic identifier (such as GitHub repo name), entities have a set of\nsystem-provided ",(0,s.jsx)(n.em,{children:"properties"})," which are extracted from the underlying system and\ncan be used when evaluating policies."]}),"\n",(0,s.jsx)(n.p,{children:"Entities are created and managed by providers."}),"\n",(0,s.jsx)(n.h3,{id:"providers",children:"Providers"}),"\n",(0,s.jsxs)(n.p,{children:["Providers are Minder\u2019s integration points with external systems, such as GitHub\nor the Docker registry. Providers track the credentials and permissions needed\nto interact with these services, and enable both manual and automatic creation\nof entities, depending on the entity type and provider configuration. In\ngeneral, references to an entity need to be ",(0,s.jsx)(n.em,{children:"qualified"})," by the context of the\nprovider that created the entity, though the Minder API will attempt to deduce\nthe appropriate provider where possible."]}),"\n",(0,s.jsx)(n.p,{children:"Examples:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"GitHub and GitLab: Track repositories, pull requests, and CI/CD pipelines."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Docker Hub: Monitor container images and their metadata."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Providers communicate with Minder through APIs, webhook events, and scheduled\nupdates. This ensures continuous monitoring and up-to-date information about the\nentities they manage."}),"\n",(0,s.jsx)(n.h4,{id:"origination",children:"Origination"}),"\n",(0,s.jsx)(n.p,{children:"Some entities are automatically created by a provider due to existing\nrelationships in the external system that the provider interacts with.\nOrigination is the term used to describe entities which have been automatically\ncreated due to their relationship with an existing entity. For instance, a pull\nrequest originates from a repository."}),"\n",(0,s.jsx)(n.p,{children:"This concept ensures that Minder maintains lifecycle consistency by:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Automatically creating derived entities (e.g., pull requests) based on\noriginating ones."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Deleting dependent entities when the originating entity is removed."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Example Relationships:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Repository -> Pull Request"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Repository -> Release"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"profiles",children:"Profiles"}),"\n",(0,s.jsxs)(n.p,{children:["Profiles represent a collection of individual controls or policies which\ncollectively enforce a security posture or other requirements on a set of\nentities. Profiles contain a collection of ",(0,s.jsx)(n.a,{href:"#rule-types",children:"rule types"})," with\nparameters (such as permitted CVE severity or allowed license types) to control\nthe execution of the rule. Best practice is to define profiles that apply a set\nof related behaviors, and define your desired security posture via the\napplication of multiple profiles."]}),"\n",(0,s.jsxs)(n.p,{children:["Profiles are specific to each project, but can apply to entities across multiple\nproviders with the project. While profiles apply to all entities in a project by\ndefault, profiles may contain a ",(0,s.jsx)(n.a,{href:"/how-to/profile_selectors",children:"selector"})," which\nlimits to the profile to only entities matched by the selector expression."]}),"\n",(0,s.jsx)(n.h4,{id:"rule-types",children:"Rule types"}),"\n",(0,s.jsx)(n.p,{children:"Rule types define individual checks for specific aspects of an entity, such as\nensuring secret scanning is enabled or that artifacts are signed. While a rule\ntype defines a specific check on an entity, rule types may also contain\nparameters which can be set by the profile which applies the rule type to the\nselected set of entities. In this way, a single rule type (for example,\nrequiring GitHub Actions configuration) can be parameterized for different\nprogramming languages, licenses, or repository visibility."}),"\n",(0,s.jsxs)(n.p,{children:["Like profiles, rule types are specific to a project, but the same definition can\nbe shared and loaded into multiple projects. A collection of useful rule\ndefinitions is available in\n",(0,s.jsx)(n.a,{href:"https://github.com/mindersec/minder-rules-and-profiles",children:"https://github.com/mindersec/minder-rules-and-profiles"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"executing-policy-with-minder",children:"Executing policy with Minder"}),"\n",(0,s.jsx)(n.h3,{id:"phases-of-evaluation",children:"Phases of evaluation"}),"\n",(0,s.jsx)(n.p,{children:"Minder attempts to ensure that entities are continuously against the defined\npolices. It does this by performing rule evaluation at various times, including\nwhen entities are first registered, when notified of a change to an entity, and\n(soon) periodically to catch changes which are not notified. When executing the\nrules from a policy, Minder proceeds to evaluate all the rules in the relevant\npolicies in parallel using the following phases:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Ingestion"}),": Fetch the latest state of the entity from the provider."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Evaluation"}),": Evaluate the rules against the entity."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Remediation"}),": If a rule fails, attempt to remediate the entity."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Alert"}),": If a rule fails and remediation is not possible, create an alert."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The details of rule evaluation are covered\n",(0,s.jsx)(n.a,{href:"/understand/rule_evaluation",children:"in a separate document"}),"; this section provides a high\nlevel overview to complement the policy management constructs described in\n",(0,s.jsx)(n.a,{href:"#managing-supply-chains-with-minder",children:"managing supply chains"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"ingesters",children:"Ingesters"}),"\n",(0,s.jsx)(n.p,{children:"Ingesters fetch data about the entity using provider-specific code. Depending on\nthe type of entity, this data might include results from API calls, file\ncontents, or other data such as attestations. Generally, data from the ingestion\nphase will be made available as either structured data (such as a JSON document)\nor through Rego functions in the Rego evaluation engine."}),"\n",(0,s.jsx)(n.h3,{id:"evaluation-engines",children:"Evaluation engines"}),"\n",(0,s.jsx)(n.p,{children:"The rule evaluation engine is at the heart of defining policies on supply chain\nentities. It allows rule type authors to compare the data fetched during the\ningestion stage with expected values, and determine whether the entity meets the\npolicy requirements."}),"\n",(0,s.jsxs)(n.p,{children:["Minder currently supports two rule evaluation engines: ",(0,s.jsx)(n.code,{children:"rego"})," and ",(0,s.jsx)(n.code,{children:"jq"}),". The ",(0,s.jsx)(n.code,{children:"jq"}),"\nengine is useful for evaluating simple expressions against constant or\nparameterized values, while the ",(0,s.jsx)(n.code,{children:"rego"})," engine is more powerful, and allows\nwriting expressions with conditionals, loops and dynamic data fetching."]}),"\n",(0,s.jsx)(n.p,{children:"At the end of the rule evaluation, each rule type yields a result, which can be\none of four values:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"pass"}),": The entity meets the policy requirements."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"fail"}),": The entity does not meet the policy requirements."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"skip"}),": The rule was skipped because it did not apply to the entity."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"error"}),": An error occurred during the evaluation."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"data-sources",children:"Data sources"}),"\n",(0,s.jsx)(n.p,{children:"Data sources complement providers by fetching additional contextual information\nfrom third-party APIs. Data sources are currently only available in the Rego\nevaluation engine. While providers manage entities and can supply data during\nthe ingestion phase, data sources provide a structured interface to data sources\nwhich can be queried dynamically by the rule engine.."}),"\n",(0,s.jsx)(n.p,{children:"Like rule types and profiles, data sources are defined in the context of a\nproject. Data types generally fetch data from an external network service, and\ncan be used to enrich the data extracted by the rule engine:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"A data source might query the Open Source Vulnerabilities (OSV) database to\ncheck for known vulnerabilities in dependencies listed in a repository\u2019s\nmanifest file."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"A data source might query an external service to check for the correctness and\navailability of release assets."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"A data source might be used to fetch additional information from the same API\nas the provider to compare data from two different sources, such as the list\nof branches and the branch protection rules."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"remediations-and-alerts",children:"Remediations and alerts"}),"\n",(0,s.jsxs)(n.p,{children:["For rule types which produce a ",(0,s.jsx)(n.code,{children:"fail"})," result for an entity, remediations and\nalerts define corrective actions which Minder can take to restore the entity to\na policy-compliant state. Remediations and alerts may each be defined as part of\nthe rule type; some rule may define only a remediation, only an alert, both, or\nneither."]}),"\n",(0,s.jsx)(n.p,{children:"Generally, remediations define actions which Minder can take which will directly\naddress the identified issue -- for example, updating an entity via a REST API\nor proposing a change through a pull request. Alerts provide a mechanism for\nproviding feedback to humans about the non-compliant state of an entity; while\nalerts may provide detailed advice on how to correct a problem, they do not\ncorrect the problem on their own."}),"\n",(0,s.jsx)(n.p,{children:"While rule types define the remediation and alert mechanisms, policies can\nenable or disable the execution of either remediations or alerts. This allows\npolicy authors to begin implementing rules by measuring policy compliance before\nadding remediation or alert actions which may disrupt the workflow of\ndevelopers."}),"\n",(0,s.jsx)(n.h4,{id:"historical-evaluation-records",children:"Historical evaluation records"}),"\n",(0,s.jsx)(n.p,{children:"In addition to remediation and alert actions, Minder also maintains a historical\nevaluation record for each rule. This record includes information about when the\nrule was evaluated, the evaluation result, and any messages and actions taken as\na result of the rule evaluation."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>o});var t=i(96540);const s={},r=t.createContext(s);function a(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);