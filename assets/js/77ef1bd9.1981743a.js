"use strict";(self.webpackChunkstacklok=self.webpackChunkstacklok||[]).push([[7798],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=a.createContext({}),p=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=p(e.components);return a.createElement(o.Provider,{value:n},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(t),m=r,f=d["".concat(o,".").concat(m)]||d[m]||c[m]||i;return t?a.createElement(f,l(l({ref:n},u),{},{components:t})):a.createElement(f,l({ref:n},u))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=m;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s[d]="string"==typeof e?e:r,l[1]=s;for(var p=2;p<i;p++)l[p]=t[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},11330:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=t(87462),r=(t(67294),t(3905));const i={title:"Creating a profile",sidebar_position:10},l=void 0,s={unversionedId:"how-to/create_profile",id:"how-to/create_profile",title:"Creating a profile",description:"Prerequisites",source:"@site/docs/how-to/create_profile.md",sourceDirName:"how-to",slug:"/how-to/create_profile",permalink:"/how-to/create_profile",draft:!1,tags:[],version:"current",sidebarPosition:10,frontMatter:{title:"Creating a profile",sidebar_position:10},sidebar:"minder",previous:{title:"Automatic Remediations",permalink:"/getting_started/remediations"},next:{title:"Manage profiles and violations",permalink:"/how-to/manage_profiles"}},o={},p=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Use a reference rule",id:"use-a-reference-rule",level:2},{value:"Write your own rule",id:"write-your-own-rule",level:2},{value:"Create a profile",id:"create-a-profile",level:2},{value:"Defining Rule Names in Profiles",id:"defining-rule-names-in-profiles",level:2},{value:"Rule Types vs Rule Names",id:"rule-types-vs-rule-names",level:3},{value:"When are Rule Names Mandatory?",id:"when-are-rule-names-mandatory",level:3},{value:"Uniqueness of Rule Names",id:"uniqueness-of-rule-names",level:3},{value:"Example",id:"example",level:3}],u={toc:p},d="wrapper";function c(e){let{components:n,...t}=e;return(0,r.kt)(d,(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"minder")," CLI application"),(0,r.kt)("li",{parentName:"ul"},"A Stacklok account")),(0,r.kt)("h2",{id:"use-a-reference-rule"},"Use a reference rule"),(0,r.kt)("p",null,"The first step to creating a profile is to create the rules that your profile will apply."),(0,r.kt)("p",null,"The Minder team has provided several reference rules for common use cases. To get started quickly, create a rule from\nthe set of references."),(0,r.kt)("p",null,"Fetch all the reference rules by cloning the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/stacklok/minder-rules-and-profiles"},"minder-rules-and-profiles repository"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"git clone https://github.com/stacklok/minder-rules-and-profiles.git\n")),(0,r.kt)("p",null,"In that directory you can find all the reference rules and profiles."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"cd minder-rules-and-profiles\n")),(0,r.kt)("p",null,"Create the ",(0,r.kt)("inlineCode",{parentName:"p"},"secret_scanning")," rule type in Minder:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"minder ruletype create -f rule-types/github/secret_scanning.yaml\n")),(0,r.kt)("h2",{id:"write-your-own-rule"},"Write your own rule"),(0,r.kt)("p",null,"This section describes how to write your own rule, using the existing rule ",(0,r.kt)("inlineCode",{parentName:"p"},"secret_scanning")," as a reference. If you've\nalready created the ",(0,r.kt)("inlineCode",{parentName:"p"},"secret_scanning")," rule, you may choose to skip this section."),(0,r.kt)("p",null,"Start by creating a rule that checks if secret scanning is enabled.  "),(0,r.kt)("p",null,"Create a new file called ",(0,r.kt)("inlineCode",{parentName:"p"},"secret_scanning.yaml"),"."),(0,r.kt)("p",null,"Add some basic information about the rule to the new file, such as the version, type, name, context, description and\nguidance."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"---\nversion: v1\ntype: rule-type\nname: secret_scanning\ncontext:\n  provider: github\ndescription: Verifies that secret scanning is enabled for a given repository.\n# guidance is the instructions the user will see if this rule fails\nguidance: |\n  Secret scanning is a feature that scans repositories for secrets and alerts\n  the repository owner when a secret is found. To enable this feature in GitHub,\n  you must enable it in the repository settings.\n\n  For more information, see\n  https://docs.github.com/en/github/administering-a-repository/about-secret-scanning\n")),(0,r.kt)("p",null,"Next, add the rule definition to the ",(0,r.kt)("inlineCode",{parentName:"p"},"secret_scanning.yaml")," file.\nSet ",(0,r.kt)("inlineCode",{parentName:"p"},"in_entity")," to be ",(0,r.kt)("inlineCode",{parentName:"p"},"repository"),", since secret scanning is enabled on the repository."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"def:\n  in_entity: repository\n")),(0,r.kt)("p",null,"Create a ",(0,r.kt)("inlineCode",{parentName:"p"},"rule_schema")," defining a property describing whether secret scanning is enabled on a repository."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"def:\n  # ...\n  rule_schema:\n      properties:\n        enabled:\n          type: boolean\n          default: true\n")),(0,r.kt)("p",null,"Set ",(0,r.kt)("inlineCode",{parentName:"p"},"ingest")," to make a REST call to fetch information about each registered repository and parse the response as JSON."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'def:\n  # ...\n  ingest:\n    type: rest\n    rest:\n      # This is the path to the data source. Given that this will evaluate\n      # for each repository in the organization, we use a template that\n      # will be evaluated for each repository. The structure to use is the\n      # protobuf structure for the entity that is being evaluated.\n      endpoint: "/repos/{{.Entity.Owner}}/{{.Entity.Name}}"\n      parse: json\n')),(0,r.kt)("p",null,"Configure ",(0,r.kt)("inlineCode",{parentName:"p"},"eval")," to use ",(0,r.kt)("inlineCode",{parentName:"p"},"jq")," to read the response from the REST call and determine if secret scanning is enabled."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'def:\n  # ...\n  eval:\n    type: jq\n    jq:\n      # Ingested points to the data retrieved in the `ingest` section\n      - ingested:\n          def: \'.security_and_analysis.secret_scanning.status == "enabled"\'\n        # profile points to the profile itself.\n        profile:\n          def: ".enabled"\n')),(0,r.kt)("p",null,"Set up the remediation action that will be taken if this rule is not satisfied\n(and the profile has turned on remediation). The remediation action in this case is to make a PATCH request to the\nrepository and enable secret scanning."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'def:\n  # ...\n  remediate:\n    type: rest\n    rest:\n      method: PATCH\n      endpoint: "/repos/{{.Entity.Owner}}/{{.Entity.Name}}"\n      body: |\n        { "security_and_analysis": {"secret_scanning": { "status": "enabled" } } }\n')),(0,r.kt)("p",null,"Define how users will be alerted if this rule is not satisfied. In this case a security advisory will be created in\nany repository that does not satisfy this rule."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'def:\n  # ...\n  alert:\n      type: security_advisory\n      security_advisory:\n        severity: "medium"\n')),(0,r.kt)("p",null,"Putting it all together, you get the following content in ",(0,r.kt)("inlineCode",{parentName:"p"},"secret_scanning.yaml"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'---\nversion: v1\ntype: rule-type\nname: secret_scanning\ncontext:\n  provider: github\ndescription: Verifies that secret scanning is enabled for a given repository.\nguidance: |\n  Secret scanning is a feature that scans repositories for secrets and alerts\n  the repository owner when a secret is found. To enable this feature in GitHub,\n  you must enable it in the repository settings.\n\n  For more information, see\n  https://docs.github.com/en/github/administering-a-repository/about-secret-scanning\ndef:\n  in_entity: repository\n  rule_schema:\n    properties:\n      enabled:\n        type: boolean\n        default: true\n  ingest:\n    type: rest\n    rest:\n      endpoint: "/repos/{{.Entity.Owner}}/{{.Entity.Name}}"\n      parse: json\n  eval:\n    type: jq\n    jq:\n      - ingested:\n          def: \'.security_and_analysis.secret_scanning.status == "enabled"\'\n        profile:\n          def: ".enabled"\n  remediate:\n    type: rest\n    rest:\n      method: PATCH\n      endpoint: "/repos/{{.Entity.Owner}}/{{.Entity.Name}}"\n      body: |\n        { "security_and_analysis": {"secret_scanning": { "status": "enabled" } } }\n  alert:\n    type: security_advisory\n    security_advisory:\n      severity: "medium"\n')),(0,r.kt)("p",null,"Finally, create the ",(0,r.kt)("inlineCode",{parentName:"p"},"secret_scanning")," rule in Minder:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"minder ruletype create -f secret_scanning.yaml\n")),(0,r.kt)("h2",{id:"create-a-profile"},"Create a profile"),(0,r.kt)("p",null,"Now that you've created a secret scanning rule, you can set up a profile that checks if secret scanning is enabled\nin all your registered repositories."),(0,r.kt)("p",null,"Start by creating a file named ",(0,r.kt)("inlineCode",{parentName:"p"},"profile.yaml"),"."),(0,r.kt)("p",null,"Add some basic information about the profile to the new file, such as the version, type, name and context."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"version: v1\ntype: profile\nname: my-first-profile\ncontext:\n  provider: github\n")),(0,r.kt)("p",null,"Turn on alerting, so that a security advisory will be created for any registered repository that has not enabled\nsecret scanning."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'alert: "on"\n')),(0,r.kt)("p",null,"Turn on remediation, so that secret scanning will automatically be enabled for any registered repositories."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'remediate: "on"\n')),(0,r.kt)("p",null,"Register the secret scanning rule that you created in the previous step."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"repository:\n  - type: secret_scanning\n    def:\n      enabled: true\n")),(0,r.kt)("p",null,"Putting it all together, you get the following content if ",(0,r.kt)("inlineCode",{parentName:"p"},"profile.yaml"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'version: v1\ntype: profile\nname: my-first-profile\ncontext:\n  provider: github\nalert: "on"\nremediate: "on"\nrepository:\n  - type: secret_scanning\n    name: "secret_scanning_github" # Optional, as there aren\'t multiple rules\n                                   # of the same type under the entity - repository\n    def:\n      enabled: true\n')),(0,r.kt)("p",null,"Finally, create your profile in Minder:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"minder profile create -f profile.yaml\n")),(0,r.kt)("p",null,"Check the status of your profile and see which repositories satisfy the rules by running:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"minder profile status list --name my-first-profile --detailed\n")),(0,r.kt)("p",null,"At the moment, the ",(0,r.kt)("inlineCode",{parentName:"p"},"profile status list")," with the ",(0,r.kt)("inlineCode",{parentName:"p"},"--detailed")," flag lists all the repositories that match the rules.\nTo get a more detailed view of the profile status, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"-o json")," flag to get the output in JSON format and then\nfilter the output using ",(0,r.kt)("inlineCode",{parentName:"p"},"jq"),". For example, to get all rules that pertain to the repository ",(0,r.kt)("inlineCode",{parentName:"p"},"minder")," and have failed,\nrun the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'minder profile status list --name stacklok-remediate-profile -d -ojson 2>/dev/null | jq  -C \'.ruleEvaluationStatus | map(select(.entityInfo.repo_name == "minder" and .status == "failure"))\'\n')),(0,r.kt)("h2",{id:"defining-rule-names-in-profiles"},"Defining Rule Names in Profiles"),(0,r.kt)("p",null,"In Minder profiles, rules are identified by their type and, optionally, a unique name."),(0,r.kt)("h3",{id:"rule-types-vs-rule-names"},"Rule Types vs Rule Names"),(0,r.kt)("p",null,"Rule types are mandatory and refer to the kind of rule being applied. Rule names, on the other hand, are optional\nidentifiers that become crucial when multiple rules of the same type exist under an entity."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'repository:\n  - type: secret_scanning\n    name: "secret_scanning_github"\n    def:\n      enabled: true\n')),(0,r.kt)("p",null,"In this example, ",(0,r.kt)("inlineCode",{parentName:"p"},"secret_scanning")," is the rule type and ",(0,r.kt)("inlineCode",{parentName:"p"},"secret_scanning_github")," is the rule name."),(0,r.kt)("h3",{id:"when-are-rule-names-mandatory"},"When are Rule Names Mandatory?"),(0,r.kt)("p",null,"If you're using multiple rules of the same type under an entity, each rule must have a unique name. This helps\ndistinguish between rules and understand their specific purpose."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'repository:\n  - type: secret_scanning\n    name: "secret_scanning_github"\n    def:\n      enabled: true\n  - type: secret_scanning\n    name: "secret_scanning_github_2"\n    def:\n      enabled: false\n')),(0,r.kt)("p",null,"Here, we have two rules of the same type ",(0,r.kt)("inlineCode",{parentName:"p"},"secret_scanning")," under the ",(0,r.kt)("inlineCode",{parentName:"p"},"repository")," entity. Each rule has a unique name."),(0,r.kt)("h3",{id:"uniqueness-of-rule-names"},"Uniqueness of Rule Names"),(0,r.kt)("p",null,"No two rules, whether of the same type or different types, can have the same name under an entity. This avoids\nconfusion and ensures each rule can be individually managed."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'repository: # Would return an error while creating\n  - type: secret_scanning\n    name: "protect_github"\n    def:\n      enabled: true\n  - type: secret_push_protection\n    name: "protect_github"\n    def:\n      enabled: false\n')),(0,r.kt)("p",null,"In the above used example, even though the rules are of different types (",(0,r.kt)("inlineCode",{parentName:"p"},"secret_scanning")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"secret_push_protection"),"),\nMinder will return an error while creating this profile as rule names are same under the same entity.\nYou may use same rule names under different entities (repository, artifacts, etc.)"),(0,r.kt)("p",null,"Rule name should not match any rule type, except its own rule type. If a rule name matches its own rule type, it should\nnot conflict with any other rule name under the same entity, including default rule names. Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"repository: # Would return an error while creating\n  - type: dependabot_configured\n    name: \"dependabot_configured\"\n    def:\n      package_ecosystem: gomod\n      schedule_interval: daily\n      apply_if_file: go.mod\n  - type: dependabot_configured # default 'name' would be 'dependabot_configured'\n    def:\n      package_ecosystem: npm\n      schedule_interval: daily\n      apply_if_file: docs/package.json\n")),(0,r.kt)("p",null,"In the above used example, even though the rules names appear different visually, Minder will return an error while\ncreating this profile as the rule name for ",(0,r.kt)("inlineCode",{parentName:"p"},"npm")," rule would be ",(0,r.kt)("inlineCode",{parentName:"p"},"dependabot_configured")," internally, which is same as\nthe explicit name of the ",(0,r.kt)("inlineCode",{parentName:"p"},"gomod")," rule."),(0,r.kt)("h3",{id:"example"},"Example"),(0,r.kt)("p",null,"Consider a profile with two ",(0,r.kt)("inlineCode",{parentName:"p"},"dependabot_configured")," rules under the ",(0,r.kt)("inlineCode",{parentName:"p"},"repository"),' entity. The first rule has a unique\nname, "Dependabot Configured for GoLang". The second rule doesn\'t have a name, which is acceptable as Minder would\nadd rule type as the default name for the rule.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"repository:\n  - type: dependabot_configured\n    name: \"Dependabot Configured for GoLang\"\n    def:\n      package_ecosystem: gomod\n      schedule_interval: daily\n      apply_if_file: go.mod\n  - type: dependabot_configured # default 'name' would be 'dependabot_configured'\n    def:\n      package_ecosystem: npm\n      schedule_interval: daily\n      apply_if_file: docs/package.json\n")),(0,r.kt)("p",null,"You can find the rule definitions used above and many profile examples at\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/stacklok/minder-rules-and-profiles"},"minder-rules-and-profiles")," repository."))}c.isMDXComponent=!0}}]);