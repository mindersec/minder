"use strict";(self.webpackChunkminder_docs=self.webpackChunkminder_docs||[]).push([[8127],{2865:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"user_management/user_roles","title":"User roles","description":"When incorporating a user into your project, it\'s crucial to assign them the","source":"@site/docs/user_management/user_roles.md","sourceDirName":"user_management","slug":"/user_management/user_roles","permalink":"/user_management/user_roles","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":110,"frontMatter":{"title":"User roles","sidebar_position":110},"sidebar":"minder","previous":{"title":"Managing Minder With GitHub Actions","permalink":"/user_management/github_actions"},"next":{"title":"Overview","permalink":"/integrations/overview"}}');var t=s(74848),o=s(28453);const i={title:"User roles",sidebar_position:110},a=void 0,l={},c=[];function d(e){const r={code:"code",li:"li",p:"p",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.p,{children:"When incorporating a user into your project, it's crucial to assign them the\nappropriate role based on their responsibilities and required access levels.\nMinder currently offers the following roles:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"admin"}),": Admins have full permissions on the project. In addition to the\neditor permissions, users with this role can modify the project, enroll\nadditional providers, and manage roles for other users within the project."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"editor"}),": In addition to the viewer permissions, editors can author profiles\nand rule types, as well as add resources to manage. Editors cannot enroll\nadditional providers or change or delete projects."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"viewer"}),": Provides read-only access to the project. Users with this role can\nview associated resources such as enrolled repositories, rule types, profiles\nand the status of rule evaluations."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"policy_writer"}),": Allows users to create rule types and profiles. Unlike\neditors, policy writers cannot add or remove resources from the project."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"permissions_manager"}),": Allows users to manage roles for other users within the\nproject."]}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:"Each user in a project may only be assigned one role at a time."})]})}function u(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,r,s)=>{s.d(r,{R:()=>i,x:()=>a});var n=s(96540);const t={},o=n.createContext(t);function i(e){const r=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),n.createElement(o.Provider,{value:r},e.children)}}}]);