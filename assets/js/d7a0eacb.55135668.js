"use strict";(self.webpackChunkminder_docs=self.webpackChunkminder_docs||[]).push([[9090],{94150:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"how-to/writing-rules-in-jq","title":"Writing rules using JQ","description":"Minder\'s policy engine is able to use pluggable drivers for evaluating rules.","source":"@site/docs/how-to/writing-rules-in-jq.md","sourceDirName":"how-to","slug":"/how-to/writing-rules-in-jq","permalink":"/how-to/writing-rules-in-jq","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":115,"frontMatter":{"title":"Writing rules using JQ","sidebar_position":115},"sidebar":"minder","previous":{"title":"Writing rules using Rego","permalink":"/how-to/writing-rules-in-rego"},"next":{"title":"Develop and debug rule types","permalink":"/how-to/mindev"}}');var o=t(74848),r=t(28453);const s={title:"Writing rules using JQ",sidebar_position:115},a=void 0,l={},d=[{value:"Writing rule types in Minder",id:"writing-rule-types-in-minder",level:2},{value:"JQ Evaluation",id:"jq-evaluation",level:2},{value:"Example: Managing Permitted GitHub Actions",id:"example-managing-permitted-github-actions",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"Minder's policy engine is able to use pluggable drivers for evaluating rules.\nThe JQ evaluator makes it easy to extract values from JSON-structured data, such\nas the result of an API call."}),"\n",(0,o.jsx)(n.h2,{id:"writing-rule-types-in-minder",children:"Writing rule types in Minder"}),"\n","\n",(0,o.jsxs)(n.p,{children:["Minder\n",(0,o.jsx)(n.a,{href:"/understand/key_concepts#rule-types",children:"organizes policies into rule types"}),",\neach with specific sections defining how policies are ingested, evaluated, and\nacted upon. Rule types are then called within profiles to express the security\nposture of your organization. Let's delve into the essential components of a\nMinder rule type:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Ingesting data: Fetching relevant data, often from external sources like\nGitHub API."}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Evaluation: Applying policy logic to the ingested data. Minder offers a set of\nengines to evaluate data: ",(0,o.jsx)(n.code,{children:"jq"})," and ",(0,o.jsx)(n.code,{children:"rego"})," being general-purpose engines, while\n",(0,o.jsx)(n.code,{children:"vulncheck"})," and ",(0,o.jsx)(n.code,{children:"homoglyphs"})," are more use case-specific ones."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Remediation and alerting: Taking actions or providing notifications based on\nevaluation results. E.g. creating a pull request or generating a GitHub\nsecurity advisory."}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"jq-evaluation",children:"JQ Evaluation"}),"\n",(0,o.jsxs)(n.p,{children:["The JQ evaluator performs a series of JSON equality comparisons between ingested\nJSON data and desired values provided either as a ",(0,o.jsx)(n.code,{children:"constant"})," or data selected\nfrom the ",(0,o.jsx)(n.code,{children:"def"})," (",(0,o.jsx)(n.code,{children:"rule_schema"}),") of the profile. Each comparison\n",(0,o.jsxs)(n.a,{href:"https://mindersec.github.io/ref/proto#minder-v1-RuleType-Definition-Eval-JQComparison",children:["must include the ",(0,o.jsx)(n.code,{children:"ingested"})," value and one of the ",(0,o.jsx)(n.code,{children:"profile"})," or ",(0,o.jsx)(n.code,{children:"constant"})," fields"]}),"\nfor the comparison."]}),"\n",(0,o.jsxs)(n.p,{children:["If a field is not present or is ",(0,o.jsx)(n.code,{children:"null"})," for either the ingested data or the\ndesired value, it will be treated as ",(0,o.jsx)(n.code,{children:"null"})," for the purposes of comparison (and\nwill compare equal with a ",(0,o.jsx)(n.code,{children:"null"})," value)."]}),"\n",(0,o.jsx)(n.h2,{id:"example-managing-permitted-github-actions",children:"Example: Managing Permitted GitHub Actions"}),"\n",(0,o.jsx)(n.p,{children:"GitHub provides security controls to limit which actions can execute within a\nrepository. If you want to enforce a consistent set of security controls across\nmany repositories without paying for GitHub Enterprise, you can use Minder to\ncheck and remediate these settings."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'---\nversion: v1\ntype: rule-type\nname: allowed_selected_actions\ncontext:\n  provider: github\ndescription: |\n  Verifies the settings for selected actions and reusable workflows that are allowed\n  in a repository. To use this rule, the repository profile for allowed_actions must\n  be configured to selected.\nguidance: |\n  Ensure that only the actions and reusable workflows that are allowed\n  in the repository are set.\n\n  Having an overview over which actions and reusable workflows are\n  allowed in a repository is important and allows for a better overall\n  security posture.\n\n  For more information, see [GitHub\'s\n  documentation](https://docs.github.com/en/rest/actions/permissions#set-allowed-actions-and-reusable-workflows-for-a-repository).\ndef:\n  # Defines the section of the pipeline the rule will appear in.\n  # This will affect the template used to render multiple parts\n  # of the rule.\n  in_entity: repository\n  # Defines the schema for writing a rule with this rule being checked\n  rule_schema:\n    type: object\n    properties:\n    properties:\n      github_owned_allowed:\n        type: boolean\n        "description": "Whether GitHub-owned actions are allowed. For example, this includes the actions in the `actions` organization."\n      verified_allowed:\n        type: boolean\n        "description": "Whether actions from GitHub Marketplace verified creators are allowed. Set to `true` to allow all actions by GitHub Marketplace verified creators."\n      patterns_allowed:\n        type: array\n        description: "Specifies a list of string-matching patterns to allow specific action(s) and reusable workflow(s). Wildcards, tags, and SHAs are allowed. For example, `monalisa/octocat@*`, `monalisa/octocat@v2`, `monalisa/*`.\\n\\n**Note**: The `patterns_allowed` setting only applies to public repositories."\n        items:\n          type: string\n  # Defines the configuration for ingesting data relevant for the rule\n  ingest:\n    type: rest\n    rest:\n      # This is the URL to read the actions permissions settings\n      endpoint: "/repos/{{.Entity.Owner}}/{{.Entity.Name}}/actions/permissions/selected-actions"\n      parse: json\n      fallback:\n        # If the "github_actions_allowed" rule_type is not set to "selected", this endpoint doesn\'t exist and gh\n        # returns a 409. Let\'s emit a fallback here so the evaluator fails as expected\n        - http_code: 409\n          body: |\n            {"http_status": 404, "message": "Not Protected"}\n  # Defines the configuration for evaluating data ingested against the given profile\n  # Defines the configuration for evaluating data ingested against the given profile\n  eval:\n    type: jq\n    jq:\n      # Ingested points to the data retrieved in the `ingest` section\n      - ingested:\n          def: ".github_owned_allowed"\n        # profile points to profile\'s rule data from .def (matching rule_schema).\n        profile:\n          def: \'.github_owned_allowed\'\n      - ingested:\n          def: ".verified_allowed"\n        profile:\n          def: \'.verified_allowed\'\n      - ingested:\n          def: ".patterns_allowed"\n        profile:\n          def: ".patterns_allowed"\n  # Defines the configuration for remediating on the rule\n  remediate:\n    type: rest\n    rest:\n      method: PUT\n      endpoint: "/repos/{{.Entity.Owner}}/{{.Entity.Name}}/actions/permissions/selected-actions"\n      # Body uses template data from the profile\'s rule def(initions)\n      body: |\n        {"github_owned_allowed":{{ .Profile.github_owned_allowed }},"verified_allowed":{{ .Profile.verified_allowed }},"patterns_allowed":[{{range $index, $pattern := .Profile.patterns_allowed}}{{if $index}},{{end}}"{{ $pattern }}"{{end}}]}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["The\n",(0,o.jsx)(n.a,{href:"/ref/rule_evaluation_details#remediation-types",children:"rule evaluation details"}),"\nincludes more information about defining remediations for Minder rules."]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var i=t(96540);const o={},r=i.createContext(o);function s(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);