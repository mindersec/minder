"use strict";(self.webpackChunkstacklok=self.webpackChunkstacklok||[]).push([[794],{46555:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>o,contentTitle:()=>t,default:()=>f,frontMatter:()=>r,metadata:()=>c,toc:()=>d});var s=n(74848),l=n(28453);const r={title:"Presence of a License File",sidebar_position:80},t="Presence of a License File Rule",c={id:"ref/rules/license",title:"Presence of a License File",description:"The following rule type is available for verifying if a license file is present and it is of a certain type.",source:"@site/docs/ref/rules/license.md",sourceDirName:"ref/rules",slug:"/ref/rules/license",permalink:"/ref/rules/license",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:80,frontMatter:{title:"Presence of a License File",sidebar_position:80},sidebar:"minder",previous:{title:"GitHub Actions",permalink:"/ref/rules/github_actions"},next:{title:"Artifact Signature",permalink:"/ref/rules/artifact_signature"}},o={},d=[{value:"<code>license</code> - Verifies if there is a license file of a given type present in the repository",id:"license---verifies-if-there-is-a-license-file-of-a-given-type-present-in-the-repository",level:2},{value:"Entity",id:"entity",level:3},{value:"Type",id:"type",level:3},{value:"Rule parameters",id:"rule-parameters",level:3},{value:"Rule definition options",id:"rule-definition-options",level:3}];function a(e){const i={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.h1,{id:"presence-of-a-license-file-rule",children:"Presence of a License File Rule"}),"\n",(0,s.jsx)(i.p,{children:"The following rule type is available for verifying if a license file is present and it is of a certain type."}),"\n",(0,s.jsxs)(i.h2,{id:"license---verifies-if-there-is-a-license-file-of-a-given-type-present-in-the-repository",children:[(0,s.jsx)(i.code,{children:"license"})," - Verifies if there is a license file of a given type present in the repository"]}),"\n",(0,s.jsx)(i.p,{children:"This rule allows you to monitor if a license file is present in the repository and if its license type complies with\nthe configured license type in your profile."}),"\n",(0,s.jsx)(i.h3,{id:"entity",children:"Entity"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"repository"})}),"\n"]}),"\n",(0,s.jsx)(i.h3,{id:"type",children:"Type"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"license"})}),"\n"]}),"\n",(0,s.jsx)(i.h3,{id:"rule-parameters",children:"Rule parameters"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"None"}),"\n"]}),"\n",(0,s.jsx)(i.h3,{id:"rule-definition-options",children:"Rule definition options"}),"\n",(0,s.jsxs)(i.p,{children:["The ",(0,s.jsx)(i.code,{children:"license"})," rule supports the following options:"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"license_filename (string)"})," - The license filename to look for.","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["Example: ",(0,s.jsx)(i.code,{children:"LICENSE"}),", ",(0,s.jsx)(i.code,{children:"LICENSE.txt"}),", ",(0,s.jsx)(i.code,{children:"LICENSE.md"}),", etc."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"license_type (string)"})," - The license type to look for in ",(0,s.jsx)(i.code,{children:"license_filename"}),".","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["Example: ",(0,s.jsx)(i.code,{children:"MIT"}),", ",(0,s.jsx)(i.code,{children:"Apache"}),", etc. See ",(0,s.jsx)(i.a,{href:"https://spdx.org/licenses/",children:"SPDX License List"})," for a list of license types. Leave ",(0,s.jsx)(i.code,{children:'""'})," to only check for the presence of the file."]}),"\n"]}),"\n"]}),"\n"]})]})}function f(e={}){const{wrapper:i}={...(0,l.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},28453:(e,i,n)=>{n.d(i,{R:()=>t,x:()=>c});var s=n(96540);const l={},r=s.createContext(l);function t(e){const i=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function c(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:t(e.components),s.createElement(r.Provider,{value:i},e.children)}}}]);