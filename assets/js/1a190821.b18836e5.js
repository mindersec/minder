"use strict";(self.webpackChunkminder_docs=self.webpackChunkminder_docs||[]).push([[6200],{97515:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>d,contentTitle:()=>c,default:()=>a,frontMatter:()=>s,metadata:()=>r,toc:()=>h});const r=JSON.parse('{"id":"run_minder_server/config_webhook","title":"Configuring a webhook","description":"Minder allows a webhook to be configured on the repository provider to respond","source":"@site/docs/run_minder_server/config_webhook.md","sourceDirName":"run_minder_server","slug":"/run_minder_server/config_webhook","permalink":"/run_minder_server/config_webhook","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":60,"frontMatter":{"title":"Configuring a webhook","sidebar_position":60},"sidebar":"minder","previous":{"title":"Configure a provider","permalink":"/run_minder_server/config_provider"},"next":{"title":"Create a GitHub OAuth application","permalink":"/run_minder_server/config_oauth"}}');var t=n(74848),i=n(28453);const s={title:"Configuring a webhook",sidebar_position:60},c=void 0,d={},h=[];function l(e){const o={a:"a",code:"code",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(o.p,{children:["Minder allows a webhook to be configured on the repository provider to respond\nto provider events. Currently, Minder only supports GitHub. The webhook allows\nGitHub to notify Minder when certain events occur in your repositories. To\nconfigure the webhook, Minder needs to be accessible from the internet. If you\nare running the server locally, you can use a service like\n",(0,t.jsx)(o.a,{href:"https://ngrok.com/",children:"ngrok"})," to expose your local server to the internet."]}),"\n",(0,t.jsx)(o.p,{children:"Here are the steps to configure the webhook:"}),"\n",(0,t.jsxs)(o.ol,{children:["\n",(0,t.jsxs)(o.li,{children:["\n",(0,t.jsxs)(o.p,{children:[(0,t.jsx)(o.strong,{children:"Expose your local server:"})," If you are running the server locally, start\nngrok or a similar service to expose your local server to the internet. Note\ndown the URL provided by ngrok (it will look something like\n",(0,t.jsx)(o.code,{children:"https://<random-hash>.ngrok.io"}),"). Make sure to expose the port that Minder\nis running on (by default, this is port ",(0,t.jsx)(o.code,{children:"8080"}),")."]}),"\n"]}),"\n",(0,t.jsxs)(o.li,{children:["\n",(0,t.jsxs)(o.p,{children:[(0,t.jsx)(o.strong,{children:"Update the Minder configuration:"})," Open your ",(0,t.jsx)(o.code,{children:"server-config.yaml"})," file and\nupdate the ",(0,t.jsx)(o.code,{children:"webhook-config"})," section with the ngrok URL Minder is running on.\nThe ",(0,t.jsx)(o.code,{children:"external_webhook_url"})," should point to the ",(0,t.jsx)(o.code,{children:"/api/v1/webhook/github"}),"\nendpoint on your Minder server, and the ",(0,t.jsx)(o.code,{children:"external_ping_url"})," should point to\nthe ",(0,t.jsx)(o.code,{children:"/api/v1/health"})," endpoint. The ",(0,t.jsx)(o.code,{children:"webhook_secret"})," should match the secret\nconfigured in the GitHub webhook (under ",(0,t.jsx)(o.code,{children:"github.payload_secret"}),")."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-yaml",children:"webhook-config:\n  external_webhook_url: 'https://<ngrok-url>/api/v1/webhook/github'\n  external_ping_url: 'https://<ngrok-url>/api/v1/health'\n  webhook_secret: 'your-password' # Should match the secret configured in the GitHub webhook (github.payload_secret)\n"})}),"\n",(0,t.jsx)(o.p,{children:"After these steps, your Minder server should be ready to receive webhook events\nfrom GitHub, and add webhooks to repositories."}),"\n",(0,t.jsxs)(o.p,{children:["In case you need to update the webhook secret, you can do so by putting the new\nsecret in ",(0,t.jsx)(o.code,{children:"webhook-config.webhook_secret"})," and for the duration of the migration,\nthe old secret(s) in a file referenced by\n",(0,t.jsx)(o.code,{children:"webhook-config.previous_webhook_secret_file"}),". The old webhook secrets will then\nonly be used to verify incoming webhooks messages, not for creating or updating\nwebhooks and can be removed after the migration is complete."]}),"\n",(0,t.jsxs)(o.p,{children:["In order to rotate webhook secrets, you can use the ",(0,t.jsx)(o.code,{children:"minder-server"})," CLI tool to\nupdate the webhook secret."]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-bash",children:"minder-server webhook update -p github\n"})}),"\n",(0,t.jsx)(o.p,{children:"Note that the command simply replaces the webhook secret on the provider side.\nYou will still need to update the webhook secret in the server configuration to\nmatch the provider's secret."})]})}function a(e={}){const{wrapper:o}={...(0,i.R)(),...e.components};return o?(0,t.jsx)(o,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},28453:(e,o,n)=>{n.d(o,{R:()=>s,x:()=>c});var r=n(96540);const t={},i=r.createContext(t);function s(e){const o=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function c(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),r.createElement(i.Provider,{value:o},e.children)}}}]);