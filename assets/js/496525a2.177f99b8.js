"use strict";(self.webpackChunkminder_docs=self.webpackChunkminder_docs||[]).push([[8807],{45559:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"ref/rule_evaluation_details","title":"Rule Evaluation in Depth","description":"When evaluating a rule,","source":"@site/docs/ref/rule_evaluation_details.md","sourceDirName":"ref","slug":"/ref/rule_evaluation_details","permalink":"/ref/rule_evaluation_details","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"minder","previous":{"title":"Minder database schema","permalink":"/ref/schema"},"next":{"title":"Changelog","permalink":"/about/changelog"}}');var s=i(74848),r=i(28453);const l={},a="Rule Evaluation in Depth",o={},d=[{value:"Ingest",id:"ingest",level:2},{value:"Input Sources:",id:"input-sources",level:3},{value:"Ingest Types and Their Outputs",id:"ingest-types-and-their-outputs",level:3},{value:"Evaluate",id:"evaluate",level:2},{value:"Evaluation Process",id:"evaluation-process",level:3},{value:"Remediate",id:"remediate",level:2},{value:"Remediation Inputs",id:"remediation-inputs",level:3},{value:"Remediation Types",id:"remediation-types",level:3},{value:"Alert Types",id:"alert-types",level:2},{value:"Alert Inputs",id:"alert-inputs",level:3},{value:"Alert Types",id:"alert-types-1",level:3}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"rule-evaluation-in-depth",children:"Rule Evaluation in Depth"})}),"\n",(0,s.jsxs)(n.p,{children:["When evaluating a rule,\n",(0,s.jsx)(n.a,{href:"https://mindersec.github.io/understand/key_concepts#phases-of-evaluation",children:"Minder executes the rule in multiple phases"}),".\nThis page contains detailed documentation about the execution of each phase.\nMinder performs rule evaluation across all relevant policies when it detects\nthat an entity has changed."]}),"\n",(0,s.jsx)(n.h2,{id:"ingest",children:"Ingest"}),"\n",(0,s.jsx)(n.p,{children:"The ingest phase in Minder is where the system gathers and processes information\nabout entities before policy evaluation. Here's a breakdown:"}),"\n",(0,s.jsx)(n.h3,{id:"input-sources",children:"Input Sources:"}),"\n",(0,s.jsxs)(n.p,{children:["The primary input is the ",(0,s.jsx)(n.code,{children:"Entity"})," object representing the entity that the policy\nrules apply to. The ",(0,s.jsx)(n.code,{children:"Entity"})," objects have specific properties based on the type\nof entity:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/ref/proto#minder-v1-Repository",children:"Repository"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/mindersec/minder/tree/main/internal/providers/github/properties/pull_request.go",children:"Pull Request"})}),"\n"]}),"\n","\n",(0,s.jsx)(n.h3,{id:"ingest-types-and-their-outputs",children:"Ingest Types and Their Outputs"}),"\n",(0,s.jsx)(n.p,{children:"Each rule can specify the type of data which should be ingested. Minder works to\ncache ingested data across all rule evaluations, so multiple rules which ingest\nthe same data should only need to fetch it once. The ingestion types produce the\nfollowing data for rule evaluatino:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"REST Ingest"})," (",(0,s.jsx)(n.code,{children:"rest"}),")"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Entity Types"}),": all types"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Data Content"}),": Calls a REST endpoint specified in the ingest type, and\nreturns a parsed JSON object from the response"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Git Ingest"})," (",(0,s.jsx)(n.code,{children:"git"}),")"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Entity_Types"}),": PRs and repos"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Data Content"}),": This is only useful with the Rego evaluation engine. It\nprovides a filesystem view of the current repository contents; this is\nrequired for using the Rego ",(0,s.jsx)(n.code,{children:"fs"})," methods."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Dependency Ingest"})," (",(0,s.jsx)(n.code,{children:"deps"}),")"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Entity_Types"}),": PRs and repos"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Data Content"}),": Ingests the set of libraries used by recognized package\nmanagers, using the ",(0,s.jsx)(n.a,{href:"https://github.com/google/osv-scalibr",children:"osv-scalibr"}),"\nlibrary. When used to ingest a pull request, the ",(0,s.jsx)(n.code,{children:"deps"})," ingest can provide\n",(0,s.jsx)(n.code,{children:"new"}),", ",(0,s.jsx)(n.code,{children:"new_and_updated"}),", or ",(0,s.jsx)(n.code,{children:"all"})," dependencies from the repository after the\nproposed change."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Artifact Ingest"})," (",(0,s.jsx)(n.code,{children:"artifact"}),")"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Entity_Types"}),": artifact"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Data Content"}),": Fetches details about about container build attestations,\nincluding signature data, branch and repository information, and GitHub\nrunner environment."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Diff Ingest"})," (",(0,s.jsx)(n.code,{children:"diff"}),")"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Entity_Types"}),": PR only"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Data Content"}),": Provides a set of diffs describing the changes proposed in\nthe PR. This works with the ",(0,s.jsx)(n.code,{children:"homoglyphs"})," and ",(0,s.jsx)(n.code,{children:"vulncheck"})," evaluators. The diff\ncan evaluate ",(0,s.jsx)(n.code,{children:"full"})," (all files) and ",(0,s.jsx)(n.code,{children:"dep"})," (dependency changes) for these\nevaluators."]}),"\n","\n"]}),"\n"]}),"\n","\n",(0,s.jsx)(n.h2,{id:"evaluate",children:"Evaluate"}),"\n",(0,s.jsxs)(n.p,{children:["The evaluation phase in Minder evaluates the ingested data according to the\n",(0,s.jsx)(n.a,{href:"https://mindersec.github.io/ref/proto#minder-v1-RuleType-Definition-Eval",children:"specified rule type and parameters"}),".\nHere's how it works:"]}),"\n",(0,s.jsx)(n.h3,{id:"evaluation-process",children:"Evaluation Process"}),"\n",(0,s.jsx)(n.p,{children:"Minder takes the following inputs for rule evaluation:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Ingested data from the ",(0,s.jsx)(n.a,{href:"#ingest",children:"ingest phase"})]}),"\n",(0,s.jsxs)(n.li,{children:["Rule profile parameters from the ",(0,s.jsx)(n.code,{children:"params"})," and ",(0,s.jsx)(n.code,{children:"def"})," clauses."]}),"\n",(0,s.jsxs)(n.li,{children:["Entity properties as string key-value pairs (e.g.,\n",(0,s.jsx)(n.code,{children:"github/default_branch=main"}),")"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The system then evaluates the rule using one of these engines:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Rego Evaluation"})," (",(0,s.jsx)(n.code,{children:"rego"}),")"]}),"\n",(0,s.jsxs)(n.p,{children:["See the\n",(0,s.jsx)(n.a,{href:"/how-to/writing-rules-in-rego",children:"documentation on writing rules for Rego"}),"\nfor more details on the Rego evaluation engine. This engine has the most\nflexibility and supports sophisticated logic, but also has a higher learning\ncurve."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Uses ",(0,s.jsx)(n.a,{href:"https://www.openpolicyagent.org/",children:"Open Policy Agent"})," (OPA) Rego\nlanguage"]}),"\n",(0,s.jsxs)(n.li,{children:["Supports two evaluation modes:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"deny-by-default"}),": Rule fails unless ",(0,s.jsx)(n.code,{children:"allow := true"})," is set"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"constraints"}),": Rule fails if the ",(0,s.jsx)(n.code,{children:"violations"})," array contains any entries.\n",(0,s.jsx)(n.code,{children:"violations"})," elements must be an object which contains a ",(0,s.jsx)(n.code,{children:"msg"})," key, e.g.\n",(0,s.jsx)(n.code,{children:'violations := [{"msg": "..."}, {"msg": "..."}]'})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Produces output via the ",(0,s.jsx)(n.code,{children:"output"})," property in the Rego code"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"JQ Evaluation"})," (",(0,s.jsx)(n.code,{children:"jq"}),")"]}),"\n",(0,s.jsxs)(n.p,{children:["See the\n",(0,s.jsx)(n.a,{href:"/how-to/writing-rules-in-jq",children:"documentation on writing rules in JQ"})," for\nmore details on the JQ evaluation engine. This engine allows you to easily\nextract structured data and compare it with known or expected values."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Processes JSON data using ",(0,s.jsx)(n.a,{href:"https://stedolan.github.io/jq/",children:"jq queries"})]}),"\n",(0,s.jsx)(n.li,{children:"Returns evaluation results based on the query output"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Vulncheck Evaluation"})," (",(0,s.jsx)(n.code,{children:"vulncheck"}),")"]}),"\n",(0,s.jsxs)(n.p,{children:["See the\n",(0,s.jsx)(n.a,{href:"/integrations/community_integrations",children:"documentation on checking vulnerabilities"}),"\nfor more details on the vulncheck engine. The vulncheck engine is a\ncustom-coded engine which evaluates software dependencies against the\n",(0,s.jsx)(n.a,{href:"https://osv.dev/",children:"Open Source Vulnerabilities (OSV) database"}),". With\nimprovements to the ",(0,s.jsx)(n.code,{children:"deps"})," ingestion type, this evaluator can largely be\nreplaced with rego evaluation and\n",(0,s.jsx)(n.a,{href:"/understand/data_sources",children:"data sources"}),"."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Requires the use of the ",(0,s.jsx)(n.code,{children:"diff"})," ingestion type with specified ",(0,s.jsx)(n.code,{children:"ecosystems"}),",\nand only operates in a ",(0,s.jsx)(n.code,{children:"pull_request"})," context"]}),"\n",(0,s.jsx)(n.li,{children:"Uses a custom parser for dependency files, and can suggest line-level\ncomments on vulnerable libraries"}),"\n",(0,s.jsx)(n.li,{children:"Immediately applies comments highlighting new vulnerable libraries when\nevaluated against a pull request."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Homoglyph Evaluation"})," (",(0,s.jsx)(n.code,{children:"homoglyph"}),")"]}),"\n",(0,s.jsxs)(n.p,{children:["This rule evaluation engine attempts to detect malicious Unicode sequences as\ndescribed in the ",(0,s.jsx)(n.a,{href:"https://trojansource.codes/",children:"Trojan Source attack"}),". The\nhomoglyphs evaluator can detect two different types of attack:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"invisible_characters"}),": using byte order characters to attempt to\nconfusingly display characters and comments"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"mixed_scripts"}),": mixing identical-appearance characters from different\nalphabets (for example, to use two variables with seemingly-identical\nnames)"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"homoglyph"})," evaluator only operates in a ",(0,s.jsx)(n.code,{children:"pull_request"})," context using a\n",(0,s.jsx)(n.code,{children:"full"})," diff."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The evaluation engine determines if the rule passes, fails or should be skipped\n(for example, because the resource is not the correct type). If rule passes or\nis skipped, the entity is compliant with the profile, and no further evaluation\nis done. If the rule evaluation fails and remediation or alerting is enabled,\noutput data from the rule evalution may be passed to the following steps."}),"\n",(0,s.jsx)(n.h2,{id:"remediate",children:"Remediate"}),"\n",(0,s.jsxs)(n.p,{children:["A rule can optionally define a\n",(0,s.jsx)(n.a,{href:"https://mindersec.github.io/ref/proto#minder-v1-RuleType-Definition-Remediate",children:"remediation action"}),"\nto take when rule evaluation fails. The goal of remediation is to change the\nstate of the entity so that it it now passes the rule evaluation. The\nremediation phase can optionally use inputs from the evaluation phase to\ndetermine what actions to take."]}),"\n",(0,s.jsx)(n.h3,{id:"remediation-inputs",children:"Remediation Inputs"}),"\n",(0,s.jsx)(n.p,{children:"Remediation actions have access to:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"Entity"})," object representing the resource being evaluated"]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"Profile"})," object containing rule parameters and definitions"]}),"\n",(0,s.jsxs)(n.li,{children:["For remediations which create a pull request, output from the rule evaluation\nis available in ",(0,s.jsx)(n.code,{children:"EvalResultOutput"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"remediation-types",children:"Remediation Types"}),"\n",(0,s.jsx)(n.p,{children:"Minder supports three remediation actions:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Pull Request"})," (",(0,s.jsx)(n.code,{children:"pull_request"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"The Pull Request remediation type creates or updates GitHub pull requests to\nimplement fixes automatically. The pull requests are authored by the Minder\nbot, and will need to be reviewed and merged by the project maintainers."}),"\n",(0,s.jsx)(n.p,{children:"Pull requests support the following content modification types:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"minder.content"}),":\n",(0,s.jsxs)(n.a,{href:"https://mindersec.github.io/ref/proto#minder-v1-RuleType-Definition-Remediate-PullRequestRemediation-Content",children:["define a list of file ",(0,s.jsx)(n.code,{children:"path"}),"s and ",(0,s.jsx)(n.code,{children:"content"}),"s"]}),"\nwhich should be updated. Currently only supports the ",(0,s.jsx)(n.code,{children:"replace"})," action on\nfiles. Both ",(0,s.jsx)(n.code,{children:"path"})," and ",(0,s.jsx)(n.code,{children:"content"})," may use Go templates to parameterize their\noutputs"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"minder.actions.replace_tags_with_sha"}),": uses\n",(0,s.jsx)(n.a,{href:"https://github.com/Stacklok/frizbee",children:"the Stacklok/frizbee library"})," to\nresolve Git and OCI tag references to SHA digests where detected in the\nrepository. The only parameter to this action is a list of resources which\nshould not be resolved to digests (implicitly trusting the release process\nfor the resource)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"minder.yq.evaluate"}),": applies a\n",(0,s.jsxs)(n.a,{href:"https://mikefarah.gitbook.io/yq/",children:["yq ",(0,s.jsx)(n.code,{children:"expression"})]})," to files selected by a\nlist of ",(0,s.jsx)(n.code,{children:"patterns"}),". Each element in the ",(0,s.jsx)(n.code,{children:"patterns"})," list is represented as:\n",(0,s.jsx)(n.code,{children:'{"type": "glob", "pattern": "file/path/*"}'}),". ",(0,s.jsx)(n.code,{children:"glob"})," is currently the only\nsupported pattern type. This action does not support templating either\n",(0,s.jsx)(n.code,{children:"expression"})," or ",(0,s.jsx)(n.code,{children:"pattern"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["If the content modification produces a diff in the repository, Minder will\nopen and manage a pull request against the branch used in the ",(0,s.jsx)(n.code,{children:"git"})," ingest,\nor the default branch if a different ingestion was used. The pull request\nincludes the following fields which support Go templates:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"title"}),": PR title"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"body"}),": PR description"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The following data is available to fill in template contents in title, body,\nand for the ",(0,s.jsx)(n.code,{children:"minder.content"})," action:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Entity"})," contains the same entity information available during rule\nevaluation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Profile"})," contains the profile data supplied in the ",(0,s.jsx)(n.code,{children:"def"})," field"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Params"})," contains the profile data supplied in the ",(0,s.jsx)(n.code,{children:"params"})," field"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"EvalResultOutput"})," contains the output data from the rule evaluation step"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"REST Call"})," (",(0,s.jsx)(n.code,{children:"rest"}),")"]}),"\n",(0,s.jsxs)(n.p,{children:["The\n",(0,s.jsx)(n.a,{href:"https://mindersec.github.io/ref/proto#minder-v1-RestType",children:"REST remediation"}),"\ncalls the specified ",(0,s.jsx)(n.code,{children:"endpoint"})," using the defined HTTP ",(0,s.jsx)(n.code,{children:"method"}),", passing a\n",(0,s.jsx)(n.code,{children:"body"})," and optional ",(0,s.jsx)(n.code,{children:"headers"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Both the endpoint and the body support Go template parameters, with the\nfollowing data:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Entity"})," contains the same entity information available during rule\nevaluation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Profile"})," contains the profile data supplied in the ",(0,s.jsx)(n.code,{children:"def"})," field"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Params"})," contains the profile data supplied in the ",(0,s.jsx)(n.code,{children:"params"})," field"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"GitHub Branch Protection"})," (",(0,s.jsx)(n.code,{children:"gh_branch_protect"}),")"]}),"\n",(0,s.jsxs)(n.p,{children:["The\n",(0,s.jsx)(n.a,{href:"https://mindersec.github.io/ref/proto#minder-v1-RuleType-Definition-Remediate-GhBranchProtectionType",children:"branch protection remediation"}),"\ntakes a Go-templated JSON object in ",(0,s.jsx)(n.code,{children:"patch"})," to merge with the existing\nprotection branch protection settings. Branch protection has been implemented\nas a special remediation due to the peculiarities of the GitHub branch\nprotection API.\n",(0,s.jsx)(n.a,{href:"https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/managing-rulesets/about-rulesets",children:"Repository rulesets"}),"\nare a newer feature which avoids many of these peculiarities."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"patch"})," string supports Go template parameters and needs to output a JSON\nobject which will be merged with the existing branch protection settings. The\nfollowing data is available within the Go template context:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Entity"})," contains the same entity information available during rule\nevaluation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Profile"})," contains the profile data supplied in the ",(0,s.jsx)(n.code,{children:"def"})," field"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Params"})," contains the profile data supplied in the ",(0,s.jsx)(n.code,{children:"params"})," field"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["API-driven remediations (",(0,s.jsx)(n.code,{children:"rest"})," and ",(0,s.jsx)(n.code,{children:"gh_branch_protect"}),") will generally take\neffect immediately on the targeted entity; ",(0,s.jsx)(n.code,{children:"pull_request"})," remediations will need\nto be merged before they take effect. Minder will ensure that at most one pull\nrequest is open at a time for a particular rule applied to a specific entity."]}),"\n",(0,s.jsx)(n.h2,{id:"alert-types",children:"Alert Types"}),"\n",(0,s.jsxs)(n.p,{children:["When remediation has completed, Minder will execute any\n",(0,s.jsx)(n.a,{href:"https://mindersec.github.io/ref/proto#minder-v1-RuleType-Definition-Alert",children:"alerts defined for the rule type"}),".\nMinder currently defines two alert types, which operate similarly to the\n",(0,s.jsx)(n.a,{href:"#remediation-types",children:"remediation actions"})," except that alerts do not directly\nattempt to fix the detected problem, but rather notify human maintainers to\nallow them to evaluate the solution."]}),"\n",(0,s.jsx)(n.h3,{id:"alert-inputs",children:"Alert Inputs"}),"\n",(0,s.jsx)(n.p,{children:"Because alerts are primarily indended to drive later human behavior, they have\nlimited processing functionality. Alerts have access to:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Whether a remediation rule is defined for ",(0,s.jsx)(n.code,{children:"security_advisory"})," alerts"]}),"\n",(0,s.jsxs)(n.li,{children:["Output from the rule evaluation as ",(0,s.jsx)(n.code,{children:"EvalResultOutput"})," for\n",(0,s.jsx)(n.code,{children:"pull_request_comment"}),"s"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"alert-types-1",children:"Alert Types"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Pull Request Comments"})," (",(0,s.jsx)(n.code,{children:"pull_request_comment"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"Instructs Minder to comment on new and updated pull requests. Minder will\nensure that each PR in a repository has at most one comment per rule type\nevaluated, and will delete the PR comment if the pull request rule evaluation\nsucceeds in the future (for example, because the flagged issue was\naddressed)."}),"\n",(0,s.jsxs)(n.p,{children:["Pull request comments have a single ",(0,s.jsx)(n.code,{children:"review_message"})," parameter, which\ncontains a Go templated markdown string with the following contents from the\nrule evaluation:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"EvalErrorDetails"})," contains any detailed error messages from the rule\nevaluation execution"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"EvalResultOutput"})," contains the output data from the rule evaluation step"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"pull_request_comment"})," alert type is only valid on pull request entities."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"GitHub Security Alerts"})," (",(0,s.jsx)(n.code,{children:"security_alert"}),")"]}),"\n",(0,s.jsxs)(n.p,{children:["This rule instructs Minder to create a\n",(0,s.jsx)(n.a,{href:"https://docs.github.com/en/code-security/security-advisories/guidance-on-reporting-and-writing-information-about-vulnerabilities/privately-reporting-a-security-vulnerability",children:"private security vulnerability report"}),"\nthrough the GitHub API, assuming that private vulnerability reporting is\nenabled for the repository. These reports require administrator permission to\nview. When the security alert is no longer active because the rule evaluation\npasses or is skipped, Minder will automatically close the security\nvulnerability."]}),"\n",(0,s.jsx)(n.p,{children:"The contents of the security advisory are currently hard-coded, and include\nthe following details:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Rule evaluation error message"}),"\n",(0,s.jsx)(n.li,{children:"Repository name"}),"\n",(0,s.jsx)(n.li,{children:"Profile and rule name which was"}),"\n",(0,s.jsx)(n.li,{children:"Rule severity from the rule type definition"}),"\n",(0,s.jsxs)(n.li,{children:["Any [",(0,s.jsx)(n.code,{children:"guidance"}),"] content from the rule type definition"]}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>a});var t=i(96540);const s={},r=t.createContext(s);function l(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);