"use strict";(self.webpackChunkminder_docs=self.webpackChunkminder_docs||[]).push([[4385],{29281:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"understand/key_concepts","title":"Key Concepts","description":"Minder implements a platform for enforcing supply chain security policy in a continuous and automated manner.","source":"@site/docs/understand/key_concepts.md","sourceDirName":"understand","slug":"/understand/key_concepts","permalink":"/understand/key_concepts","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"title":"Key Concepts","sidebar_position":5},"sidebar":"minder","previous":{"title":"Automatic remediations","permalink":"/getting_started/remediations"},"next":{"title":"Profiles and Rules","permalink":"/understand/profiles"}}');var s=n(74848),r=n(28453);const a={title:"Key Concepts",sidebar_position:5},o="Key Concepts",l={},c=[{value:"Managing Supply Chains with Minder",id:"managing-supply-chains-with-minder",level:2},{value:"Projects",id:"projects",level:3},{value:"Entities",id:"entities",level:3},{value:"Providers",id:"providers",level:3},{value:"Origination",id:"origination",level:4},{value:"Profiles",id:"profiles",level:3},{value:"Rule Types",id:"rule-types",level:4},{value:"Executing Policy With Minder",id:"executing-policy-with-minder",level:2},{value:"Phases of Evaluation",id:"phases-of-evaluation",level:3},{value:"Ingesters",id:"ingesters",level:3},{value:"Evaluation Engines",id:"evaluation-engines",level:3},{value:"Data Sources",id:"data-sources",level:4},{value:"Remediations and Alerts",id:"remediations-and-alerts",level:4},{value:"Historical Evaluation Records",id:"historical-evaluation-records",level:4}];function d(e){const i={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.header,{children:(0,s.jsx)(i.h1,{id:"key-concepts",children:"Key Concepts"})}),"\n",(0,s.jsxs)(i.p,{children:["Minder implements a platform for enforcing supply chain security policy in a ",(0,s.jsx)(i.em,{children:"continuous"})," and ",(0,s.jsx)(i.em,{children:"automated"})," manner.\nIn addition to policy checks, Minder also supports defining ",(0,s.jsx)(i.em,{children:"remediation"})," actions that can be automatically executed to assist teams in following the defined policies.\nThis section introduces the key concepts in Minder for defining ",(0,s.jsx)(i.em,{children:"what"})," policies should be applied to ",(0,s.jsx)(i.em,{children:"which"})," resources, and how Minder uses these concepts to enforce security policies."]}),"\n",(0,s.jsx)(i.h2,{id:"managing-supply-chains-with-minder",children:"Managing Supply Chains with Minder"}),"\n",(0,s.jsx)(i.h3,{id:"projects",children:"Projects"}),"\n",(0,s.jsx)(i.p,{children:"Projects are the unit of tenancy (separation and control of resources by different users) in Minder.\nProjects are used to group supply chain components which are managed by a common team, and to apply policies to those components.\nOne user may be a member of multiple projects, and one project may be managed by multiple users."}),"\n",(0,s.jsxs)(i.p,{children:["Users can be assigned a ",(0,s.jsx)(i.a,{href:"/user_management/user_roles",children:"role"})," in a project, which determines their permissions to view and manage the project's resources, such as ",(0,s.jsx)(i.a,{href:"#entities",children:"entities"}),", ",(0,s.jsx)(i.a,{href:"#providers",children:"providers"}),", and ",(0,s.jsx)(i.a,{href:"#profiles",children:"profiles"}),"."]}),"\n",(0,s.jsx)(i.h3,{id:"entities",children:"Entities"}),"\n",(0,s.jsxs)(i.p,{children:["Entities represent components in the supply chain, such as repositories, pull requests, or artifacts.\nMinder uses entities to track which supply chain components are associated with which policies and rules, which guides ",(0,s.jsx)(i.a,{href:"#rule-evaluation",children:"rule evaluation"})," when it occurs.\nIn addition to an intrinsic identifier (such as github repo name), entities have a set of system-provided ",(0,s.jsx)(i.em,{children:"properties"})," which are extracted from the underlying system and can be used when evaluating policies."]}),"\n",(0,s.jsx)(i.p,{children:"Entities are created and managed by providers."}),"\n",(0,s.jsx)(i.h3,{id:"providers",children:"Providers"}),"\n",(0,s.jsxs)(i.p,{children:["Providers are Minder\u2019s integration points with external systems, such as GitHub or the Docker registry.\nProviders track the credentials and permissions needed to interact with these services, and enable both manual and automatic creation of entities, depending on the entity type and provider configuration.\nIn general, references to an entity need to be ",(0,s.jsx)(i.em,{children:"qualified"})," by the context of the provider that created the entity, though the Minder API will attempt to deduce the appropriate provider where possible."]}),"\n",(0,s.jsx)(i.p,{children:"Examples:"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsx)(i.p,{children:"GitHub and GitLab: Track repositories, pull requests, and CI/CD pipelines."}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsx)(i.p,{children:"Docker Hub: Monitor container images and their metadata."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:"Providers communicate with Minder through APIs, webhook events, and scheduled updates. This ensures\ncontinuous monitoring and up-to-date information about the entities they manage."}),"\n",(0,s.jsx)(i.h4,{id:"origination",children:"Origination"}),"\n",(0,s.jsx)(i.p,{children:"Some entities are automatically created by a provider due to existing relationships in the external system that the provider interacts with.\nOrigination is the term used to describe entities which have been automatically created due to their relationship with an existing entity.\nFor instance, a pull request originates from a repository."}),"\n",(0,s.jsx)(i.p,{children:"This concept ensures that Minder maintains lifecycle consistency by:"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsx)(i.p,{children:"Automatically creating derived entities (e.g., pull requests) based on originating ones."}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsx)(i.p,{children:"Deleting dependent entities when the originating entity is removed."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:"Example Relationships:"}),"\n",(0,s.jsx)(i.p,{children:"Repository -> Pull Request"}),"\n",(0,s.jsx)(i.p,{children:"Repository -> Release"}),"\n",(0,s.jsx)(i.h3,{id:"profiles",children:"Profiles"}),"\n",(0,s.jsxs)(i.p,{children:["Profiles represent a collection of individual controls or policies which collectively enforce a security posture or other requirements on a set of entities.\nProfiles contain a collection of ",(0,s.jsx)(i.a,{href:"#rule-types",children:"rule types"})," with parameters (such as permitted CVE severity or allowed license types) to control the execution of the rule.\nBest practice is to define profiles that apply a set of related behaviors, and define your desired security posture via the application of multiple profiles."]}),"\n",(0,s.jsxs)(i.p,{children:["Profiles are specific to each project, but can apply to entities across multiple providers with the project.\nWhile profiles apply to all entities in a project by default, profiles may contain a ",(0,s.jsx)(i.a,{href:"/how-to/profile_selectors",children:"selector"})," which limits to the profile to only entities matched by the selector expression."]}),"\n",(0,s.jsx)(i.h4,{id:"rule-types",children:"Rule Types"}),"\n",(0,s.jsx)(i.p,{children:"Rule types define individual checks for specific aspects of an entity, such as ensuring secret scanning is enabled or that artifacts are signed.\nWhile a rule type defines a specific check on an entity, rule types may also contain parameters which can be set by the profile which applies the rule type to the selected set of entities.\nIn this way, a single rule type (for example, requiring GitHub Actions configuration) can be parameterized for different programming languages, licenses, or repository visibility."}),"\n",(0,s.jsxs)(i.p,{children:["Like profiles, rule types are specific to a project, but the same definition can be shared and loaded into multiple projects.\nA collection of useful rule definitions is available in ",(0,s.jsx)(i.a,{href:"https://github.com/mindersec/minder-rules-and-profiles",children:"https://github.com/mindersec/minder-rules-and-profiles"}),"."]}),"\n",(0,s.jsx)(i.h2,{id:"executing-policy-with-minder",children:"Executing Policy With Minder"}),"\n",(0,s.jsx)(i.h3,{id:"phases-of-evaluation",children:"Phases of Evaluation"}),"\n",(0,s.jsx)(i.p,{children:"Minder attempts to ensure that entities are continuously against the defined polices.\nIt does this by performing rule evaluation at various times, including when entities are first registered, when notified of a change to an entity, and (soon) periodically to catch changes which are not notified.\nWhen executing the rules from a policy, Minder proceedes to evaluate all the rules in the relevant policies in parallel using the following phases:"}),"\n",(0,s.jsxs)(i.ol,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Ingestion"}),": Fetch the latest state of the entity from the provider."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Evaluation"}),": Evaluate the rules against the entity."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Remediation"}),": If a rule fails, attempt to remediate the entity."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Alert"}),": If a rule fails and remediation is not possible, create an alert."]}),"\n"]}),"\n",(0,s.jsxs)(i.p,{children:["The details of rule evaluation are covered ",(0,s.jsx)(i.a,{href:"/understand/rule_evaluation",children:"in a separate document"}),"; this section provides a high level overview to complement the policy management constructs described in ",(0,s.jsx)(i.a,{href:"#managing-supply-chains-with-minder",children:"managing supply chains"}),"."]}),"\n",(0,s.jsx)(i.h3,{id:"ingesters",children:"Ingesters"}),"\n",(0,s.jsx)(i.p,{children:"Ingesters fetch data about the entity using provider-specific code.\nDepending on the type of entity, this data might include results from API calls, file contents, or other data such as attestations.\nGenerally, data from the ingestion phase will be made available as either structured data (such as a JSON document) or through Rego functions in the Rego evaluation engine."}),"\n",(0,s.jsx)(i.h3,{id:"evaluation-engines",children:"Evaluation Engines"}),"\n",(0,s.jsx)(i.p,{children:"The rule evaluation engine is at the heart of defining policies on supply chain entities.\nIt allows rule type authors to compare the data fetched during the ingestion stage with expected values, and determine whether the entity meets the policy requirements."}),"\n",(0,s.jsxs)(i.p,{children:["Minder currently supports two rule evaluation engines: ",(0,s.jsx)(i.code,{children:"rego"})," and ",(0,s.jsx)(i.code,{children:"jq"}),".\nThe ",(0,s.jsx)(i.code,{children:"jq"})," engine is useful for evaluating simple expressions against constant or parameterized values, while the ",(0,s.jsx)(i.code,{children:"rego"})," engine is more powerful, and allows writing expressions with conditionals, loops and dynamic data fetching."]}),"\n",(0,s.jsx)(i.p,{children:"At the end of the rule evaluation, each rule type yields a result, which can be one of four values:"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"pass"}),": The entity meets the policy requirements."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"fail"}),": The entity does not meet the policy requirements."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"skip"}),": The rule was skipped because it did not apply to the entity."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"error"}),": An error occurred during the evaluation."]}),"\n"]}),"\n",(0,s.jsx)(i.h4,{id:"data-sources",children:"Data Sources"}),"\n",(0,s.jsx)(i.p,{children:"Data sources complement providers by fetching additional contextual information from\nthird-party APIs.\nData sources are currently only available in the Rego evaluation engine.\nWhile providers manage entities and can supply data during the ingestion phase, data sources provide a structured interface to data sources which can be queried dynamically by the rule engine.."}),"\n",(0,s.jsx)(i.p,{children:"Like rule types and profiles, data sources are defined in the context of a project.\nData types generally fetch data from an external network service, and can be used to enrich the data extracted by the rule engine:"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsx)(i.p,{children:"A data source might query the Open Source Vulnerabilities (OSV) database to check\nfor known vulnerabilities in dependencies listed in a repository\u2019s manifest file."}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsx)(i.p,{children:"A data source might query an external service to check for the correctness and availability\nof release assets."}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsx)(i.p,{children:"A data source might be used to fetch additional information from the same API as the provider to compare data from two different sources, such as the list of branches and the branch protection rules."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(i.h4,{id:"remediations-and-alerts",children:"Remediations and Alerts"}),"\n",(0,s.jsxs)(i.p,{children:["For rule types which produce a ",(0,s.jsx)(i.code,{children:"fail"})," result for an entity, remediations and alerts define corrective actions which Minder can take to restore the entity to a policy-compliant state.\nRemediations and alerts may each be defined as part of the rule type; some rule may define only a remediation, only an alert, both, or neither."]}),"\n",(0,s.jsx)(i.p,{children:"Generally, remediations define actions which Minder can take which will directly address the identified issue -- for example, updating an entity via a REST API or proposing a change through a pull request.\nAlerts provide a mechanism for providing feedback to humans about the non-compliant state of an entity; while alerts may provide detailed advice on how to correct a problem, they do not correct the problem on their own."}),"\n",(0,s.jsx)(i.p,{children:"While rule types define the remediation and alert mechanisms, policies can enable or disable the execution of either remediations or alerts.\nThis allows policy authors to begin implementing rules by measuing policy compliance before adding remediation or alert actions which may disrupt the workflow of developers."}),"\n",(0,s.jsx)(i.h4,{id:"historical-evaluation-records",children:"Historical Evaluation Records"}),"\n",(0,s.jsx)(i.p,{children:"In addition to remediation and alert actions, Minder also maintains a historical evaluation record for each rule.\nThis record includes information about when the rule was evaluated, the evaluation result, and any messages and actions taken as a result of the rule evaluation."})]})}function h(e={}){const{wrapper:i}={...(0,r.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,i,n)=>{n.d(i,{R:()=>a,x:()=>o});var t=n(96540);const s={},r=t.createContext(s);function a(e){const i=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(r.Provider,{value:i},e.children)}}}]);