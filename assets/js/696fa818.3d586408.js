"use strict";(self.webpackChunkstacklok=self.webpackChunkstacklok||[]).push([[654],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>h});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=a.createContext({}),c=function(e){var t=a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},s=function(e){var t=c(e.components);return a.createElement(p.Provider,{value:t},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=c(r),d=n,h=u["".concat(p,".").concat(d)]||u[d]||f[d]||i;return r?a.createElement(h,o(o({ref:t},s),{},{components:r})):a.createElement(h,o({ref:t},s))}));function h(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[u]="string"==typeof e?e:n,o[1]=l;for(var c=2;c<i;c++)o[c]=r[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},81957:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>f,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=r(87462),n=(r(67294),r(3905));const i={title:"Check artifact provenance",sidebar_position:55},o="Check artifact provenance",l={unversionedId:"how-to/artifact_signatures",id:"how-to/artifact_signatures",title:"Check artifact provenance",description:"With Minder you can create rules that assert that artifacts built from your",source:"@site/docs/how-to/artifact_signatures.md",sourceDirName:"how-to",slug:"/how-to/artifact_signatures",permalink:"/how-to/artifact_signatures",draft:!1,tags:[],version:"current",sidebarPosition:55,frontMatter:{title:"Check artifact provenance",sidebar_position:55},sidebar:"minder",previous:{title:"Enabling pull request reviews",permalink:"/how-to/pr_reviews"},next:{title:"Setting up a profile for auto-remediation",permalink:"/how-to/setup-autoremediation"}},p={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Create the artifact provenance rule type",id:"create-the-artifact-provenance-rule-type",level:2},{value:"Define a simple profile that checks artifact signatures",id:"define-a-simple-profile-that-checks-artifact-signatures",level:2},{value:"Define a more advanced profile that checks artifact provenance",id:"define-a-more-advanced-profile-that-checks-artifact-provenance",level:2}],s={toc:c},u="wrapper";function f(e){let{components:t,...r}=e;return(0,n.kt)(u,(0,a.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"check-artifact-provenance"},"Check artifact provenance"),(0,n.kt)("p",null,"With Minder you can create rules that assert that artifacts built from your\nrepositories are built from trusted sources and using trusted workflows based\non their cryptographically signed provenance."),(0,n.kt)("p",null,"This is done by creating a profile which utilizes the ",(0,n.kt)("inlineCode",{parentName:"p"},"artifact_signature"),"\n",(0,n.kt)("inlineCode",{parentName:"p"},"rule_type"),". "),(0,n.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"The ",(0,n.kt)("inlineCode",{parentName:"li"},"minder")," CLI application"),(0,n.kt)("li",{parentName:"ul"},"A Stacklok account"),(0,n.kt)("li",{parentName:"ul"},"An enrolled Provider (e.g., GitHub)"),(0,n.kt)("li",{parentName:"ul"},"A repository that produces container images. At the moment Minder's artifact signature checks are only available for container images and only the ",(0,n.kt)("inlineCode",{parentName:"li"},"ghcr.io")," registry is supported.")),(0,n.kt)("h2",{id:"create-the-artifact-provenance-rule-type"},"Create the artifact provenance rule type"),(0,n.kt)("p",null,"Fetch all the reference rules by cloning the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/stacklok/minder-rules-and-profiles"},"minder-rules-and-profiles repository"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"git clone https://github.com/stacklok/minder-rules-and-profiles.git\n")),(0,n.kt)("p",null,"In that directory you can find all the reference rules and profiles."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"cd minder-rules-and-profiles\n")),(0,n.kt)("p",null,"Create the ",(0,n.kt)("inlineCode",{parentName:"p"},"artifact_signature")," rule type in Minder:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"minder ruletype create -f rule-types/github/artifact_signature.yaml\n")),(0,n.kt)("h2",{id:"define-a-simple-profile-that-checks-artifact-signatures"},"Define a simple profile that checks artifact signatures"),(0,n.kt)("p",null,"Next, create a profile that applies the rule type to the appropriate artifact."),(0,n.kt)("p",null,"The artifacts are referred to by name and tag. If the name is not specified,\nthe rule will match any artifact name. The tag can be specified either as a list\nof tags using the ",(0,n.kt)("inlineCode",{parentName:"p"},"tags")," parameter or as a regular expression using the ",(0,n.kt)("inlineCode",{parentName:"p"},"tag_regex"),"\nparameter. If both are empty, the rule will match any tag. It is an error to specify\nboth ",(0,n.kt)("inlineCode",{parentName:"p"},"tags")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"tag_regex"),"."),(0,n.kt)("p",null,"Create a new file called ",(0,n.kt)("inlineCode",{parentName:"p"},"profile-artifact-simple.yaml"),". The following example would match a container\nimage named ",(0,n.kt)("inlineCode",{parentName:"p"},"good-repo-go")," with the ",(0,n.kt)("inlineCode",{parentName:"p"},"latest")," tag. The profile would pass for any artifact that\nhas a signature, regardless of who signed it."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},"---\n# sample policy for validating artifact signatures\nversion: v1\ntype: profile\nname: latest-artifact-simple\ncontext:\n  provider: github\nartifact:\n  - type: artifact_signature\n    params:\n      tags: [latest]\n      name: good-repo-go\n    def:\n      is_signed: true\n      is_verified: true\n")),(0,n.kt)("p",null,"Create the profile in Minder:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"minder profile create -f profile-artifact-simple.yaml\n")),(0,n.kt)("p",null,"Once the profile is created, Minder will start checking the artifacts produced by the enrolled repositories\nand the policy status will be updated accordingly. If the artifact is not matching the expected provenance\n(for example someone pushes a new image to the registry without signing it), a\nviolation is presented via the profile status and an alert is raised."),(0,n.kt)("h2",{id:"define-a-more-advanced-profile-that-checks-artifact-provenance"},"Define a more advanced profile that checks artifact provenance"),(0,n.kt)("p",null,"As the next step, let's create a profile that checks the provenance of the artifact.\nCreate a new file called ",(0,n.kt)("inlineCode",{parentName:"p"},"profile-artifact-provenance.yaml"),"."),(0,n.kt)("p",null,"The profile would pass only if the container was\nbuilt from the ",(0,n.kt)("inlineCode",{parentName:"p"},"main")," branch of the ",(0,n.kt)("inlineCode",{parentName:"p"},"good-repo-go")," repository, using the ",(0,n.kt)("inlineCode",{parentName:"p"},"build-image-signed-ghat.yml"),"\nworkflow using a hosted github runner."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},"---\n# sample policy for validating artifact provenance\nversion: v1\ntype: profile\nname: latest-artifact-hardened\ncontext:\n  provider: github\nartifact:\n  - type: artifact_signature\n    params:\n      tags: [latest]\n      name: good-repo-go\n    def:\n      is_signed: true\n      is_verified: true\n      branch: main\n      signer_identity: build-image-signed-ghat.yml\n      runner_environment: github-hosted\n      repository: https://github.com/mytestorg/good-repo-go\n      cert_issuer: https://token.actions.githubusercontent.com\n")),(0,n.kt)("p",null,"Create the profile in Minder:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"minder profile create -f profile-artifact-provenance.yaml\n")),(0,n.kt)("p",null,"Once the profile is created, Minder will start checking the artifacts produced\nby the enrolled repositories and the policy status will be updated\naccordingly. If the artifact is not matching the expected provenance (for\nexample someone pushes a new image to the registry after having signed the\nimage with their personal account or the image is built from a different\nworkflow or a different branch), a violation is presented via the profile\nstatus and an alert is raised."))}f.isMDXComponent=!0}}]);