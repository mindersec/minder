"use strict";(self.webpackChunkminder_docs=self.webpackChunkminder_docs||[]).push([[5629],{25894:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>n,default:()=>a,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var s=r(74848),i=r(28453);const o={sidebar_position:130,title:"Apply a profile to a subset of entities"},n="Apply a profile to a subset of entities",l={id:"how-to/profile_selectors",title:"Apply a profile to a subset of entities",description:"Profiles allow you to apply a consistent set of rules to a group of entities within your project. By default, these",source:"@site/docs/how-to/profile_selectors.md",sourceDirName:"how-to",slug:"/how-to/profile_selectors",permalink:"/how-to/profile_selectors",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:130,frontMatter:{sidebar_position:130,title:"Apply a profile to a subset of entities"},sidebar:"minder",previous:{title:"Using Mindev to develop and debug rule types",permalink:"/how-to/mindev"},next:{title:"Get hacking",permalink:"/developer_guide/get-hacking"}},d={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Add a selector to a profile",id:"add-a-selector-to-a-profile",level:2},{value:"Repository selectors",id:"repository-selectors",level:2},{value:"Artifact selectors",id:"artifact-selectors",level:2},{value:"Pull request selectors",id:"pull-request-selectors",level:2},{value:"Entity provider selectors",id:"entity-provider-selectors",level:2}];function h(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"apply-a-profile-to-a-subset-of-entities",children:"Apply a profile to a subset of entities"})}),"\n",(0,s.jsx)(t.p,{children:"Profiles allow you to apply a consistent set of rules to a group of entities within your project. By default, these\nprofiles are applied universally across all entities in a project. However, you may need to target a specific subset, such as\nrepositories belonging to a specific organization. Minder simplifies this process with profile selectors, enabling you\nto easily customize which entities a profile applies to."}),"\n",(0,s.jsx)(t.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["The ",(0,s.jsx)(t.code,{children:"minder"})," CLI application"]}),"\n",(0,s.jsxs)(t.li,{children:["A Minder account with\n",(0,s.jsxs)(t.a,{href:"/user_management/user_roles",children:["at least ",(0,s.jsx)(t.code,{children:"editor"})," permission"]})]}),"\n",(0,s.jsx)(t.li,{children:"An enrolled Provider (e.g., GitHub) and registered repositories"}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"add-a-selector-to-a-profile",children:"Add a selector to a profile"}),"\n",(0,s.jsxs)(t.p,{children:["Selectors are written using ",(0,s.jsx)(t.a,{href:"https://github.com/google/cel-spec",children:"CEL (Common Expression Language)"}),". To add a selector to\nyour profile, you need to define the entity and the condition you want to apply. Below is an example showing how to\nconfigure a selector to filter repositories and artifacts:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"name: profile-with-selectors\nselection:\n  - entity: repository\n    selector: repository.is_fork != true && repository.name.startsWith('stacklok/')\n  - entity: artifact\n    selector: artifact.provider.name == 'github-app-stacklok'\n"})}),"\n",(0,s.jsx)(t.p,{children:"Let's break down the example above:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"entity"}),": Defines the type of entity you want to filter (",(0,s.jsx)(t.code,{children:"repository"}),", ",(0,s.jsx)(t.code,{children:"artifact"}),", or ",(0,s.jsx)(t.code,{children:"pull_request"}),"). In the case that the ",(0,s.jsx)(t.code,{children:"entity"})," type is omitted, the selector will be applied to all entities."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"selector"}),": The CEL expression that specifies the filtering criteria. In the example:","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"The first selector filters repositories to include only those that are not forks and whose name starts with stacklok. In other words, those that are part of the stacklok organization."}),"\n",(0,s.jsxs)(t.li,{children:["The second selector filters artifacts to include only those provided by ",(0,s.jsx)(t.code,{children:"github-app-stacklok"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Below you can find the full list of selectors available for each entity type."}),"\n",(0,s.jsx)(t.h2,{id:"repository-selectors",children:"Repository selectors"}),"\n",(0,s.jsx)(t.p,{children:"Selectors for repositories allow you to filter and manage repositories based on specific attributes."}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Field"}),(0,s.jsx)(t.th,{children:"Description"}),(0,s.jsx)(t.th,{children:"Type"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"name"})}),(0,s.jsx)(t.td,{children:"The full name of the repository, e.g. stacklok/minder"}),(0,s.jsx)(t.td,{children:"string"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"is_fork"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.code,{children:"true"})," if the repository is a fork, ",(0,s.jsx)(t.code,{children:"nil"})," if unknown or not applicable to this provider"]}),(0,s.jsx)(t.td,{children:"bool"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"is_private"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.code,{children:"true"})," if the repository is private, ",(0,s.jsx)(t.code,{children:"nil"})," if unknown or not applicable to this provider"]}),(0,s.jsx)(t.td,{children:"bool"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"provider"})}),(0,s.jsxs)(t.td,{children:["The provider of the repository, for more details see ",(0,s.jsx)(t.a,{href:"#entity-provider-selectors",children:"Provider Selectors"})]}),(0,s.jsx)(t.td,{children:"ProviderSelector"})]})]})]}),"\n",(0,s.jsx)(t.h2,{id:"artifact-selectors",children:"Artifact selectors"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Field"}),(0,s.jsx)(t.th,{children:"Description"}),(0,s.jsx)(t.th,{children:"Type"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"name"})}),(0,s.jsx)(t.td,{children:"The full name of the artifact, e.g. stacklok/minder-server"}),(0,s.jsx)(t.td,{children:"string"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"type"})}),(0,s.jsx)(t.td,{children:'The type of the artifact, e.g. "container"'}),(0,s.jsx)(t.td,{children:"string"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"provider"})}),(0,s.jsxs)(t.td,{children:["The provider of the artifact, for more details see ",(0,s.jsx)(t.a,{href:"#entity-provider-selectors",children:"Provider Selectors"})]}),(0,s.jsx)(t.td,{children:"ProviderSelector"})]})]})]}),"\n",(0,s.jsx)(t.h2,{id:"pull-request-selectors",children:"Pull request selectors"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Field"}),(0,s.jsx)(t.th,{children:"Description"}),(0,s.jsx)(t.th,{children:"Type"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"name"})}),(0,s.jsx)(t.td,{children:"The full name of the pull request, e.g. stacklok/minder/123"}),(0,s.jsx)(t.td,{children:"string"})]})})]}),"\n",(0,s.jsx)(t.h2,{id:"entity-provider-selectors",children:"Entity provider selectors"}),"\n",(0,s.jsx)(t.p,{children:"Each entity can be filtered based on its provider."}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Field"}),(0,s.jsx)(t.th,{children:"Description"}),(0,s.jsx)(t.th,{children:"Type"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"name"})}),(0,s.jsx)(t.td,{children:"The name of the provider, e.g. github-app-stacklok"}),(0,s.jsx)(t.td,{children:"string"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"class"})}),(0,s.jsx)(t.td,{children:"The class of the provider, e.g. github-app"}),(0,s.jsx)(t.td,{children:"string"})]})]})]})]})}function a(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},28453:(e,t,r)=>{r.d(t,{R:()=>n,x:()=>l});var s=r(96540);const i={},o=s.createContext(i);function n(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:n(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);