"use strict";(self.webpackChunkminder_docs=self.webpackChunkminder_docs||[]).push([[6200],{95755:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>h,contentTitle:()=>d,default:()=>a,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"run_minder_server/config_webhook","title":"Configuring a Webhook","description":"Minder allows a webhook to be configured on the repository provider to respond to provider events. Currently, Minder only supports GitHub.","source":"@site/docs/run_minder_server/config_webhook.md","sourceDirName":"run_minder_server","slug":"/run_minder_server/config_webhook","permalink":"/run_minder_server/config_webhook","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":70,"frontMatter":{"title":"Configuring a Webhook","sidebar_position":70},"sidebar":"minder","previous":{"title":"Configure a Provider","permalink":"/run_minder_server/config_provider"},"next":{"title":"Installing a Production version","permalink":"/run_minder_server/installing_minder"}}');var t=n(74848),i=n(28453);const s={title:"Configuring a Webhook",sidebar_position:70},d="Configuring a Webhook",h={},c=[];function l(e){const o={a:"a",code:"code",h1:"h1",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(o.header,{children:(0,t.jsx)(o.h1,{id:"configuring-a-webhook",children:"Configuring a Webhook"})}),"\n",(0,t.jsxs)(o.p,{children:["Minder allows a webhook to be configured on the repository provider to respond to provider events. Currently, Minder only supports GitHub.\nThe webhook allows GitHub to notify Minder when certain events occur in your repositories.\nTo configure the webhook, Minder needs to be accessible from the internet. If you are running the server locally, you\ncan use a service like ",(0,t.jsx)(o.a,{href:"https://ngrok.com/",children:"ngrok"})," to expose your local server to the internet."]}),"\n",(0,t.jsx)(o.p,{children:"Here are the steps to configure the webhook:"}),"\n",(0,t.jsxs)(o.ol,{children:["\n",(0,t.jsxs)(o.li,{children:["\n",(0,t.jsxs)(o.p,{children:[(0,t.jsx)(o.strong,{children:"Expose your local server:"})," If you are running the server locally, start ngrok or a similar service to expose your\nlocal server to the internet. Note down the URL provided by ngrok (it will look something like ",(0,t.jsx)(o.code,{children:"https://<random-hash>.ngrok.io"}),").\nMake sure to expose the port that Minder is running on (by default, this is port ",(0,t.jsx)(o.code,{children:"8080"}),")."]}),"\n"]}),"\n",(0,t.jsxs)(o.li,{children:["\n",(0,t.jsxs)(o.p,{children:[(0,t.jsx)(o.strong,{children:"Update the Minder configuration:"})," Open your ",(0,t.jsx)(o.code,{children:"server-config.yaml"})," file and update the ",(0,t.jsx)(o.code,{children:"webhook-config"})," section with\nthe ngrok URL Minder is running on. The ",(0,t.jsx)(o.code,{children:"external_webhook_url"})," should point to the ",(0,t.jsx)(o.code,{children:"/api/v1/webhook/github"}),"\nendpoint on your Minder server, and the ",(0,t.jsx)(o.code,{children:"external_ping_url"})," should point to the ",(0,t.jsx)(o.code,{children:"/api/v1/health"})," endpoint. The ",(0,t.jsx)(o.code,{children:"webhook_secret"}),"\nshould match the secret configured in the GitHub webhook (under ",(0,t.jsx)(o.code,{children:"github.payload_secret"}),")."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-yaml",children:'webhook-config:\n    external_webhook_url: "https://<ngrok-url>/api/v1/webhook/github"\n    external_ping_url: "https://<ngrok-url>/api/v1/health"\n    webhook_secret: "your-password" # Should match the secret configured in the GitHub webhook (github.payload_secret)\n'})}),"\n",(0,t.jsx)(o.p,{children:"After these steps, your Minder server should be ready to receive webhook events from GitHub, and add webhooks to repositories."}),"\n",(0,t.jsxs)(o.p,{children:["In case you need to update the webhook secret, you can do so by putting the\nnew secret in ",(0,t.jsx)(o.code,{children:"webhook-config.webhook_secret"})," and for the duration of the\nmigration, the old secret(s) in a file referenced by\n",(0,t.jsx)(o.code,{children:"webhook-config.previous_webhook_secret_file"}),". The old webhook secrets will\nthen only be used to verify incoming webhooks messages, not for creating or\nupdating webhooks and can be removed after the migration is complete."]}),"\n",(0,t.jsxs)(o.p,{children:["In order to rotate webhook secrets, you can use the ",(0,t.jsx)(o.code,{children:"minder-server"})," CLI tool to update the webhook secret."]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-bash",children:"minder-server webhook update -p github\n"})}),"\n",(0,t.jsx)(o.p,{children:"Note that the command simply replaces the webhook secret on the provider\nside. You will still need to update the webhook secret in the server configuration\nto match the provider's secret."})]})}function a(e={}){const{wrapper:o}={...(0,i.R)(),...e.components};return o?(0,t.jsx)(o,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},28453:(e,o,n)=>{n.d(o,{R:()=>s,x:()=>d});var r=n(96540);const t={},i=r.createContext(t);function s(e){const o=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function d(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),r.createElement(i.Provider,{value:o},e.children)}}}]);