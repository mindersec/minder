# SPDX-FileCopyrightText: Copyright 2024 The Minder Authors
# SPDX-License-Identifier: Apache-2.0

---
version: v1
type: rule-type
name: branch_protection_enabled
context:
  provider: github
description: Verifies that a branch has a branch protection rule
guidance: |
  You can protect important branches by setting branch protection rules, which define whether
  collaborators can delete or force push to the branch and set requirements for any pushes to the branch,
  such as passing status checks or a linear commit history.

  For more information, see
  https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/managing-protected-branches/managing-a-branch-protection-rule
def:
  # Defines the section of the pipeline the rule will appear in.
  # This will affect the template used to render multiple parts
  # of the rule.
  in_entity: repository
  # Defines the schema for parameters that will be passed to the rule
  param_schema:
    properties:
      branch:
        type: string
        description: "The name of the branch to check. If left empty, the default branch will be used."
    required:
      - branch
  rule_schema: {}
  # Defines the configuration for ingesting data relevant for the rule
  ingest:
    type: rest
    rest:
      # This is the path to the data source. Given that this will evaluate
      # for each repository in the organization, we use a template that
      # will be evaluated for each repository. The structure to use is the
      # protobuf structure for the entity that is being evaluated.
      endpoint: '{{ $branch_param := index .Params "branch" }}/repos/{{.Entity.Owner}}/{{.Entity.Name}}/branches/{{if ne $branch_param "" }}{{ $branch_param }}{{ else }}{{ .Entity.DefaultBranch }}{{ end }}/protection'
      # This is the method to use to retrieve the data. It should already default to JSON
      parse: json
      fallback:
        - http_code: 404
          body: |
            {"http_status": 404, "message": "Not Protected"}
  eval:
    type: rego
    rego:
      type: deny-by-default
      def: |
        package minder
        
        import future.keywords.every
        import future.keywords.if
        
        default allow := false
        
        allow if {
          input.ingested.url != ""
        }
  # Defines the configuration for alerting on the rule
  alert:
    type: security_advisory
    security_advisory:
      severity: "medium"
