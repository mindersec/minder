// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: mediator/v1/organisation.proto

package _go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OrganisationService_CreateOrganisation_FullMethodName = "/mediator.v1.OrganisationService/CreateOrganisation"
)

// OrganisationServiceClient is the client API for OrganisationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganisationServiceClient interface {
	CreateOrganisation(ctx context.Context, in *CreateOrganisationRequest, opts ...grpc.CallOption) (*CreateOrganisationResponse, error)
}

type organisationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganisationServiceClient(cc grpc.ClientConnInterface) OrganisationServiceClient {
	return &organisationServiceClient{cc}
}

func (c *organisationServiceClient) CreateOrganisation(ctx context.Context, in *CreateOrganisationRequest, opts ...grpc.CallOption) (*CreateOrganisationResponse, error) {
	out := new(CreateOrganisationResponse)
	err := c.cc.Invoke(ctx, OrganisationService_CreateOrganisation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganisationServiceServer is the server API for OrganisationService service.
// All implementations must embed UnimplementedOrganisationServiceServer
// for forward compatibility
type OrganisationServiceServer interface {
	CreateOrganisation(context.Context, *CreateOrganisationRequest) (*CreateOrganisationResponse, error)
	mustEmbedUnimplementedOrganisationServiceServer()
}

// UnimplementedOrganisationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrganisationServiceServer struct {
}

func (UnimplementedOrganisationServiceServer) CreateOrganisation(context.Context, *CreateOrganisationRequest) (*CreateOrganisationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganisation not implemented")
}
func (UnimplementedOrganisationServiceServer) mustEmbedUnimplementedOrganisationServiceServer() {}

// UnsafeOrganisationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganisationServiceServer will
// result in compilation errors.
type UnsafeOrganisationServiceServer interface {
	mustEmbedUnimplementedOrganisationServiceServer()
}

func RegisterOrganisationServiceServer(s grpc.ServiceRegistrar, srv OrganisationServiceServer) {
	s.RegisterService(&OrganisationService_ServiceDesc, srv)
}

func _OrganisationService_CreateOrganisation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganisationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganisationServiceServer).CreateOrganisation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganisationService_CreateOrganisation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganisationServiceServer).CreateOrganisation(ctx, req.(*CreateOrganisationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganisationService_ServiceDesc is the grpc.ServiceDesc for OrganisationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganisationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mediator.v1.OrganisationService",
	HandlerType: (*OrganisationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganisation",
			Handler:    _OrganisationService_CreateOrganisation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mediator/v1/organisation.proto",
}
