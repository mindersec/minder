//
// Copyright 2023 Stacklok, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: mediator/providers/providers.proto

package providers

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/structpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	_ "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RepoId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The base repo name (like "basename" in linux, i.e. "stacklock/mediator" --> "mediator")
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// On GitHub, this is a user or an organization.  On GitLab, this may be
	// a hierarchical path.
	Parent string `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	// The unique provider ID, generally opaque / not externally meaningful
	// TODO: maybe this should be a string?  See "node_id" vs "databaseId" in GitHub
	Id int32 `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RepoId) Reset() {
	*x = RepoId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mediator_providers_providers_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoId) ProtoMessage() {}

func (x *RepoId) ProtoReflect() protoreflect.Message {
	mi := &file_mediator_providers_providers_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoId.ProtoReflect.Descriptor instead.
func (*RepoId) Descriptor() ([]byte, []int) {
	return file_mediator_providers_providers_proto_rawDescGZIP(), []int{0}
}

func (x *RepoId) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RepoId) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *RepoId) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ArtifactId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The base name of the artifact; unlike RepoId.name, this may contain delimiters
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// TODO: make this an enum?
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Base repository URL in which `name` is interpreted
	RepositoryUrl string `protobuf:"bytes,3,opt,name=repository_url,json=repositoryUrl,proto3" json:"repository_url,omitempty"`
	// The unique provider ID, generally opaque / not externally meaningful
	Id string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ArtifactId) Reset() {
	*x = ArtifactId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mediator_providers_providers_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactId) ProtoMessage() {}

func (x *ArtifactId) ProtoReflect() protoreflect.Message {
	mi := &file_mediator_providers_providers_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactId.ProtoReflect.Descriptor instead.
func (*ArtifactId) Descriptor() ([]byte, []int) {
	return file_mediator_providers_providers_proto_rawDescGZIP(), []int{1}
}

func (x *ArtifactId) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ArtifactId) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ArtifactId) GetRepositoryUrl() string {
	if x != nil {
		return x.RepositoryUrl
	}
	return ""
}

func (x *ArtifactId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RepositoryMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider string  `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	Id       *RepoId `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"` // Keep <16 for repeated / common fields
	// TODO: extract additional common cross-provider fields
	IsPrivate    bool                           `protobuf:"varint,20,opt,name=is_private,json=isPrivate,proto3" json:"is_private,omitempty"`
	IsFork       bool                           `protobuf:"varint,21,opt,name=is_fork,json=isFork,proto3" json:"is_fork,omitempty"`
	StaticChecks *RepositoryMetadata_CodeChecks `protobuf:"bytes,30,opt,name=static_checks,json=staticChecks,proto3" json:"static_checks,omitempty"`
}

func (x *RepositoryMetadata) Reset() {
	*x = RepositoryMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mediator_providers_providers_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryMetadata) ProtoMessage() {}

func (x *RepositoryMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_mediator_providers_providers_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryMetadata.ProtoReflect.Descriptor instead.
func (*RepositoryMetadata) Descriptor() ([]byte, []int) {
	return file_mediator_providers_providers_proto_rawDescGZIP(), []int{2}
}

func (x *RepositoryMetadata) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *RepositoryMetadata) GetId() *RepoId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RepositoryMetadata) GetIsPrivate() bool {
	if x != nil {
		return x.IsPrivate
	}
	return false
}

func (x *RepositoryMetadata) GetIsFork() bool {
	if x != nil {
		return x.IsFork
	}
	return false
}

func (x *RepositoryMetadata) GetStaticChecks() *RepositoryMetadata_CodeChecks {
	if x != nil {
		return x.StaticChecks
	}
	return nil
}

type BuildMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider string `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	// TODO: more fields... can upgrade from bytes to a proto message later!
	BogusBuildId []byte `protobuf:"bytes,2,opt,name=bogus_build_id,json=bogusBuildId,proto3" json:"bogus_build_id,omitempty"`
	// TODO: do we want to separate this into a different call to avoid
	// over-fetching on list?
	Permissions *BuildImportPermissions `protobuf:"bytes,20,opt,name=permissions,proto3" json:"permissions,omitempty"`
}

func (x *BuildMetadata) Reset() {
	*x = BuildMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mediator_providers_providers_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildMetadata) ProtoMessage() {}

func (x *BuildMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_mediator_providers_providers_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildMetadata.ProtoReflect.Descriptor instead.
func (*BuildMetadata) Descriptor() ([]byte, []int) {
	return file_mediator_providers_providers_proto_rawDescGZIP(), []int{3}
}

func (x *BuildMetadata) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *BuildMetadata) GetBogusBuildId() []byte {
	if x != nil {
		return x.BogusBuildId
	}
	return nil
}

func (x *BuildMetadata) GetPermissions() *BuildImportPermissions {
	if x != nil {
		return x.Permissions
	}
	return nil
}

type ArtifactMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider string      `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	Id       *ArtifactId `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ArtifactMetadata) Reset() {
	*x = ArtifactMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mediator_providers_providers_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactMetadata) ProtoMessage() {}

func (x *ArtifactMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_mediator_providers_providers_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactMetadata.ProtoReflect.Descriptor instead.
func (*ArtifactMetadata) Descriptor() ([]byte, []int) {
	return file_mediator_providers_providers_proto_rawDescGZIP(), []int{4}
}

func (x *ArtifactMetadata) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *ArtifactMetadata) GetId() *ArtifactId {
	if x != nil {
		return x.Id
	}
	return nil
}

type BranchProtectionPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider        string                         `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	Id              *RepoId                        `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	BranchPattern   string                         `protobuf:"bytes,3,opt,name=branch_pattern,json=branchPattern,proto3" json:"branch_pattern,omitempty"` // TODO: should this be part of BrachProtectionPolicyId?
	Policy          *BranchProtectionPolicy_Policy `protobuf:"bytes,20,opt,name=policy,proto3" json:"policy,omitempty"`
	MatchedBranches []string                       `protobuf:"bytes,21,rep,name=matched_branches,json=matchedBranches,proto3" json:"matched_branches,omitempty"`
}

func (x *BranchProtectionPolicy) Reset() {
	*x = BranchProtectionPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mediator_providers_providers_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BranchProtectionPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BranchProtectionPolicy) ProtoMessage() {}

func (x *BranchProtectionPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_mediator_providers_providers_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BranchProtectionPolicy.ProtoReflect.Descriptor instead.
func (*BranchProtectionPolicy) Descriptor() ([]byte, []int) {
	return file_mediator_providers_providers_proto_rawDescGZIP(), []int{5}
}

func (x *BranchProtectionPolicy) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *BranchProtectionPolicy) GetId() *RepoId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *BranchProtectionPolicy) GetBranchPattern() string {
	if x != nil {
		return x.BranchPattern
	}
	return ""
}

func (x *BranchProtectionPolicy) GetPolicy() *BranchProtectionPolicy_Policy {
	if x != nil {
		return x.Policy
	}
	return nil
}

func (x *BranchProtectionPolicy) GetMatchedBranches() []string {
	if x != nil {
		return x.MatchedBranches
	}
	return nil
}

type ArtifactVersionId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *ArtifactId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional coordinates for the artifact
	Tags []string `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
	// A released version name, should be unique and immutable
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ArtifactVersionId) Reset() {
	*x = ArtifactVersionId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mediator_providers_providers_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactVersionId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactVersionId) ProtoMessage() {}

func (x *ArtifactVersionId) ProtoReflect() protoreflect.Message {
	mi := &file_mediator_providers_providers_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactVersionId.ProtoReflect.Descriptor instead.
func (*ArtifactVersionId) Descriptor() ([]byte, []int) {
	return file_mediator_providers_providers_proto_rawDescGZIP(), []int{6}
}

func (x *ArtifactVersionId) GetId() *ArtifactId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ArtifactVersionId) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ArtifactVersionId) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type BuildImportPermissions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool `protobuf:"varint,20,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Types that are assignable to DependenciesAllowed:
	//
	//	*BuildImportPermissions_GlobalSetting
	//	*BuildImportPermissions_Exact
	DependenciesAllowed isBuildImportPermissions_DependenciesAllowed `protobuf_oneof:"dependencies_allowed"`
}

func (x *BuildImportPermissions) Reset() {
	*x = BuildImportPermissions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mediator_providers_providers_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildImportPermissions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildImportPermissions) ProtoMessage() {}

func (x *BuildImportPermissions) ProtoReflect() protoreflect.Message {
	mi := &file_mediator_providers_providers_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildImportPermissions.ProtoReflect.Descriptor instead.
func (*BuildImportPermissions) Descriptor() ([]byte, []int) {
	return file_mediator_providers_providers_proto_rawDescGZIP(), []int{7}
}

func (x *BuildImportPermissions) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (m *BuildImportPermissions) GetDependenciesAllowed() isBuildImportPermissions_DependenciesAllowed {
	if m != nil {
		return m.DependenciesAllowed
	}
	return nil
}

func (x *BuildImportPermissions) GetGlobalSetting() string {
	if x, ok := x.GetDependenciesAllowed().(*BuildImportPermissions_GlobalSetting); ok {
		return x.GlobalSetting
	}
	return ""
}

func (x *BuildImportPermissions) GetExact() *BuildImportPermissions_ExactDependencies {
	if x, ok := x.GetDependenciesAllowed().(*BuildImportPermissions_Exact); ok {
		return x.Exact
	}
	return nil
}

type isBuildImportPermissions_DependenciesAllowed interface {
	isBuildImportPermissions_DependenciesAllowed()
}

type BuildImportPermissions_GlobalSetting struct {
	GlobalSetting string `protobuf:"bytes,21,opt,name=global_setting,json=globalSetting,proto3,oneof"`
}

type BuildImportPermissions_Exact struct {
	Exact *BuildImportPermissions_ExactDependencies `protobuf:"bytes,22,opt,name=exact,proto3,oneof"`
}

func (*BuildImportPermissions_GlobalSetting) isBuildImportPermissions_DependenciesAllowed() {}

func (*BuildImportPermissions_Exact) isBuildImportPermissions_DependenciesAllowed() {}

type ArtifactVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider  string                     `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	Id        *ArtifactVersionId         `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Signature *ArtifactVersion_Signature `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *ArtifactVersion) Reset() {
	*x = ArtifactVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mediator_providers_providers_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactVersion) ProtoMessage() {}

func (x *ArtifactVersion) ProtoReflect() protoreflect.Message {
	mi := &file_mediator_providers_providers_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactVersion.ProtoReflect.Descriptor instead.
func (*ArtifactVersion) Descriptor() ([]byte, []int) {
	return file_mediator_providers_providers_proto_rawDescGZIP(), []int{8}
}

func (x *ArtifactVersion) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *ArtifactVersion) GetId() *ArtifactVersionId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ArtifactVersion) GetSignature() *ArtifactVersion_Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type RepositoryMetadata_CodeChecks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecretsInRepo         bool `protobuf:"varint,1,opt,name=secrets_in_repo,json=secretsInRepo,proto3" json:"secrets_in_repo,omitempty"`
	SecretsInPullRequests bool `protobuf:"varint,2,opt,name=secrets_in_pull_requests,json=secretsInPullRequests,proto3" json:"secrets_in_pull_requests,omitempty"`
}

func (x *RepositoryMetadata_CodeChecks) Reset() {
	*x = RepositoryMetadata_CodeChecks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mediator_providers_providers_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryMetadata_CodeChecks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryMetadata_CodeChecks) ProtoMessage() {}

func (x *RepositoryMetadata_CodeChecks) ProtoReflect() protoreflect.Message {
	mi := &file_mediator_providers_providers_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryMetadata_CodeChecks.ProtoReflect.Descriptor instead.
func (*RepositoryMetadata_CodeChecks) Descriptor() ([]byte, []int) {
	return file_mediator_providers_providers_proto_rawDescGZIP(), []int{2, 0}
}

func (x *RepositoryMetadata_CodeChecks) GetSecretsInRepo() bool {
	if x != nil {
		return x.SecretsInRepo
	}
	return false
}

func (x *RepositoryMetadata_CodeChecks) GetSecretsInPullRequests() bool {
	if x != nil {
		return x.SecretsInPullRequests
	}
	return false
}

type BranchProtectionPolicy_Policy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowForcePush         bool   `protobuf:"varint,1,opt,name=allow_force_push,json=allowForcePush,proto3" json:"allow_force_push,omitempty"`
	AllowDeletions         bool   `protobuf:"varint,2,opt,name=allow_deletions,json=allowDeletions,proto3" json:"allow_deletions,omitempty"`
	RequireCodeOwnerReview bool   `protobuf:"varint,3,opt,name=require_code_owner_review,json=requireCodeOwnerReview,proto3" json:"require_code_owner_review,omitempty"`
	RequiredReviewerCount  uint32 `protobuf:"varint,4,opt,name=required_reviewer_count,json=requiredReviewerCount,proto3" json:"required_reviewer_count,omitempty"`
	RequireLinearHistory   bool   `protobuf:"varint,5,opt,name=require_linear_history,json=requireLinearHistory,proto3" json:"require_linear_history,omitempty"`
	RequireRereviewOnPush  bool   `protobuf:"varint,6,opt,name=require_rereview_on_push,json=requireRereviewOnPush,proto3" json:"require_rereview_on_push,omitempty"`
}

func (x *BranchProtectionPolicy_Policy) Reset() {
	*x = BranchProtectionPolicy_Policy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mediator_providers_providers_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BranchProtectionPolicy_Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BranchProtectionPolicy_Policy) ProtoMessage() {}

func (x *BranchProtectionPolicy_Policy) ProtoReflect() protoreflect.Message {
	mi := &file_mediator_providers_providers_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BranchProtectionPolicy_Policy.ProtoReflect.Descriptor instead.
func (*BranchProtectionPolicy_Policy) Descriptor() ([]byte, []int) {
	return file_mediator_providers_providers_proto_rawDescGZIP(), []int{5, 0}
}

func (x *BranchProtectionPolicy_Policy) GetAllowForcePush() bool {
	if x != nil {
		return x.AllowForcePush
	}
	return false
}

func (x *BranchProtectionPolicy_Policy) GetAllowDeletions() bool {
	if x != nil {
		return x.AllowDeletions
	}
	return false
}

func (x *BranchProtectionPolicy_Policy) GetRequireCodeOwnerReview() bool {
	if x != nil {
		return x.RequireCodeOwnerReview
	}
	return false
}

func (x *BranchProtectionPolicy_Policy) GetRequiredReviewerCount() uint32 {
	if x != nil {
		return x.RequiredReviewerCount
	}
	return 0
}

func (x *BranchProtectionPolicy_Policy) GetRequireLinearHistory() bool {
	if x != nil {
		return x.RequireLinearHistory
	}
	return false
}

func (x *BranchProtectionPolicy_Policy) GetRequireRereviewOnPush() bool {
	if x != nil {
		return x.RequireRereviewOnPush
	}
	return false
}

type BuildImportPermissions_ExactDependencies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Allowed []string `protobuf:"bytes,2,rep,name=allowed,proto3" json:"allowed,omitempty"`
}

func (x *BuildImportPermissions_ExactDependencies) Reset() {
	*x = BuildImportPermissions_ExactDependencies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mediator_providers_providers_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildImportPermissions_ExactDependencies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildImportPermissions_ExactDependencies) ProtoMessage() {}

func (x *BuildImportPermissions_ExactDependencies) ProtoReflect() protoreflect.Message {
	mi := &file_mediator_providers_providers_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildImportPermissions_ExactDependencies.ProtoReflect.Descriptor instead.
func (*BuildImportPermissions_ExactDependencies) Descriptor() ([]byte, []int) {
	return file_mediator_providers_providers_proto_rawDescGZIP(), []int{7, 0}
}

func (x *BuildImportPermissions_ExactDependencies) GetAllowed() []string {
	if x != nil {
		return x.Allowed
	}
	return nil
}

type ArtifactVersion_Signature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exists   bool              `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
	Verified bool              `protobuf:"varint,2,opt,name=verified,proto3" json:"verified,omitempty"`
	Metadata map[string]string `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ArtifactVersion_Signature) Reset() {
	*x = ArtifactVersion_Signature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mediator_providers_providers_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactVersion_Signature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactVersion_Signature) ProtoMessage() {}

func (x *ArtifactVersion_Signature) ProtoReflect() protoreflect.Message {
	mi := &file_mediator_providers_providers_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactVersion_Signature.ProtoReflect.Descriptor instead.
func (*ArtifactVersion_Signature) Descriptor() ([]byte, []int) {
	return file_mediator_providers_providers_proto_rawDescGZIP(), []int{8, 0}
}

func (x *ArtifactVersion_Signature) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

func (x *ArtifactVersion_Signature) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *ArtifactVersion_Signature) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

var File_mediator_providers_providers_proto protoreflect.FileDescriptor

var file_mediator_providers_providers_proto_rawDesc = []byte{
	0x0a, 0x22, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x44, 0x0a, 0x06, 0x52, 0x65, 0x70, 0x6f, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x6b, 0x0a, 0x0a, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xdb, 0x02, 0x0a, 0x12, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x72,
	0x6b, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x6b, 0x12,
	0x56, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x1a, 0x6d, 0x0a, 0x0a, 0x43, 0x6f, 0x64, 0x65, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73,
	0x5f, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x49, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x37, 0x0a,
	0x18, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x75, 0x6c, 0x6c,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x15, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x49, 0x6e, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x9f, 0x01, 0x0a, 0x0d, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x6f, 0x67, 0x75, 0x73, 0x5f, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x62, 0x6f,
	0x67, 0x75, 0x73, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0b, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x5e, 0x0a, 0x10, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x22, 0xbd, 0x04, 0x0a, 0x16, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12,
	0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x12, 0x49, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x50, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x29, 0x0a,
	0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65,
	0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x1a, 0xbd, 0x02, 0x0a, 0x06, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x50, 0x75, 0x73, 0x68, 0x12, 0x27, 0x0a,
	0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x15, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x52, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x5f, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x37, 0x0a, 0x18, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x5f, 0x6f, 0x6e, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x15, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x52, 0x65, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x4f, 0x6e, 0x50, 0x75, 0x73, 0x68, 0x22, 0x71, 0x0a, 0x11, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xf8, 0x01, 0x0a, 0x16,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x27, 0x0a, 0x0e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x54, 0x0a, 0x05, 0x65, 0x78, 0x61,
	0x63, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x78, 0x61, 0x63, 0x74, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52, 0x05, 0x65, 0x78, 0x61, 0x63, 0x74, 0x1a,
	0x2d, 0x0a, 0x11, 0x45, 0x78, 0x61, 0x63, 0x74, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e,
	0x63, 0x69, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x42, 0x16,
	0x0a, 0x14, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x22, 0x89, 0x03, 0x0a, 0x0f, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4b, 0x0a,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x1a, 0xd5, 0x01, 0x0a, 0x09, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x57, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x42, 0x42, 0x5a, 0x40, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x6b, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74,
	0x6f, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mediator_providers_providers_proto_rawDescOnce sync.Once
	file_mediator_providers_providers_proto_rawDescData = file_mediator_providers_providers_proto_rawDesc
)

func file_mediator_providers_providers_proto_rawDescGZIP() []byte {
	file_mediator_providers_providers_proto_rawDescOnce.Do(func() {
		file_mediator_providers_providers_proto_rawDescData = protoimpl.X.CompressGZIP(file_mediator_providers_providers_proto_rawDescData)
	})
	return file_mediator_providers_providers_proto_rawDescData
}

var file_mediator_providers_providers_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_mediator_providers_providers_proto_goTypes = []interface{}{
	(*RepoId)(nil),                                   // 0: mediator.providers.RepoId
	(*ArtifactId)(nil),                               // 1: mediator.providers.ArtifactId
	(*RepositoryMetadata)(nil),                       // 2: mediator.providers.RepositoryMetadata
	(*BuildMetadata)(nil),                            // 3: mediator.providers.BuildMetadata
	(*ArtifactMetadata)(nil),                         // 4: mediator.providers.ArtifactMetadata
	(*BranchProtectionPolicy)(nil),                   // 5: mediator.providers.BranchProtectionPolicy
	(*ArtifactVersionId)(nil),                        // 6: mediator.providers.ArtifactVersionId
	(*BuildImportPermissions)(nil),                   // 7: mediator.providers.BuildImportPermissions
	(*ArtifactVersion)(nil),                          // 8: mediator.providers.ArtifactVersion
	(*RepositoryMetadata_CodeChecks)(nil),            // 9: mediator.providers.RepositoryMetadata.CodeChecks
	(*BranchProtectionPolicy_Policy)(nil),            // 10: mediator.providers.BranchProtectionPolicy.Policy
	(*BuildImportPermissions_ExactDependencies)(nil), // 11: mediator.providers.BuildImportPermissions.ExactDependencies
	(*ArtifactVersion_Signature)(nil),                // 12: mediator.providers.ArtifactVersion.Signature
	nil,                                              // 13: mediator.providers.ArtifactVersion.Signature.MetadataEntry
}
var file_mediator_providers_providers_proto_depIdxs = []int32{
	0,  // 0: mediator.providers.RepositoryMetadata.id:type_name -> mediator.providers.RepoId
	9,  // 1: mediator.providers.RepositoryMetadata.static_checks:type_name -> mediator.providers.RepositoryMetadata.CodeChecks
	7,  // 2: mediator.providers.BuildMetadata.permissions:type_name -> mediator.providers.BuildImportPermissions
	1,  // 3: mediator.providers.ArtifactMetadata.id:type_name -> mediator.providers.ArtifactId
	0,  // 4: mediator.providers.BranchProtectionPolicy.id:type_name -> mediator.providers.RepoId
	10, // 5: mediator.providers.BranchProtectionPolicy.policy:type_name -> mediator.providers.BranchProtectionPolicy.Policy
	1,  // 6: mediator.providers.ArtifactVersionId.id:type_name -> mediator.providers.ArtifactId
	11, // 7: mediator.providers.BuildImportPermissions.exact:type_name -> mediator.providers.BuildImportPermissions.ExactDependencies
	6,  // 8: mediator.providers.ArtifactVersion.id:type_name -> mediator.providers.ArtifactVersionId
	12, // 9: mediator.providers.ArtifactVersion.signature:type_name -> mediator.providers.ArtifactVersion.Signature
	13, // 10: mediator.providers.ArtifactVersion.Signature.metadata:type_name -> mediator.providers.ArtifactVersion.Signature.MetadataEntry
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_mediator_providers_providers_proto_init() }
func file_mediator_providers_providers_proto_init() {
	if File_mediator_providers_providers_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mediator_providers_providers_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepoId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mediator_providers_providers_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mediator_providers_providers_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mediator_providers_providers_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mediator_providers_providers_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mediator_providers_providers_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BranchProtectionPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mediator_providers_providers_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactVersionId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mediator_providers_providers_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildImportPermissions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mediator_providers_providers_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mediator_providers_providers_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryMetadata_CodeChecks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mediator_providers_providers_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BranchProtectionPolicy_Policy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mediator_providers_providers_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildImportPermissions_ExactDependencies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mediator_providers_providers_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactVersion_Signature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_mediator_providers_providers_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*BuildImportPermissions_GlobalSetting)(nil),
		(*BuildImportPermissions_Exact)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mediator_providers_providers_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mediator_providers_providers_proto_goTypes,
		DependencyIndexes: file_mediator_providers_providers_proto_depIdxs,
		MessageInfos:      file_mediator_providers_providers_proto_msgTypes,
	}.Build()
	File_mediator_providers_providers_proto = out.File
	file_mediator_providers_providers_proto_rawDesc = nil
	file_mediator_providers_providers_proto_goTypes = nil
	file_mediator_providers_providers_proto_depIdxs = nil
}
