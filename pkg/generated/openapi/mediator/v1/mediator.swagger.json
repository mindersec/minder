{
  "swagger": "2.0",
  "info": {
    "title": "mediator/v1/mediator.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "HealthService"
    },
    {
      "name": "OAuthService"
    },
    {
      "name": "AuthService"
    },
    {
      "name": "VulnerabilitiesService"
    },
    {
      "name": "SecretsService"
    },
    {
      "name": "RepositoryService"
    },
    {
      "name": "BranchProtectionService"
    },
    {
      "name": "OrganizationService"
    },
    {
      "name": "GroupService"
    },
    {
      "name": "RoleService"
    },
    {
      "name": "UserService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/v1/auth/callback/{provider}/cli": {
      "get": {
        "summary": "buf:lint:ignore RPC_RESPONSE_STANDARD_NAME",
        "operationId": "OAuthService_ExchangeCodeForTokenCLI",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiHttpBody"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "groupId",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "code",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "state",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "redirectUri",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "OAuthService"
        ]
      }
    },
    "/api/v1/auth/callback/{provider}/web": {
      "get": {
        "operationId": "OAuthService_ExchangeCodeForTokenWEB",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ExchangeCodeForTokenWEBResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "groupId",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "code",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "redirectUri",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "OAuthService"
        ]
      }
    },
    "/api/v1/auth/login": {
      "post": {
        "summary": "LogIn to Mediator",
        "operationId": "AuthService_LogIn",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1LogInResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1LogInRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/v1/auth/logout": {
      "post": {
        "summary": "Logout of Mediator",
        "operationId": "AuthService_LogOut",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1LogOutResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1LogOutRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/v1/auth/refresh": {
      "post": {
        "summary": "refresh a token",
        "operationId": "AuthService_RefreshToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RefreshTokenResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1RefreshTokenRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/v1/auth/revoke": {
      "post": {
        "summary": "revoke all tokens for all users",
        "operationId": "AuthService_RevokeTokens",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RevokeTokensResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1RevokeTokensRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/v1/auth/revoke/{userId}": {
      "post": {
        "summary": "revoke token for an user",
        "operationId": "AuthService_RevokeUserToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RevokeUserTokenResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/v1/auth/url": {
      "get": {
        "operationId": "OAuthService_GetAuthorizationURL",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetAuthorizationURLResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "provider",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "groupId",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "cli",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "port",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "OAuthService"
        ]
      }
    },
    "/api/v1/auth/verify": {
      "get": {
        "summary": "Verify user has active session to Mediator",
        "operationId": "AuthService_Verify",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1VerifyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/v1/auth/verify/{provider}/{timestamp}": {
      "get": {
        "summary": "VerifyProviderTokenFrom verifies that a token has been created for a provider since given timestamp",
        "operationId": "OAuthService_VerifyProviderTokenFrom",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1VerifyProviderTokenFromResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "timestamp",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "groupId",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "OAuthService"
        ]
      }
    },
    "/api/v1/auth/{provider}/revoke": {
      "post": {
        "summary": "revoke all tokens for all users",
        "operationId": "OAuthService_RevokeOauthTokens",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RevokeOauthTokensResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "tags": [
          "OAuthService"
        ]
      }
    },
    "/api/v1/auth/{provider}/revoke/{groupId}": {
      "post": {
        "summary": "revoke token for a group",
        "operationId": "OAuthService_RevokeOauthGroupToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RevokeOauthGroupTokenResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "tags": [
          "OAuthService"
        ]
      }
    },
    "/api/v1/auth/{provider}/token": {
      "post": {
        "operationId": "OAuthService_StoreProviderToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1StoreProviderTokenResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "groupId": {
                  "type": "integer",
                  "format": "int32"
                },
                "accessToken": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "tags": [
          "OAuthService"
        ]
      }
    },
    "/api/v1/branchprotection": {
      "get": {
        "operationId": "BranchProtectionService_GetBranchProtection",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetBranchProtectionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "BranchProtectionService"
        ]
      }
    },
    "/api/v1/group": {
      "post": {
        "operationId": "GroupService_CreateGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateGroupRequest"
            }
          }
        ],
        "tags": [
          "GroupService"
        ]
      }
    },
    "/api/v1/group/id/{groupId}": {
      "get": {
        "operationId": "GroupService_GetGroupById",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetGroupByIdResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "GroupService"
        ]
      }
    },
    "/api/v1/group/name/{name}": {
      "get": {
        "operationId": "GroupService_GetGroupByName",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetGroupByNameResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "GroupService"
        ]
      }
    },
    "/api/v1/group/{id}": {
      "delete": {
        "operationId": "GroupService_DeleteGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "GroupService"
        ]
      }
    },
    "/api/v1/groups/{organizationId}": {
      "get": {
        "operationId": "GroupService_GetGroups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetGroupsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "GroupService"
        ]
      }
    },
    "/api/v1/health": {
      "get": {
        "operationId": "HealthService_CheckHealth",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CheckHealthResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "HealthService"
        ]
      }
    },
    "/api/v1/organization": {
      "post": {
        "operationId": "OrganizationService_CreateOrganization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateOrganizationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateOrganizationRequest"
            }
          }
        ],
        "tags": [
          "OrganizationService"
        ]
      }
    },
    "/api/v1/organization/{id}": {
      "delete": {
        "operationId": "OrganizationService_DeleteOrganization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteOrganizationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "OrganizationService"
        ]
      }
    },
    "/api/v1/organizations": {
      "get": {
        "operationId": "OrganizationService_GetOrganizations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetOrganizationsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "OrganizationService"
        ]
      }
    },
    "/api/v1/organizations/name/{name}": {
      "get": {
        "operationId": "OrganizationService_GetOrganizationByName",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetOrganizationByNameResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "OrganizationService"
        ]
      }
    },
    "/api/v1/organizations/{organizationId}": {
      "get": {
        "operationId": "OrganizationService_GetOrganization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetOrganizationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "OrganizationService"
        ]
      }
    },
    "/api/v1/repositories": {
      "get": {
        "operationId": "RepositoryService_ListRepositories",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListRepositoriesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "groupId",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filterRegistered",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "RepositoryService"
        ]
      }
    },
    "/api/v1/repository": {
      "post": {
        "operationId": "RepositoryService_RegisterRepository",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RegisterRepositoryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1RegisterRepositoryRequest"
            }
          }
        ],
        "tags": [
          "RepositoryService"
        ]
      }
    },
    "/api/v1/role/group": {
      "post": {
        "operationId": "RoleService_CreateRoleByGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateRoleByGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateRoleByGroupRequest"
            }
          }
        ],
        "tags": [
          "RoleService"
        ]
      }
    },
    "/api/v1/role/name/{name}": {
      "get": {
        "operationId": "RoleService_GetRoleByName",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetRoleByNameResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "organizationId",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "RoleService"
        ]
      }
    },
    "/api/v1/role/organization": {
      "post": {
        "operationId": "RoleService_CreateRoleByOrganization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateRoleByOrganizationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateRoleByOrganizationRequest"
            }
          }
        ],
        "tags": [
          "RoleService"
        ]
      }
    },
    "/api/v1/role/{id}": {
      "get": {
        "operationId": "RoleService_GetRoleById",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetRoleByIdResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "RoleService"
        ]
      },
      "delete": {
        "operationId": "RoleService_DeleteRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteRoleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "RoleService"
        ]
      }
    },
    "/api/v1/roles/group/{groupId}": {
      "get": {
        "operationId": "RoleService_GetRolesByGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetRolesByGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "RoleService"
        ]
      }
    },
    "/api/v1/roles/{organizationId}": {
      "get": {
        "operationId": "RoleService_GetRoles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetRolesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "RoleService"
        ]
      }
    },
    "/api/v1/secrets": {
      "get": {
        "operationId": "SecretsService_GetSecrets",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetSecretsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "SecretsService"
        ]
      }
    },
    "/api/v1/secrets/{id}": {
      "get": {
        "operationId": "SecretsService_GetSecretById",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetSecretByIdResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "SecretsService"
        ]
      }
    },
    "/api/v1/user": {
      "get": {
        "operationId": "UserService_GetUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "UserService"
        ]
      },
      "post": {
        "operationId": "UserService_CreateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateUserRequest"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/api/v1/user/email/{email}": {
      "get": {
        "operationId": "UserService_GetUserByEmail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetUserByEmailResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/api/v1/user/password": {
      "post": {
        "operationId": "UserService_UpdatePassword",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdatePasswordResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdatePasswordRequest"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/api/v1/user/profile": {
      "post": {
        "operationId": "UserService_UpdateProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateProfileResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateProfileRequest"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/api/v1/user/username/{username}": {
      "get": {
        "operationId": "UserService_GetUserByUserName",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetUserByUserNameResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/api/v1/user/{id}": {
      "get": {
        "operationId": "UserService_GetUserById",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetUserByIdResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "UserService"
        ]
      },
      "delete": {
        "operationId": "UserService_DeleteUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/api/v1/users": {
      "get": {
        "operationId": "UserService_GetUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetUsersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/api/v1/users/{groupId}": {
      "get": {
        "operationId": "UserService_GetUsersByGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetUsersByGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/api/v1/users/{organizationId}": {
      "get": {
        "operationId": "UserService_GetUsersByOrganization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetUsersByOrganizationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/api/v1/vulns": {
      "get": {
        "operationId": "VulnerabilitiesService_GetVulnerabilities",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetVulnerabilitiesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "VulnerabilitiesService"
        ]
      }
    },
    "/api/v1/vulns/{id}": {
      "get": {
        "operationId": "VulnerabilitiesService_GetVulnerabilityById",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetVulnerabilityByIdResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "VulnerabilitiesService"
        ]
      }
    }
  },
  "definitions": {
    "apiHttpBody": {
      "type": "object",
      "properties": {
        "contentType": {
          "type": "string",
          "description": "The HTTP Content-Type header value specifying the content type of the body."
        },
        "data": {
          "type": "string",
          "format": "byte",
          "description": "The HTTP request/response body as raw binary."
        },
        "extensions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          },
          "description": "Application specific response metadata. Must be set in the first response\nfor streaming APIs."
        }
      },
      "description": "Message that represents an arbitrary HTTP body. It should only be used for\npayload formats that can't be represented as JSON, such as raw binary or\nan HTML page.\n\n\nThis message can be used both in streaming and non-streaming API methods in\nthe request as well as the response.\n\nIt can be used as a top-level request field, which is convenient if one\nwants to extract parameters from either the URL or HTTP template into the\nrequest fields and also want access to the raw HTTP body.\n\nExample:\n\n    message GetResourceRequest {\n      // A unique request id.\n      string request_id = 1;\n\n      // The raw HTTP body is bound to this field.\n      google.api.HttpBody http_body = 2;\n\n    }\n\n    service ResourceService {\n      rpc GetResource(GetResourceRequest)\n        returns (google.api.HttpBody);\n      rpc UpdateResource(google.api.HttpBody)\n        returns (google.protobuf.Empty);\n\n    }\n\nExample with streaming methods:\n\n    service CaldavService {\n      rpc GetCalendar(stream google.api.HttpBody)\n        returns (stream google.api.HttpBody);\n      rpc UpdateCalendar(stream google.api.HttpBody)\n        returns (stream google.api.HttpBody);\n\n    }\n\nUse of this type only changes how the request and response bodies are\nhandled, all other features will continue to work unchanged."
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1BranchProtection": {
      "type": "object",
      "properties": {
        "branch": {
          "type": "string"
        },
        "isProtected": {
          "type": "boolean",
          "title": "Add other relevant fields"
        }
      }
    },
    "v1CheckHealthResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        }
      }
    },
    "v1CreateGroupRequest": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "isProtected": {
          "type": "boolean"
        }
      },
      "title": "The CreateGroupRequest message represents a request to create a group"
    },
    "v1CreateGroupResponse": {
      "type": "object",
      "properties": {
        "groupId": {
          "type": "integer",
          "format": "int32"
        },
        "organizationId": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "isProtected": {
          "type": "boolean"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1CreateOrganizationRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "company": {
          "type": "string"
        },
        "createDefaultRecords": {
          "type": "boolean"
        }
      },
      "title": "Organization service"
    },
    "v1CreateOrganizationResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "company": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "defaultGroup": {
          "$ref": "#/definitions/v1GroupRecord"
        },
        "defaultRoles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RoleRecord"
          }
        },
        "defaultUser": {
          "$ref": "#/definitions/v1UserRecord"
        }
      }
    },
    "v1CreateRoleByGroupRequest": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "integer",
          "format": "int32"
        },
        "groupId": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "isAdmin": {
          "type": "boolean"
        },
        "isProtected": {
          "type": "boolean"
        }
      }
    },
    "v1CreateRoleByGroupResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "organizationId": {
          "type": "integer",
          "format": "int32"
        },
        "groupId": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "isAdmin": {
          "type": "boolean"
        },
        "isProtected": {
          "type": "boolean"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1CreateRoleByOrganizationRequest": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "isAdmin": {
          "type": "boolean"
        },
        "isProtected": {
          "type": "boolean"
        }
      },
      "title": "Role service"
    },
    "v1CreateRoleByOrganizationResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "organizationId": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "isAdmin": {
          "type": "boolean"
        },
        "isProtected": {
          "type": "boolean"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1CreateUserRequest": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "integer",
          "format": "int32"
        },
        "email": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "isProtected": {
          "type": "boolean"
        },
        "needsPasswordChange": {
          "type": "boolean"
        },
        "groupIds": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "roleIds": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "title": "User service"
    },
    "v1CreateUserResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "organizationId": {
          "type": "integer",
          "format": "int32"
        },
        "email": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "isProtected": {
          "type": "boolean"
        },
        "needsPasswordChange": {
          "type": "boolean"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1DeleteGroupResponse": {
      "type": "object",
      "title": "DeleteGroupResponse represents a response to a delete group request"
    },
    "v1DeleteOrganizationResponse": {
      "type": "object",
      "title": "DeleteOrganizationResponse represents a response to a delete organization request"
    },
    "v1DeleteRoleResponse": {
      "type": "object"
    },
    "v1DeleteUserResponse": {
      "type": "object"
    },
    "v1ExchangeCodeForTokenWEBResponse": {
      "type": "object",
      "properties": {
        "accessToken": {
          "type": "string"
        },
        "tokenType": {
          "type": "string"
        },
        "expiresIn": {
          "type": "string",
          "format": "int64"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "v1GetAuthorizationURLResponse": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        }
      }
    },
    "v1GetBranchProtectionResponse": {
      "type": "object",
      "properties": {
        "branchProtections": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BranchProtection"
          }
        }
      }
    },
    "v1GetGroupByIdResponse": {
      "type": "object",
      "properties": {
        "group": {
          "$ref": "#/definitions/v1GroupRecord"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RoleRecord"
          }
        },
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UserRecord"
          }
        }
      }
    },
    "v1GetGroupByNameResponse": {
      "type": "object",
      "properties": {
        "group": {
          "$ref": "#/definitions/v1GroupRecord"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RoleRecord"
          }
        },
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UserRecord"
          }
        }
      }
    },
    "v1GetGroupsResponse": {
      "type": "object",
      "properties": {
        "groups": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1GroupRecord"
          }
        }
      },
      "title": "The GetGroupsResponse message represents a response with an array of groups"
    },
    "v1GetOrganizationByNameResponse": {
      "type": "object",
      "properties": {
        "organization": {
          "$ref": "#/definitions/v1OrganizationRecord"
        },
        "groups": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1GroupRecord"
          }
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RoleRecord"
          }
        },
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UserRecord"
          }
        }
      }
    },
    "v1GetOrganizationResponse": {
      "type": "object",
      "properties": {
        "organization": {
          "$ref": "#/definitions/v1OrganizationRecord"
        },
        "groups": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1GroupRecord"
          }
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RoleRecord"
          }
        },
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UserRecord"
          }
        }
      }
    },
    "v1GetOrganizationsResponse": {
      "type": "object",
      "properties": {
        "organizations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OrganizationRecord"
          }
        }
      }
    },
    "v1GetRoleByIdResponse": {
      "type": "object",
      "properties": {
        "role": {
          "$ref": "#/definitions/v1RoleRecord"
        }
      }
    },
    "v1GetRoleByNameResponse": {
      "type": "object",
      "properties": {
        "role": {
          "$ref": "#/definitions/v1RoleRecord"
        }
      }
    },
    "v1GetRolesByGroupResponse": {
      "type": "object",
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RoleRecord"
          }
        }
      }
    },
    "v1GetRolesResponse": {
      "type": "object",
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RoleRecord"
          }
        }
      }
    },
    "v1GetSecretByIdResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string",
          "title": "Add other relevant fields"
        }
      }
    },
    "v1GetSecretsResponse": {
      "type": "object",
      "properties": {
        "secrets": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1GetSecretByIdResponse"
          }
        }
      }
    },
    "v1GetUserByEmailResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/v1UserRecord"
        },
        "groups": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1GroupRecord"
          }
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RoleRecord"
          }
        }
      }
    },
    "v1GetUserByIdResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/v1UserRecord"
        },
        "groups": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1GroupRecord"
          }
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RoleRecord"
          }
        }
      }
    },
    "v1GetUserByUserNameResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/v1UserRecord"
        },
        "groups": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1GroupRecord"
          }
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RoleRecord"
          }
        }
      }
    },
    "v1GetUserResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/v1UserRecord"
        },
        "groups": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1GroupRecord"
          }
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RoleRecord"
          }
        }
      }
    },
    "v1GetUsersByGroupResponse": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UserRecord"
          }
        }
      }
    },
    "v1GetUsersByOrganizationResponse": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UserRecord"
          }
        }
      }
    },
    "v1GetUsersResponse": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UserRecord"
          }
        }
      }
    },
    "v1GetVulnerabilitiesResponse": {
      "type": "object",
      "properties": {
        "vulns": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1GetVulnerabilityByIdResponse"
          }
        }
      }
    },
    "v1GetVulnerabilityByIdResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64",
          "title": "May require adjustment, currently set up for GitHub Security Advisories only"
        },
        "githubId": {
          "type": "string",
          "format": "int64"
        },
        "repoId": {
          "type": "string",
          "format": "int64"
        },
        "repoName": {
          "type": "string"
        },
        "packageName": {
          "type": "string"
        },
        "severity": {
          "type": "string"
        },
        "versionAffected": {
          "type": "string"
        },
        "upgradeVersion": {
          "type": "string"
        },
        "ghsaid": {
          "type": "string"
        },
        "advisroyUrl": {
          "type": "string"
        },
        "scannedAt": {
          "type": "string",
          "format": "date-time"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1GroupRecord": {
      "type": "object",
      "properties": {
        "groupId": {
          "type": "integer",
          "format": "int32"
        },
        "organizationId": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "isProtected": {
          "type": "boolean"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "BUF does not allow grouping (which is a shame)"
    },
    "v1ListRepositoriesResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Repositories"
          }
        }
      }
    },
    "v1LogInRequest": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "v1LogInResponse": {
      "type": "object",
      "properties": {
        "refreshToken": {
          "type": "string"
        },
        "accessToken": {
          "type": "string"
        },
        "refreshTokenExpiresIn": {
          "type": "string",
          "format": "int64"
        },
        "accessTokenExpiresIn": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1LogOutRequest": {
      "type": "object"
    },
    "v1LogOutResponse": {
      "type": "object"
    },
    "v1OrganizationRecord": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "company": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1RefreshTokenRequest": {
      "type": "object"
    },
    "v1RefreshTokenResponse": {
      "type": "object",
      "properties": {
        "accessToken": {
          "type": "string"
        },
        "accessTokenExpiresIn": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1RegisterRepositoryRequest": {
      "type": "object",
      "properties": {
        "repositories": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Repositories"
          }
        },
        "events": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "groupId": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1RegisterRepositoryResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RepositoryResult"
          }
        }
      }
    },
    "v1Repositories": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "repoId": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1RepositoryResult": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string"
        },
        "repository": {
          "type": "string"
        },
        "repoId": {
          "type": "integer",
          "format": "int32"
        },
        "hookId": {
          "type": "string",
          "format": "int64"
        },
        "hookUrl": {
          "type": "string"
        },
        "deployUrl": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "hookName": {
          "type": "string"
        },
        "hookType": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "uuid": {
          "type": "string"
        },
        "error": {
          "type": "string"
        }
      }
    },
    "v1RevokeOauthGroupTokenResponse": {
      "type": "object"
    },
    "v1RevokeOauthTokensResponse": {
      "type": "object",
      "properties": {
        "revokedTokens": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1RevokeTokensRequest": {
      "type": "object"
    },
    "v1RevokeTokensResponse": {
      "type": "object"
    },
    "v1RevokeUserTokenResponse": {
      "type": "object"
    },
    "v1RoleRecord": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "organizationId": {
          "type": "integer",
          "format": "int32"
        },
        "groupId": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "isAdmin": {
          "type": "boolean"
        },
        "isProtected": {
          "type": "boolean"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1StoreProviderTokenResponse": {
      "type": "object"
    },
    "v1UpdatePasswordRequest": {
      "type": "object",
      "properties": {
        "password": {
          "type": "string"
        },
        "passwordConfirmation": {
          "type": "string"
        }
      }
    },
    "v1UpdatePasswordResponse": {
      "type": "object"
    },
    "v1UpdateProfileRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        }
      }
    },
    "v1UpdateProfileResponse": {
      "type": "object"
    },
    "v1UserRecord": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "organizationId": {
          "type": "integer",
          "format": "int32"
        },
        "email": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "isProtected": {
          "type": "boolean"
        },
        "needsPasswordChange": {
          "type": "boolean"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "user record to be returned"
    },
    "v1VerifyProviderTokenFromResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        }
      }
    },
    "v1VerifyResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        }
      }
    }
  }
}
