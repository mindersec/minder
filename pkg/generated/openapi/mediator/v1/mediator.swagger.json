{
  "swagger": "2.0",
  "info": {
    "title": "mediator/v1/mediator.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "HealthService"
    },
    {
      "name": "OAuthService"
    },
    {
      "name": "AuthService"
    },
    {
      "name": "VulnerabilitiesService"
    },
    {
      "name": "SecretsService"
    },
    {
      "name": "RepositoryService"
    },
    {
      "name": "BranchProtectionService"
    },
    {
      "name": "OrganizationService"
    },
    {
      "name": "GroupService"
    },
    {
      "name": "RoleService"
    },
    {
      "name": "UserService"
    },
    {
      "name": "PolicyService"
    },
    {
      "name": "KeyService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/v1/auth/callback/{provider}/cli": {
      "get": {
        "operationId": "OAuthService_ExchangeCodeForTokenCLI",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ExchangeCodeForTokenCLIResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "groupId",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "code",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "state",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "redirectUri",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "OAuthService"
        ]
      }
    },
    "/api/v1/auth/callback/{provider}/web": {
      "get": {
        "operationId": "OAuthService_ExchangeCodeForTokenWEB",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ExchangeCodeForTokenWEBResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "groupId",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "code",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "redirectUri",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "OAuthService"
        ]
      }
    },
    "/api/v1/auth/login": {
      "post": {
        "summary": "LogIn to Mediator",
        "operationId": "AuthService_LogIn",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1LogInResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1LogInRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/v1/auth/logout": {
      "post": {
        "summary": "Logout of Mediator",
        "operationId": "AuthService_LogOut",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1LogOutResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1LogOutRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/v1/auth/refresh": {
      "post": {
        "summary": "refresh a token",
        "operationId": "AuthService_RefreshToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RefreshTokenResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1RefreshTokenRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/v1/auth/revoke": {
      "post": {
        "summary": "revoke all tokens for all users",
        "operationId": "AuthService_RevokeTokens",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RevokeTokensResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1RevokeTokensRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/v1/auth/revoke/{userId}": {
      "post": {
        "summary": "revoke token for an user",
        "operationId": "AuthService_RevokeUserToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RevokeUserTokenResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/v1/auth/url": {
      "get": {
        "operationId": "OAuthService_GetAuthorizationURL",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetAuthorizationURLResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "provider",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "groupId",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "cli",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "port",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "OAuthService"
        ]
      }
    },
    "/api/v1/auth/verify": {
      "get": {
        "summary": "Verify user has active session to Mediator",
        "operationId": "AuthService_Verify",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1VerifyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/v1/auth/verify/{provider}/{timestamp}": {
      "get": {
        "summary": "VerifyProviderTokenFrom verifies that a token has been created for a provider since given timestamp",
        "operationId": "OAuthService_VerifyProviderTokenFrom",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1VerifyProviderTokenFromResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "timestamp",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "groupId",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "OAuthService"
        ]
      }
    },
    "/api/v1/auth/{provider}/revoke": {
      "post": {
        "summary": "revoke all tokens for all users",
        "operationId": "OAuthService_RevokeOauthTokens",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RevokeOauthTokensResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "tags": [
          "OAuthService"
        ]
      }
    },
    "/api/v1/auth/{provider}/revoke/{groupId}": {
      "post": {
        "summary": "revoke token for a group",
        "operationId": "OAuthService_RevokeOauthGroupToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RevokeOauthGroupTokenResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "tags": [
          "OAuthService"
        ]
      }
    },
    "/api/v1/auth/{provider}/token": {
      "post": {
        "operationId": "OAuthService_StoreProviderToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1StoreProviderTokenResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "groupId": {
                  "type": "integer",
                  "format": "int32"
                },
                "accessToken": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "tags": [
          "OAuthService"
        ]
      }
    },
    "/api/v1/branchprotection": {
      "get": {
        "operationId": "BranchProtectionService_GetBranchProtection",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetBranchProtectionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "BranchProtectionService"
        ]
      }
    },
    "/api/v1/group": {
      "post": {
        "operationId": "GroupService_CreateGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateGroupRequest"
            }
          }
        ],
        "tags": [
          "GroupService"
        ]
      }
    },
    "/api/v1/group/id/{groupId}": {
      "get": {
        "operationId": "GroupService_GetGroupById",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetGroupByIdResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "GroupService"
        ]
      }
    },
    "/api/v1/group/name/{name}": {
      "get": {
        "operationId": "GroupService_GetGroupByName",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetGroupByNameResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "GroupService"
        ]
      }
    },
    "/api/v1/group/{id}": {
      "delete": {
        "operationId": "GroupService_DeleteGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "GroupService"
        ]
      }
    },
    "/api/v1/groups/{organizationId}": {
      "get": {
        "operationId": "GroupService_GetGroups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetGroupsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "GroupService"
        ]
      }
    },
    "/api/v1/health": {
      "get": {
        "operationId": "HealthService_CheckHealth",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CheckHealthResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "HealthService"
        ]
      }
    },
    "/api/v1/key": {
      "get": {
        "operationId": "KeyService_GetPublicKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetPublicKeyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "keyIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "KeyService"
        ]
      },
      "post": {
        "operationId": "KeyService_CreateKeyPair",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateKeyPairResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateKeyPairRequest"
            }
          }
        ],
        "tags": [
          "KeyService"
        ]
      }
    },
    "/api/v1/organization": {
      "post": {
        "operationId": "OrganizationService_CreateOrganization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateOrganizationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateOrganizationRequest"
            }
          }
        ],
        "tags": [
          "OrganizationService"
        ]
      }
    },
    "/api/v1/organization/{id}": {
      "delete": {
        "operationId": "OrganizationService_DeleteOrganization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteOrganizationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "OrganizationService"
        ]
      }
    },
    "/api/v1/organizations": {
      "get": {
        "operationId": "OrganizationService_GetOrganizations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetOrganizationsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "OrganizationService"
        ]
      }
    },
    "/api/v1/organizations/name/{name}": {
      "get": {
        "operationId": "OrganizationService_GetOrganizationByName",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetOrganizationByNameResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "OrganizationService"
        ]
      }
    },
    "/api/v1/organizations/{organizationId}": {
      "get": {
        "operationId": "OrganizationService_GetOrganization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetOrganizationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "OrganizationService"
        ]
      }
    },
    "/api/v1/policies": {
      "get": {
        "operationId": "PolicyService_ListPolicies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListPoliciesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "context.provider",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "context.organization",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "context.group",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PolicyService"
        ]
      }
    },
    "/api/v1/policy": {
      "post": {
        "operationId": "PolicyService_CreatePolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreatePolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreatePolicyRequest"
            }
          }
        ],
        "tags": [
          "PolicyService"
        ]
      }
    },
    "/api/v1/policy/{id}": {
      "get": {
        "operationId": "PolicyService_GetPolicyById",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetPolicyByIdResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "id is the id of the policy to get",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "context.provider",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "context.organization",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "context.group",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PolicyService"
        ]
      },
      "delete": {
        "operationId": "PolicyService_DeletePolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeletePolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "id is the id of the policy to delete",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "context.provider",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "context.organization",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "context.group",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PolicyService"
        ]
      }
    },
    "/api/v1/policy/{policyId}/status": {
      "get": {
        "operationId": "PolicyService_GetPolicyStatusById",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetPolicyStatusByIdResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "policyId",
            "description": "id is the id of the policy to get",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "context.provider",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "context.organization",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "context.group",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "all",
            "description": "all is a flag to indicate if all rule statuses should be returned",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "PolicyService"
        ]
      }
    },
    "/api/v1/policy_status": {
      "get": {
        "operationId": "PolicyService_GetPolicyStatusByGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetPolicyStatusByGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "context.provider",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "context.organization",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "context.group",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PolicyService"
        ]
      }
    },
    "/api/v1/repositories": {
      "get": {
        "operationId": "RepositoryService_ListRepositories",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListRepositoriesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "provider",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "groupId",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "REPO_FILTER_SHOW_UNSPECIFIED",
              "REPO_FILTER_SHOW_ALL",
              "REPO_FILTER_SHOW_NOT_REGISTERED_ONLY",
              "REPO_FILTER_SHOW_REGISTERED_ONLY"
            ],
            "default": "REPO_FILTER_SHOW_UNSPECIFIED"
          }
        ],
        "tags": [
          "RepositoryService"
        ]
      }
    },
    "/api/v1/repository": {
      "post": {
        "operationId": "RepositoryService_RegisterRepository",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RegisterRepositoryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1RegisterRepositoryRequest"
            }
          }
        ],
        "tags": [
          "RepositoryService"
        ]
      }
    },
    "/api/v1/repository/provider/{provider}/name/{name}": {
      "get": {
        "operationId": "RepositoryService_GetRepositoryByName",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetRepositoryByNameResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "RepositoryService"
        ]
      }
    },
    "/api/v1/repository/{repositoryId}": {
      "get": {
        "operationId": "RepositoryService_GetRepositoryById",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetRepositoryByIdResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "repositoryId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "RepositoryService"
        ]
      }
    },
    "/api/v1/role/group": {
      "post": {
        "operationId": "RoleService_CreateRoleByGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateRoleByGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateRoleByGroupRequest"
            }
          }
        ],
        "tags": [
          "RoleService"
        ]
      }
    },
    "/api/v1/role/name/{name}": {
      "get": {
        "operationId": "RoleService_GetRoleByName",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetRoleByNameResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "organizationId",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "RoleService"
        ]
      }
    },
    "/api/v1/role/organization": {
      "post": {
        "operationId": "RoleService_CreateRoleByOrganization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateRoleByOrganizationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateRoleByOrganizationRequest"
            }
          }
        ],
        "tags": [
          "RoleService"
        ]
      }
    },
    "/api/v1/role/{id}": {
      "get": {
        "operationId": "RoleService_GetRoleById",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetRoleByIdResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "RoleService"
        ]
      },
      "delete": {
        "operationId": "RoleService_DeleteRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteRoleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "RoleService"
        ]
      }
    },
    "/api/v1/roles/group/{groupId}": {
      "get": {
        "operationId": "RoleService_GetRolesByGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetRolesByGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "RoleService"
        ]
      }
    },
    "/api/v1/roles/{organizationId}": {
      "get": {
        "operationId": "RoleService_GetRoles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetRolesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "RoleService"
        ]
      }
    },
    "/api/v1/rule_type": {
      "post": {
        "operationId": "PolicyService_CreateRuleType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateRuleTypeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "CreateRuleTypeRequest is the request to create a rule type.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateRuleTypeRequest"
            }
          }
        ],
        "tags": [
          "PolicyService"
        ]
      },
      "put": {
        "operationId": "PolicyService_UpdateRuleType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateRuleTypeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "UpdateRuleTypeRequest is the request to update a rule type.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateRuleTypeRequest"
            }
          }
        ],
        "tags": [
          "PolicyService"
        ]
      }
    },
    "/api/v1/rule_type/name/{name}": {
      "get": {
        "operationId": "PolicyService_GetRuleTypeByName",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetRuleTypeByNameResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "name is the name of the rule type.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "context.provider",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "context.organization",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "context.group",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PolicyService"
        ]
      }
    },
    "/api/v1/rule_type/{id}": {
      "get": {
        "operationId": "PolicyService_GetRuleTypeById",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetRuleTypeByIdResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "id is the id of the rule type.",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "context.provider",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "context.organization",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "context.group",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PolicyService"
        ]
      },
      "delete": {
        "operationId": "PolicyService_DeleteRuleType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteRuleTypeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "id is the id of the rule type to be deleted.",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "context.provider",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "context.organization",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "context.group",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PolicyService"
        ]
      }
    },
    "/api/v1/rule_types": {
      "get": {
        "operationId": "PolicyService_ListRuleTypes",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListRuleTypesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "context.provider",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "context.organization",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "context.group",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PolicyService"
        ]
      }
    },
    "/api/v1/secrets": {
      "get": {
        "operationId": "SecretsService_GetSecrets",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetSecretsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "SecretsService"
        ]
      }
    },
    "/api/v1/secrets/{id}": {
      "get": {
        "operationId": "SecretsService_GetSecretById",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetSecretByIdResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "SecretsService"
        ]
      }
    },
    "/api/v1/user": {
      "get": {
        "operationId": "UserService_GetUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "UserService"
        ]
      },
      "post": {
        "operationId": "UserService_CreateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateUserRequest"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/api/v1/user/email/{email}": {
      "get": {
        "operationId": "UserService_GetUserByEmail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetUserByEmailResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/api/v1/user/password": {
      "post": {
        "operationId": "UserService_UpdatePassword",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdatePasswordResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdatePasswordRequest"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/api/v1/user/profile": {
      "post": {
        "operationId": "UserService_UpdateProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateProfileResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateProfileRequest"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/api/v1/user/username/{username}": {
      "get": {
        "operationId": "UserService_GetUserByUserName",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetUserByUserNameResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/api/v1/user/{id}": {
      "get": {
        "operationId": "UserService_GetUserById",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetUserByIdResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "UserService"
        ]
      },
      "delete": {
        "operationId": "UserService_DeleteUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/api/v1/users": {
      "get": {
        "operationId": "UserService_GetUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetUsersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/api/v1/users/{groupId}": {
      "get": {
        "operationId": "UserService_GetUsersByGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetUsersByGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/api/v1/users/{organizationId}": {
      "get": {
        "operationId": "UserService_GetUsersByOrganization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetUsersByOrganizationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/api/v1/vulns": {
      "get": {
        "operationId": "VulnerabilitiesService_GetVulnerabilities",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetVulnerabilitiesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "VulnerabilitiesService"
        ]
      }
    },
    "/api/v1/vulns/{id}": {
      "get": {
        "operationId": "VulnerabilitiesService_GetVulnerabilityById",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetVulnerabilityByIdResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "VulnerabilitiesService"
        ]
      }
    }
  },
  "definitions": {
    "DataEvalDataEvalDef": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "type is the type of the data evaluation."
        },
        "def": {
          "type": "string",
          "description": "def is the definition of the data evaluation."
        }
      },
      "description": "DataEvalDef defines the data evaluation definition.\nThis pertains to the way we traverse data from the upstream\nendpoint and how we compare it to the rule.\nthe type is the way we traverse and evaluate the data from the\nupstream endpoint. The def is the definition of the data evaluation.\ne.g. the actual jq expression."
    },
    "DataEvalRestType": {
      "type": "object",
      "properties": {
        "endpoint": {
          "type": "string",
          "description": "endpoint is the endpoint to fetch data from.\nThis can be a URL or the path on the API.bool\nThis is a required field and must be set.\nThis is also evaluated via a template which allows\nus dynamically fill in the values."
        },
        "method": {
          "type": "string",
          "description": "method is the method to use to fetch data."
        },
        "headers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "headers are the headers to be sent to the endpoint."
        },
        "body": {
          "type": "string",
          "description": "body is the body to be sent to the endpoint."
        },
        "parse": {
          "type": "string",
          "description": "parse is the parsing mechanism to be used to parse the data."
        }
      },
      "description": "RestType defines the rest data evaluation.\nThis is used to fetch data from a REST endpoint."
    },
    "DefinitionDataEval": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "type is the type of the data evaluation.\nwe currently support rest."
        },
        "rest": {
          "$ref": "#/definitions/DataEvalRestType",
          "description": "rest is the rest data evaluation.\nthis is only used if the type is rest."
        },
        "keyType": {
          "type": "string",
          "description": "key_type is the type of the key for each data item.\nThis is used to index the data.\nCurrently only `jq` is supported."
        },
        "data": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/DataEvalDataEvalDef"
          },
          "description": "data is the data evaluation definition.\neach key is a piece of data coming from the policy\nto be evaluated. The value is the definition of the data evaluation."
        }
      },
      "description": "DataEval defines how the data is evaluated."
    },
    "PipelinePolicyContextualRuleSet": {
      "type": "object",
      "properties": {
        "context": {
          "type": "string",
          "description": "context is the context in which the rules are evaluated.\nThis refers to the provider."
        },
        "rules": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/PipelinePolicyRule"
          },
          "description": "rule is the set of rules that are evaluated."
        }
      },
      "description": "ContextualRuleSet defines a set of rules that are evaluated in a certain context."
    },
    "PipelinePolicyRule": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "type is the type of the rule to be instantiated."
        },
        "params": {
          "type": "object",
          "description": "params are the parameters that are passed to the rule.\nThis is optional and depends on the rule type."
        },
        "def": {
          "type": "object",
          "description": "def is the definition of the rule.\nThis depends on the rule type."
        }
      },
      "description": "Rule defines the individual call of a certain rule type."
    },
    "mediatorv1Context": {
      "type": "object",
      "properties": {
        "provider": {
          "type": "string"
        },
        "organization": {
          "type": "string"
        },
        "group": {
          "type": "string"
        }
      },
      "description": "Context defines the context in which a rule is evaluated.\nthis normally refers to a combination of the provider, organization and group."
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "protobufNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\n The JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1BranchProtection": {
      "type": "object",
      "properties": {
        "branch": {
          "type": "string"
        },
        "isProtected": {
          "type": "boolean",
          "title": "Add other relevant fields"
        }
      }
    },
    "v1CheckHealthResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        }
      }
    },
    "v1CreateGroupRequest": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "isProtected": {
          "type": "boolean"
        }
      },
      "title": "The CreateGroupRequest message represents a request to create a group"
    },
    "v1CreateGroupResponse": {
      "type": "object",
      "properties": {
        "groupId": {
          "type": "integer",
          "format": "int32"
        },
        "organizationId": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "isProtected": {
          "type": "boolean"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1CreateKeyPairRequest": {
      "type": "object",
      "properties": {
        "passphrase": {
          "type": "string"
        },
        "groupId": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1CreateKeyPairResponse": {
      "type": "object",
      "properties": {
        "keyIdentifier": {
          "type": "string"
        },
        "publicKey": {
          "type": "string"
        }
      }
    },
    "v1CreateOrganizationRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "company": {
          "type": "string"
        },
        "createDefaultRecords": {
          "type": "boolean"
        }
      },
      "title": "Organization service"
    },
    "v1CreateOrganizationResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "company": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "defaultGroup": {
          "$ref": "#/definitions/v1GroupRecord"
        },
        "defaultRoles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RoleRecord"
          }
        },
        "defaultUser": {
          "$ref": "#/definitions/v1UserRecord"
        }
      }
    },
    "v1CreatePolicyRequest": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/v1PipelinePolicy"
        }
      },
      "title": "Policy service"
    },
    "v1CreatePolicyResponse": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/v1PipelinePolicy"
        }
      }
    },
    "v1CreateRoleByGroupRequest": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "integer",
          "format": "int32"
        },
        "groupId": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "isAdmin": {
          "type": "boolean"
        },
        "isProtected": {
          "type": "boolean"
        }
      }
    },
    "v1CreateRoleByGroupResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "organizationId": {
          "type": "integer",
          "format": "int32"
        },
        "groupId": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "isAdmin": {
          "type": "boolean"
        },
        "isProtected": {
          "type": "boolean"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1CreateRoleByOrganizationRequest": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "isAdmin": {
          "type": "boolean"
        },
        "isProtected": {
          "type": "boolean"
        }
      },
      "title": "Role service"
    },
    "v1CreateRoleByOrganizationResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "organizationId": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "isAdmin": {
          "type": "boolean"
        },
        "isProtected": {
          "type": "boolean"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1CreateRuleTypeRequest": {
      "type": "object",
      "properties": {
        "ruleType": {
          "$ref": "#/definitions/v1RuleType",
          "description": "rule_type is the rule type to be created."
        }
      },
      "description": "CreateRuleTypeRequest is the request to create a rule type."
    },
    "v1CreateRuleTypeResponse": {
      "type": "object",
      "properties": {
        "ruleType": {
          "$ref": "#/definitions/v1RuleType",
          "description": "rule_type is the rule type that was created."
        }
      },
      "description": "CreateRuleTypeResponse is the response to create a rule type."
    },
    "v1CreateUserRequest": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "integer",
          "format": "int32"
        },
        "email": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "isProtected": {
          "type": "boolean"
        },
        "needsPasswordChange": {
          "type": "boolean"
        },
        "groupIds": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "roleIds": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "title": "User service"
    },
    "v1CreateUserResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "organizationId": {
          "type": "integer",
          "format": "int32"
        },
        "email": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "isProtected": {
          "type": "boolean"
        },
        "needsPasswordChange": {
          "type": "boolean"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1DeleteGroupResponse": {
      "type": "object",
      "title": "DeleteGroupResponse represents a response to a delete group request"
    },
    "v1DeleteOrganizationResponse": {
      "type": "object",
      "title": "DeleteOrganizationResponse represents a response to a delete organization request"
    },
    "v1DeletePolicyResponse": {
      "type": "object"
    },
    "v1DeleteRoleResponse": {
      "type": "object"
    },
    "v1DeleteRuleTypeResponse": {
      "type": "object",
      "description": "DeleteRuleTypeResponse is the response to delete a rule type."
    },
    "v1DeleteUserResponse": {
      "type": "object"
    },
    "v1ExchangeCodeForTokenCLIResponse": {
      "type": "object",
      "properties": {
        "html": {
          "type": "string"
        }
      }
    },
    "v1ExchangeCodeForTokenWEBResponse": {
      "type": "object",
      "properties": {
        "accessToken": {
          "type": "string"
        },
        "tokenType": {
          "type": "string"
        },
        "expiresIn": {
          "type": "string",
          "format": "int64"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "v1GetAuthorizationURLResponse": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        }
      }
    },
    "v1GetBranchProtectionResponse": {
      "type": "object",
      "properties": {
        "branchProtections": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BranchProtection"
          }
        }
      }
    },
    "v1GetGroupByIdResponse": {
      "type": "object",
      "properties": {
        "group": {
          "$ref": "#/definitions/v1GroupRecord"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RoleRecord"
          }
        },
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UserRecord"
          }
        }
      }
    },
    "v1GetGroupByNameResponse": {
      "type": "object",
      "properties": {
        "group": {
          "$ref": "#/definitions/v1GroupRecord"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RoleRecord"
          }
        },
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UserRecord"
          }
        }
      }
    },
    "v1GetGroupsResponse": {
      "type": "object",
      "properties": {
        "groups": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1GroupRecord"
          }
        }
      },
      "title": "The GetGroupsResponse message represents a response with an array of groups"
    },
    "v1GetOrganizationByNameResponse": {
      "type": "object",
      "properties": {
        "organization": {
          "$ref": "#/definitions/v1OrganizationRecord"
        },
        "groups": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1GroupRecord"
          }
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RoleRecord"
          }
        },
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UserRecord"
          }
        }
      }
    },
    "v1GetOrganizationResponse": {
      "type": "object",
      "properties": {
        "organization": {
          "$ref": "#/definitions/v1OrganizationRecord"
        },
        "groups": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1GroupRecord"
          }
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RoleRecord"
          }
        },
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UserRecord"
          }
        }
      }
    },
    "v1GetOrganizationsResponse": {
      "type": "object",
      "properties": {
        "organizations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OrganizationRecord"
          }
        }
      }
    },
    "v1GetPolicyByIdResponse": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/v1PipelinePolicy"
        }
      }
    },
    "v1GetPolicyStatusByGroupResponse": {
      "type": "object",
      "properties": {
        "policyStatus": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PolicyStatus"
          },
          "title": "policy_status is the status of the policy"
        }
      }
    },
    "v1GetPolicyStatusByIdResponse": {
      "type": "object",
      "properties": {
        "policyStatus": {
          "$ref": "#/definitions/v1PolicyStatus",
          "title": "policy_status is the status of the policy"
        },
        "ruleEvaluationStatus": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RuleEvaluationStatus"
          },
          "title": "rule_evaluation_status is the status of the rules"
        }
      }
    },
    "v1GetPublicKeyResponse": {
      "type": "object",
      "properties": {
        "publicKey": {
          "type": "string"
        }
      }
    },
    "v1GetRepositoryByIdResponse": {
      "type": "object",
      "properties": {
        "repository": {
          "$ref": "#/definitions/v1RepositoryRecord"
        }
      }
    },
    "v1GetRepositoryByNameResponse": {
      "type": "object",
      "properties": {
        "repository": {
          "$ref": "#/definitions/v1RepositoryRecord"
        }
      }
    },
    "v1GetRoleByIdResponse": {
      "type": "object",
      "properties": {
        "role": {
          "$ref": "#/definitions/v1RoleRecord"
        }
      }
    },
    "v1GetRoleByNameResponse": {
      "type": "object",
      "properties": {
        "role": {
          "$ref": "#/definitions/v1RoleRecord"
        }
      }
    },
    "v1GetRolesByGroupResponse": {
      "type": "object",
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RoleRecord"
          }
        }
      }
    },
    "v1GetRolesResponse": {
      "type": "object",
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RoleRecord"
          }
        }
      }
    },
    "v1GetRuleTypeByIdResponse": {
      "type": "object",
      "properties": {
        "ruleType": {
          "$ref": "#/definitions/v1RuleType",
          "description": "rule_type is the rule type."
        }
      },
      "description": "GetRuleTypeByIdResponse is the response to get a rule type by id."
    },
    "v1GetRuleTypeByNameResponse": {
      "type": "object",
      "properties": {
        "ruleType": {
          "$ref": "#/definitions/v1RuleType",
          "description": "rule_type is the rule type."
        }
      },
      "description": "GetRuleTypeByNameResponse is the response to get a rule type by name."
    },
    "v1GetSecretByIdResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string",
          "title": "Add other relevant fields"
        }
      }
    },
    "v1GetSecretsResponse": {
      "type": "object",
      "properties": {
        "secrets": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1GetSecretByIdResponse"
          }
        }
      }
    },
    "v1GetUserByEmailResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/v1UserRecord"
        },
        "groups": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1GroupRecord"
          }
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RoleRecord"
          }
        }
      }
    },
    "v1GetUserByIdResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/v1UserRecord"
        },
        "groups": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1GroupRecord"
          }
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RoleRecord"
          }
        }
      }
    },
    "v1GetUserByUserNameResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/v1UserRecord"
        },
        "groups": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1GroupRecord"
          }
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RoleRecord"
          }
        }
      }
    },
    "v1GetUserResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/v1UserRecord"
        },
        "groups": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1GroupRecord"
          }
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RoleRecord"
          }
        }
      }
    },
    "v1GetUsersByGroupResponse": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UserRecord"
          }
        }
      }
    },
    "v1GetUsersByOrganizationResponse": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UserRecord"
          }
        }
      }
    },
    "v1GetUsersResponse": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UserRecord"
          }
        }
      }
    },
    "v1GetVulnerabilitiesResponse": {
      "type": "object",
      "properties": {
        "vulns": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1GetVulnerabilityByIdResponse"
          }
        }
      }
    },
    "v1GetVulnerabilityByIdResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64",
          "title": "May require adjustment, currently set up for GitHub Security Advisories only"
        },
        "githubId": {
          "type": "string",
          "format": "int64"
        },
        "repoId": {
          "type": "string",
          "format": "int64"
        },
        "repoName": {
          "type": "string"
        },
        "packageName": {
          "type": "string"
        },
        "severity": {
          "type": "string"
        },
        "versionAffected": {
          "type": "string"
        },
        "upgradeVersion": {
          "type": "string"
        },
        "ghsaid": {
          "type": "string"
        },
        "advisroyUrl": {
          "type": "string"
        },
        "scannedAt": {
          "type": "string",
          "format": "date-time"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1GroupRecord": {
      "type": "object",
      "properties": {
        "groupId": {
          "type": "integer",
          "format": "int32"
        },
        "organizationId": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "isProtected": {
          "type": "boolean"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "BUF does not allow grouping (which is a shame)"
    },
    "v1ListPoliciesResponse": {
      "type": "object",
      "properties": {
        "policies": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PipelinePolicy"
          }
        }
      }
    },
    "v1ListRepositoriesResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RepositoryRecord"
          }
        }
      }
    },
    "v1ListRuleTypesResponse": {
      "type": "object",
      "properties": {
        "ruleTypes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RuleType"
          },
          "description": "rule_types is the list of rule types."
        }
      },
      "description": "ListRuleTypesResponse is the response to list rule types."
    },
    "v1LogInRequest": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "v1LogInResponse": {
      "type": "object",
      "properties": {
        "refreshToken": {
          "type": "string"
        },
        "accessToken": {
          "type": "string"
        },
        "refreshTokenExpiresIn": {
          "type": "string",
          "format": "int64"
        },
        "accessTokenExpiresIn": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1LogOutRequest": {
      "type": "object"
    },
    "v1LogOutResponse": {
      "type": "object"
    },
    "v1OrganizationRecord": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "company": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1PipelinePolicy": {
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/mediatorv1Context",
          "description": "context is the context in which the policy is evaluated."
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id is the id of the policy.\nThis is optional and is set by the system."
        },
        "name": {
          "type": "string",
          "description": "name is the name of the policy instance."
        },
        "repository": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/PipelinePolicyContextualRuleSet"
          },
          "description": "These are the entities that one could set in the pipeline policy."
        },
        "buildEnvironment": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/PipelinePolicyContextualRuleSet"
          }
        },
        "artifact": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/PipelinePolicyContextualRuleSet"
          }
        }
      },
      "description": "PipelinePolicy defines a policy that is user defined."
    },
    "v1PolicyStatus": {
      "type": "object",
      "properties": {
        "policyId": {
          "type": "integer",
          "format": "int32",
          "title": "policy_id is the id of the policy"
        },
        "policyName": {
          "type": "string",
          "title": "policy_name is the name of the policy"
        },
        "policyStatus": {
          "type": "string",
          "title": "policy_status is the status of the policy"
        },
        "lastUpdated": {
          "type": "string",
          "format": "date-time",
          "title": "last_updated is the last time the policy was updated"
        }
      },
      "title": "get the overall policy status"
    },
    "v1RefreshTokenRequest": {
      "type": "object"
    },
    "v1RefreshTokenResponse": {
      "type": "object",
      "properties": {
        "accessToken": {
          "type": "string"
        },
        "accessTokenExpiresIn": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1RegisterRepositoryRequest": {
      "type": "object",
      "properties": {
        "provider": {
          "type": "string"
        },
        "groupId": {
          "type": "integer",
          "format": "int32"
        },
        "repositories": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Repositories"
          }
        },
        "events": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1RegisterRepositoryResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RepositoryResult"
          }
        }
      }
    },
    "v1RepoFilter": {
      "type": "string",
      "enum": [
        "REPO_FILTER_SHOW_UNSPECIFIED",
        "REPO_FILTER_SHOW_ALL",
        "REPO_FILTER_SHOW_NOT_REGISTERED_ONLY",
        "REPO_FILTER_SHOW_REGISTERED_ONLY"
      ],
      "default": "REPO_FILTER_SHOW_UNSPECIFIED",
      "title": "Repo filter enum"
    },
    "v1Repositories": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "repoId": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1RepositoryRecord": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "provider": {
          "type": "string"
        },
        "groupId": {
          "type": "integer",
          "format": "int32"
        },
        "owner": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "repoId": {
          "type": "integer",
          "format": "int32"
        },
        "isPrivate": {
          "type": "boolean"
        },
        "isFork": {
          "type": "boolean"
        },
        "hookUrl": {
          "type": "string"
        },
        "deployUrl": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "description": "RepositoryRecord is used for registering repositories."
    },
    "v1RepositoryResult": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string"
        },
        "repository": {
          "type": "string"
        },
        "repoId": {
          "type": "integer",
          "format": "int32"
        },
        "hookId": {
          "type": "string",
          "format": "int64"
        },
        "hookUrl": {
          "type": "string"
        },
        "deployUrl": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "hookName": {
          "type": "string"
        },
        "hookType": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "uuid": {
          "type": "string"
        },
        "error": {
          "type": "string"
        },
        "registered": {
          "type": "boolean"
        }
      }
    },
    "v1RevokeOauthGroupTokenResponse": {
      "type": "object"
    },
    "v1RevokeOauthTokensResponse": {
      "type": "object",
      "properties": {
        "revokedTokens": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1RevokeTokensRequest": {
      "type": "object"
    },
    "v1RevokeTokensResponse": {
      "type": "object"
    },
    "v1RevokeUserTokenResponse": {
      "type": "object"
    },
    "v1RoleRecord": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "organizationId": {
          "type": "integer",
          "format": "int32"
        },
        "groupId": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "isAdmin": {
          "type": "boolean"
        },
        "isProtected": {
          "type": "boolean"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1RuleEvaluationStatus": {
      "type": "object",
      "properties": {
        "policyId": {
          "type": "integer",
          "format": "int32",
          "title": "policy_id is the id of the policy"
        },
        "ruleId": {
          "type": "integer",
          "format": "int32",
          "title": "rule_id is the id of the rule"
        },
        "ruleName": {
          "type": "string",
          "title": "rule_name is the name of the rule"
        },
        "entity": {
          "type": "string",
          "title": "entity is the entity that was evaluated"
        },
        "status": {
          "type": "string",
          "title": "status is the status of the evaluation"
        },
        "lastUpdated": {
          "type": "string",
          "format": "date-time",
          "title": "last_updated is the last time the policy was updated"
        },
        "entityInfo": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "entity_info is the information about the entity"
        },
        "details": {
          "type": "string",
          "title": "details is the description of the evaluation if any"
        }
      },
      "title": "get the status of the rules for a given policy"
    },
    "v1RuleType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id is the id of the rule type.\nThis is mostly optional and is set by the server."
        },
        "name": {
          "type": "string",
          "description": "name is the name of the rule type."
        },
        "context": {
          "$ref": "#/definitions/mediatorv1Context",
          "description": "context is the context in which the rule is evaluated."
        },
        "def": {
          "$ref": "#/definitions/v1RuleTypeDefinition",
          "description": "def is the definition of the rule type."
        }
      },
      "description": "RuleType defines rules that may or may not be user defined.\nThe version is assumed from the folder's version."
    },
    "v1RuleTypeDefinition": {
      "type": "object",
      "properties": {
        "inEntity": {
          "type": "string",
          "description": "in_entity is the entity in which the rule is evaluated.\nThis can be repository, build_environment or artifact."
        },
        "ruleSchema": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "description": "rule_schema is the schema of the rule. This is expressed in JSON Schema."
        },
        "dataEval": {
          "$ref": "#/definitions/DefinitionDataEval"
        }
      },
      "description": "Definition defines the rule type. It encompases the schema and the data evaluation."
    },
    "v1StoreProviderTokenResponse": {
      "type": "object"
    },
    "v1UpdatePasswordRequest": {
      "type": "object",
      "properties": {
        "password": {
          "type": "string"
        },
        "passwordConfirmation": {
          "type": "string"
        }
      }
    },
    "v1UpdatePasswordResponse": {
      "type": "object"
    },
    "v1UpdateProfileRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        }
      }
    },
    "v1UpdateProfileResponse": {
      "type": "object"
    },
    "v1UpdateRuleTypeRequest": {
      "type": "object",
      "properties": {
        "ruleType": {
          "$ref": "#/definitions/v1RuleType",
          "description": "rule_type is the rule type to be updated."
        }
      },
      "description": "UpdateRuleTypeRequest is the request to update a rule type."
    },
    "v1UpdateRuleTypeResponse": {
      "type": "object",
      "properties": {
        "ruleType": {
          "$ref": "#/definitions/v1RuleType",
          "description": "rule_type is the rule type that was updated."
        }
      },
      "description": "UpdateRuleTypeResponse is the response to update a rule type."
    },
    "v1UserRecord": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "organizationId": {
          "type": "integer",
          "format": "int32"
        },
        "email": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "isProtected": {
          "type": "boolean"
        },
        "needsPasswordChange": {
          "type": "boolean"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "user record to be returned"
    },
    "v1VerifyProviderTokenFromResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        }
      }
    },
    "v1VerifyResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        }
      }
    }
  }
}
