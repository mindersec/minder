// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: groups.sql

package db

import (
	"context"
	"database/sql"
)

const createGroup = `-- name: CreateGroup :one
INSERT INTO groups (
    organisation_id,
    name,
    description,
    is_protected
    ) VALUES (
        $1, $2, $3, $4
) RETURNING id, organisation_id, name, description, is_protected, created_at, updated_at
`

type CreateGroupParams struct {
	OrganisationID int32          `json:"organisation_id"`
	Name           string         `json:"name"`
	Description    sql.NullString `json:"description"`
	IsProtected    bool           `json:"is_protected"`
}

func (q *Queries) CreateGroup(ctx context.Context, arg CreateGroupParams) (Group, error) {
	row := q.db.QueryRowContext(ctx, createGroup,
		arg.OrganisationID,
		arg.Name,
		arg.Description,
		arg.IsProtected,
	)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.OrganisationID,
		&i.Name,
		&i.Description,
		&i.IsProtected,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteGroup = `-- name: DeleteGroup :exec
DELETE FROM groups
WHERE id = $1
`

func (q *Queries) DeleteGroup(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteGroup, id)
	return err
}

const getGroupByID = `-- name: GetGroupByID :one
SELECT id, organisation_id, name, description, is_protected, created_at, updated_at FROM groups WHERE id = $1
`

func (q *Queries) GetGroupByID(ctx context.Context, id int32) (Group, error) {
	row := q.db.QueryRowContext(ctx, getGroupByID, id)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.OrganisationID,
		&i.Name,
		&i.Description,
		&i.IsProtected,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getGroupByName = `-- name: GetGroupByName :one
SELECT id, organisation_id, name, description, is_protected, created_at, updated_at FROM groups WHERE name = $1
`

func (q *Queries) GetGroupByName(ctx context.Context, name string) (Group, error) {
	row := q.db.QueryRowContext(ctx, getGroupByName, name)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.OrganisationID,
		&i.Name,
		&i.Description,
		&i.IsProtected,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listGroups = `-- name: ListGroups :many
SELECT id, organisation_id, name, description, is_protected, created_at, updated_at FROM groups
WHERE organisation_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListGroupsParams struct {
	OrganisationID int32 `json:"organisation_id"`
	Limit          int32 `json:"limit"`
	Offset         int32 `json:"offset"`
}

func (q *Queries) ListGroups(ctx context.Context, arg ListGroupsParams) ([]Group, error) {
	rows, err := q.db.QueryContext(ctx, listGroups, arg.OrganisationID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Group{}
	for rows.Next() {
		var i Group
		if err := rows.Scan(
			&i.ID,
			&i.OrganisationID,
			&i.Name,
			&i.Description,
			&i.IsProtected,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGroup = `-- name: UpdateGroup :one
UPDATE groups 
SET organisation_id = $2, name = $3, description = $4, is_protected = $5, updated_at = NOW() 
WHERE id = $1 RETURNING id, organisation_id, name, description, is_protected, created_at, updated_at
`

type UpdateGroupParams struct {
	ID             int32          `json:"id"`
	OrganisationID int32          `json:"organisation_id"`
	Name           string         `json:"name"`
	Description    sql.NullString `json:"description"`
	IsProtected    bool           `json:"is_protected"`
}

func (q *Queries) UpdateGroup(ctx context.Context, arg UpdateGroupParams) (Group, error) {
	row := q.db.QueryRowContext(ctx, updateGroup,
		arg.ID,
		arg.OrganisationID,
		arg.Name,
		arg.Description,
		arg.IsProtected,
	)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.OrganisationID,
		&i.Name,
		&i.Description,
		&i.IsProtected,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
