// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: users.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (email, int_id, salted_password, created_at)
VALUES ($1, $2, $3, $4)
RETURNING id
`

type CreateUserParams struct {
	Email          string         `json:"email"`
	IntID          string         `json:"int_id"`
	SaltedPassword sql.NullString `json:"salted_password"`
	CreatedAt      sql.NullTime   `json:"created_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.exec(ctx, q.createUserStmt, createUser,
		arg.Email,
		arg.IntID,
		arg.SaltedPassword,
		arg.CreatedAt,
	)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, name, avatar_url, int_id, salted_password, created_at, updated_at, oauth_token FROM users
WHERE email = $1
LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.queryRow(ctx, q.getUserByEmailStmt, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.AvatarUrl,
		&i.IntID,
		&i.SaltedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OauthToken,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, name, avatar_url, int_id, salted_password, created_at, updated_at, oauth_token FROM users
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.queryRow(ctx, q.getUserByIDStmt, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.AvatarUrl,
		&i.IntID,
		&i.SaltedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OauthToken,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, email, name, avatar_url, int_id, salted_password, created_at, updated_at, oauth_token FROM users
ORDER BY created_at DESC
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.query(ctx, q.listUsersStmt, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Name,
			&i.AvatarUrl,
			&i.IntID,
			&i.SaltedPassword,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.OauthToken,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
