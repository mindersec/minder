// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: organisations.sql

package db

import (
	"context"
)

const createOrganisation = `-- name: CreateOrganisation :one
INSERT INTO organisations (
    name,
    company
) VALUES (
    $1, $2
) RETURNING id, name, company, root_admin_id, created_at, updated_at
`

type CreateOrganisationParams struct {
	Name    string `json:"name"`
	Company string `json:"company"`
}

func (q *Queries) CreateOrganisation(ctx context.Context, arg CreateOrganisationParams) (Organisation, error) {
	row := q.db.QueryRowContext(ctx, createOrganisation, arg.Name, arg.Company)
	var i Organisation
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Company,
		&i.RootAdminID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteOrganisation = `-- name: DeleteOrganisation :exec
DELETE FROM organisations
WHERE id = $1
`

func (q *Queries) DeleteOrganisation(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteOrganisation, id)
	return err
}

const getOrganisation = `-- name: GetOrganisation :one
SELECT id, name, company, root_admin_id, created_at, updated_at FROM organisations 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetOrganisation(ctx context.Context, id int32) (Organisation, error) {
	row := q.db.QueryRowContext(ctx, getOrganisation, id)
	var i Organisation
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Company,
		&i.RootAdminID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrganisationForUpdate = `-- name: GetOrganisationForUpdate :one
SELECT id, name, company, root_admin_id, created_at, updated_at FROM organisations
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetOrganisationForUpdate(ctx context.Context, id int32) (Organisation, error) {
	row := q.db.QueryRowContext(ctx, getOrganisationForUpdate, id)
	var i Organisation
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Company,
		&i.RootAdminID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listOrganisations = `-- name: ListOrganisations :many
SELECT id, name, company, root_admin_id, created_at, updated_at FROM organisations
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListOrganisationsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListOrganisations(ctx context.Context, arg ListOrganisationsParams) ([]Organisation, error) {
	rows, err := q.db.QueryContext(ctx, listOrganisations, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Organisation{}
	for rows.Next() {
		var i Organisation
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Company,
			&i.RootAdminID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrganisation = `-- name: UpdateOrganisation :one
UPDATE organisations
SET name = $2, company = $3, updated_at = NOW()
WHERE id = $1 RETURNING id, name, company, root_admin_id, created_at, updated_at
`

type UpdateOrganisationParams struct {
	ID      int32  `json:"id"`
	Name    string `json:"name"`
	Company string `json:"company"`
}

func (q *Queries) UpdateOrganisation(ctx context.Context, arg UpdateOrganisationParams) (Organisation, error) {
	row := q.db.QueryRowContext(ctx, updateOrganisation, arg.ID, arg.Name, arg.Company)
	var i Organisation
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Company,
		&i.RootAdminID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
