// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: session_store.sql

package db

import (
	"context"
	"database/sql"
)

const createSessionState = `-- name: CreateSessionState :one

INSERT INTO session_store (grp_id, port, session_state) VALUES ($1, $2, $3) RETURNING id, grp_id, port, session_state, created_at
`

type CreateSessionStateParams struct {
	GrpID        sql.NullInt32 `json:"grp_id"`
	Port         sql.NullInt32 `json:"port"`
	SessionState string        `json:"session_state"`
}

func (q *Queries) CreateSessionState(ctx context.Context, arg CreateSessionStateParams) (SessionStore, error) {
	row := q.db.QueryRowContext(ctx, createSessionState, arg.GrpID, arg.Port, arg.SessionState)
	var i SessionStore
	err := row.Scan(
		&i.ID,
		&i.GrpID,
		&i.Port,
		&i.SessionState,
		&i.CreatedAt,
	)
	return i, err
}

const deleteExpiredSessionStates = `-- name: DeleteExpiredSessionStates :exec
DELETE FROM session_store WHERE created_at < NOW() - INTERVAL '1 day'
`

func (q *Queries) DeleteExpiredSessionStates(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteExpiredSessionStates)
	return err
}

const deleteSessionState = `-- name: DeleteSessionState :exec
DELETE FROM session_store WHERE id = $1
`

func (q *Queries) DeleteSessionState(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteSessionState, id)
	return err
}

const deleteSessionStateByGroupID = `-- name: DeleteSessionStateByGroupID :exec
DELETE FROM session_store WHERE grp_id = $1
`

func (q *Queries) DeleteSessionStateByGroupID(ctx context.Context, grpID sql.NullInt32) error {
	_, err := q.db.ExecContext(ctx, deleteSessionStateByGroupID, grpID)
	return err
}

const getGroupIDPortBySessionState = `-- name: GetGroupIDPortBySessionState :one
SELECT grp_id, port FROM session_store WHERE session_state = $1
`

type GetGroupIDPortBySessionStateRow struct {
	GrpID sql.NullInt32 `json:"grp_id"`
	Port  sql.NullInt32 `json:"port"`
}

func (q *Queries) GetGroupIDPortBySessionState(ctx context.Context, sessionState string) (GetGroupIDPortBySessionStateRow, error) {
	row := q.db.QueryRowContext(ctx, getGroupIDPortBySessionState, sessionState)
	var i GetGroupIDPortBySessionStateRow
	err := row.Scan(&i.GrpID, &i.Port)
	return i, err
}

const getSessionState = `-- name: GetSessionState :one
SELECT id, grp_id, port, session_state, created_at FROM session_store WHERE id = $1
`

func (q *Queries) GetSessionState(ctx context.Context, id int32) (SessionStore, error) {
	row := q.db.QueryRowContext(ctx, getSessionState, id)
	var i SessionStore
	err := row.Scan(
		&i.ID,
		&i.GrpID,
		&i.Port,
		&i.SessionState,
		&i.CreatedAt,
	)
	return i, err
}

const getSessionStateByGroupID = `-- name: GetSessionStateByGroupID :one
SELECT id, grp_id, port, session_state, created_at FROM session_store WHERE grp_id = $1
`

func (q *Queries) GetSessionStateByGroupID(ctx context.Context, grpID sql.NullInt32) (SessionStore, error) {
	row := q.db.QueryRowContext(ctx, getSessionStateByGroupID, grpID)
	var i SessionStore
	err := row.Scan(
		&i.ID,
		&i.GrpID,
		&i.Port,
		&i.SessionState,
		&i.CreatedAt,
	)
	return i, err
}
