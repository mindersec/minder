// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: access_tokens.sql

package db

import (
	"context"
)

const createAccessToken = `-- name: CreateAccessToken :one
INSERT INTO access_tokens (organisation_id, encrypted_token) VALUES ($1, $2) RETURNING id, organisation_id, encrypted_token, created_at, updated_at
`

type CreateAccessTokenParams struct {
	OrganisationID int32  `json:"organisation_id"`
	EncryptedToken string `json:"encrypted_token"`
}

func (q *Queries) CreateAccessToken(ctx context.Context, arg CreateAccessTokenParams) (AccessToken, error) {
	row := q.db.QueryRowContext(ctx, createAccessToken, arg.OrganisationID, arg.EncryptedToken)
	var i AccessToken
	err := row.Scan(
		&i.ID,
		&i.OrganisationID,
		&i.EncryptedToken,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAccessToken = `-- name: DeleteAccessToken :exec
DELETE FROM access_tokens WHERE organisation_id = $1
`

func (q *Queries) DeleteAccessToken(ctx context.Context, organisationID int32) error {
	_, err := q.db.ExecContext(ctx, deleteAccessToken, organisationID)
	return err
}

const getAccessTokenByOrganisationID = `-- name: GetAccessTokenByOrganisationID :one
SELECT id, organisation_id, encrypted_token, created_at, updated_at FROM access_tokens WHERE organisation_id = $1
`

func (q *Queries) GetAccessTokenByOrganisationID(ctx context.Context, organisationID int32) (AccessToken, error) {
	row := q.db.QueryRowContext(ctx, getAccessTokenByOrganisationID, organisationID)
	var i AccessToken
	err := row.Scan(
		&i.ID,
		&i.OrganisationID,
		&i.EncryptedToken,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAccessToken = `-- name: UpdateAccessToken :one
UPDATE access_tokens SET encrypted_token = $2, updated_at = NOW() WHERE organisation_id = $1 RETURNING id, organisation_id, encrypted_token, created_at, updated_at
`

type UpdateAccessTokenParams struct {
	OrganisationID int32  `json:"organisation_id"`
	EncryptedToken string `json:"encrypted_token"`
}

func (q *Queries) UpdateAccessToken(ctx context.Context, arg UpdateAccessTokenParams) (AccessToken, error) {
	row := q.db.QueryRowContext(ctx, updateAccessToken, arg.OrganisationID, arg.EncryptedToken)
	var i AccessToken
	err := row.Scan(
		&i.ID,
		&i.OrganisationID,
		&i.EncryptedToken,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
