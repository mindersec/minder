// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: group_roles.sql

package db

import (
	"context"
)

const addRoleToGroup = `-- name: AddRoleToGroup :one
INSERT INTO group_roles (group_id, role_id) VALUES ($1, $2) RETURNING id, group_id, role_id, created_at, updated_at
`

type AddRoleToGroupParams struct {
	GroupID int32 `json:"group_id"`
	RoleID  int32 `json:"role_id"`
}

func (q *Queries) AddRoleToGroup(ctx context.Context, arg AddRoleToGroupParams) (GroupRole, error) {
	row := q.db.QueryRowContext(ctx, addRoleToGroup, arg.GroupID, arg.RoleID)
	var i GroupRole
	err := row.Scan(
		&i.ID,
		&i.GroupID,
		&i.RoleID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getGroupRoles = `-- name: GetGroupRoles :many
SELECT id, group_id, role_id, created_at, updated_at FROM group_roles WHERE group_id = $1
`

func (q *Queries) GetGroupRoles(ctx context.Context, groupID int32) ([]GroupRole, error) {
	rows, err := q.db.QueryContext(ctx, getGroupRoles, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GroupRole{}
	for rows.Next() {
		var i GroupRole
		if err := rows.Scan(
			&i.ID,
			&i.GroupID,
			&i.RoleID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeRoleFromGroup = `-- name: RemoveRoleFromGroup :exec
DELETE FROM group_roles WHERE group_id = $1 AND role_id = $2
`

type RemoveRoleFromGroupParams struct {
	GroupID int32 `json:"group_id"`
	RoleID  int32 `json:"role_id"`
}

func (q *Queries) RemoveRoleFromGroup(ctx context.Context, arg RemoveRoleFromGroupParams) error {
	_, err := q.db.ExecContext(ctx, removeRoleFromGroup, arg.GroupID, arg.RoleID)
	return err
}
