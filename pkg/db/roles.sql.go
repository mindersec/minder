// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: roles.sql

package db

import (
	"context"
)

const createRole = `-- name: CreateRole :one
INSERT INTO roles (
    group_id, 
    name,
    is_admin,
    is_protected
    ) VALUES (
        $1, $2, $3, $4
) RETURNING id, group_id, name, is_admin, is_protected, created_at, updated_at
`

type CreateRoleParams struct {
	GroupID     int32  `json:"group_id"`
	Name        string `json:"name"`
	IsAdmin     bool   `json:"is_admin"`
	IsProtected bool   `json:"is_protected"`
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (Role, error) {
	row := q.db.QueryRowContext(ctx, createRole,
		arg.GroupID,
		arg.Name,
		arg.IsAdmin,
		arg.IsProtected,
	)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.GroupID,
		&i.Name,
		&i.IsAdmin,
		&i.IsProtected,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteRole = `-- name: DeleteRole :exec
DELETE FROM roles WHERE id = $1
`

func (q *Queries) DeleteRole(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteRole, id)
	return err
}

const getRoleByID = `-- name: GetRoleByID :one
SELECT id, group_id, name, is_admin, is_protected, created_at, updated_at FROM roles WHERE id = $1
`

func (q *Queries) GetRoleByID(ctx context.Context, id int32) (Role, error) {
	row := q.db.QueryRowContext(ctx, getRoleByID, id)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.GroupID,
		&i.Name,
		&i.IsAdmin,
		&i.IsProtected,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listRoles = `-- name: ListRoles :many
SELECT id, group_id, name, is_admin, is_protected, created_at, updated_at FROM roles
WHERE group_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListRolesParams struct {
	GroupID int32 `json:"group_id"`
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
}

func (q *Queries) ListRoles(ctx context.Context, arg ListRolesParams) ([]Role, error) {
	rows, err := q.db.QueryContext(ctx, listRoles, arg.GroupID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Role{}
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.GroupID,
			&i.Name,
			&i.IsAdmin,
			&i.IsProtected,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRolesByGroupID = `-- name: ListRolesByGroupID :many
SELECT id, group_id, name, is_admin, is_protected, created_at, updated_at FROM roles WHERE group_id = $1
`

func (q *Queries) ListRolesByGroupID(ctx context.Context, groupID int32) ([]Role, error) {
	rows, err := q.db.QueryContext(ctx, listRolesByGroupID, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Role{}
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.GroupID,
			&i.Name,
			&i.IsAdmin,
			&i.IsProtected,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRole = `-- name: UpdateRole :one
UPDATE roles 
SET group_id = $2, name = $3, is_admin = $4, is_protected = $5, updated_at = NOW() 
WHERE id = $1 RETURNING id, group_id, name, is_admin, is_protected, created_at, updated_at
`

type UpdateRoleParams struct {
	ID          int32  `json:"id"`
	GroupID     int32  `json:"group_id"`
	Name        string `json:"name"`
	IsAdmin     bool   `json:"is_admin"`
	IsProtected bool   `json:"is_protected"`
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) (Role, error) {
	row := q.db.QueryRowContext(ctx, updateRole,
		arg.ID,
		arg.GroupID,
		arg.Name,
		arg.IsAdmin,
		arg.IsProtected,
	)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.GroupID,
		&i.Name,
		&i.IsAdmin,
		&i.IsProtected,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
