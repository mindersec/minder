// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: artifacts.sql

package db

import (
	"context"
)

const createArtifact = `-- name: CreateArtifact :one
INSERT INTO artifacts (
    repository_id,
    artifact_name,
    artifact_type,
    artifact_visibility) VALUES ($1, $2, $3, $4) RETURNING id, repository_id, artifact_name, artifact_type, artifact_visibility, created_at, updated_at
`

type CreateArtifactParams struct {
	RepositoryID       int32  `json:"repository_id"`
	ArtifactName       string `json:"artifact_name"`
	ArtifactType       string `json:"artifact_type"`
	ArtifactVisibility string `json:"artifact_visibility"`
}

func (q *Queries) CreateArtifact(ctx context.Context, arg CreateArtifactParams) (Artifact, error) {
	row := q.db.QueryRowContext(ctx, createArtifact,
		arg.RepositoryID,
		arg.ArtifactName,
		arg.ArtifactType,
		arg.ArtifactVisibility,
	)
	var i Artifact
	err := row.Scan(
		&i.ID,
		&i.RepositoryID,
		&i.ArtifactName,
		&i.ArtifactType,
		&i.ArtifactVisibility,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteArtifact = `-- name: DeleteArtifact :exec
DELETE FROM artifacts
WHERE id = $1
`

func (q *Queries) DeleteArtifact(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteArtifact, id)
	return err
}

const getArtifactByID = `-- name: GetArtifactByID :one
SELECT id, repository_id, artifact_name, artifact_type, artifact_visibility, created_at, updated_at FROM artifacts WHERE id = $1
`

func (q *Queries) GetArtifactByID(ctx context.Context, id int32) (Artifact, error) {
	row := q.db.QueryRowContext(ctx, getArtifactByID, id)
	var i Artifact
	err := row.Scan(
		&i.ID,
		&i.RepositoryID,
		&i.ArtifactName,
		&i.ArtifactType,
		&i.ArtifactVisibility,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getArtifactByName = `-- name: GetArtifactByName :one
SELECT id, repository_id, artifact_name, artifact_type, artifact_visibility, created_at, updated_at FROM artifacts WHERE repository_id = $1 AND artifact_name = $2
`

type GetArtifactByNameParams struct {
	RepositoryID int32  `json:"repository_id"`
	ArtifactName string `json:"artifact_name"`
}

func (q *Queries) GetArtifactByName(ctx context.Context, arg GetArtifactByNameParams) (Artifact, error) {
	row := q.db.QueryRowContext(ctx, getArtifactByName, arg.RepositoryID, arg.ArtifactName)
	var i Artifact
	err := row.Scan(
		&i.ID,
		&i.RepositoryID,
		&i.ArtifactName,
		&i.ArtifactType,
		&i.ArtifactVisibility,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listArtifactsByRepoID = `-- name: ListArtifactsByRepoID :many
SELECT id, repository_id, artifact_name, artifact_type, artifact_visibility, created_at, updated_at FROM artifacts
WHERE repository_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListArtifactsByRepoIDParams struct {
	RepositoryID int32 `json:"repository_id"`
	Limit        int32 `json:"limit"`
	Offset       int32 `json:"offset"`
}

func (q *Queries) ListArtifactsByRepoID(ctx context.Context, arg ListArtifactsByRepoIDParams) ([]Artifact, error) {
	rows, err := q.db.QueryContext(ctx, listArtifactsByRepoID, arg.RepositoryID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Artifact{}
	for rows.Next() {
		var i Artifact
		if err := rows.Scan(
			&i.ID,
			&i.RepositoryID,
			&i.ArtifactName,
			&i.ArtifactType,
			&i.ArtifactVisibility,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertArtifact = `-- name: UpsertArtifact :one
INSERT INTO artifacts (
    repository_id,
    artifact_name,
    artifact_type,
    artifact_visibility
) VALUES ($1, $2, $3, $4)
ON CONFLICT (repository_id, LOWER(artifact_name))
DO UPDATE SET
    artifact_type = $3,
    artifact_visibility = $4
WHERE artifacts.repository_id = $1 AND artifacts.artifact_name = $2
RETURNING id, repository_id, artifact_name, artifact_type, artifact_visibility, created_at, updated_at
`

type UpsertArtifactParams struct {
	RepositoryID       int32  `json:"repository_id"`
	ArtifactName       string `json:"artifact_name"`
	ArtifactType       string `json:"artifact_type"`
	ArtifactVisibility string `json:"artifact_visibility"`
}

func (q *Queries) UpsertArtifact(ctx context.Context, arg UpsertArtifactParams) (Artifact, error) {
	row := q.db.QueryRowContext(ctx, upsertArtifact,
		arg.RepositoryID,
		arg.ArtifactName,
		arg.ArtifactType,
		arg.ArtifactVisibility,
	)
	var i Artifact
	err := row.Scan(
		&i.ID,
		&i.RepositoryID,
		&i.ArtifactName,
		&i.ArtifactType,
		&i.ArtifactVisibility,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
