// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: policies.sql

package db

import (
	"context"
	"encoding/json"
)

const createPolicy = `-- name: CreatePolicy :one
INSERT INTO policies (  
    provider,
    group_id,
    policy_type,
    policy_definition) VALUES ($1, $2, $3, $4::jsonb) RETURNING id, provider, group_id, policy_type, policy_definition, created_at, updated_at
`

type CreatePolicyParams struct {
	Provider         string          `json:"provider"`
	GroupID          int32           `json:"group_id"`
	PolicyType       PolicyType      `json:"policy_type"`
	PolicyDefinition json.RawMessage `json:"policy_definition"`
}

func (q *Queries) CreatePolicy(ctx context.Context, arg CreatePolicyParams) (Policy, error) {
	row := q.db.QueryRowContext(ctx, createPolicy,
		arg.Provider,
		arg.GroupID,
		arg.PolicyType,
		arg.PolicyDefinition,
	)
	var i Policy
	err := row.Scan(
		&i.ID,
		&i.Provider,
		&i.GroupID,
		&i.PolicyType,
		&i.PolicyDefinition,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePolicy = `-- name: DeletePolicy :exec
DELETE FROM policies
WHERE id = $1
`

func (q *Queries) DeletePolicy(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deletePolicy, id)
	return err
}

const getPolicyByID = `-- name: GetPolicyByID :one
SELECT id, provider, group_id, policy_type, policy_definition, created_at, updated_at FROM policies WHERE id = $1
`

func (q *Queries) GetPolicyByID(ctx context.Context, id int32) (Policy, error) {
	row := q.db.QueryRowContext(ctx, getPolicyByID, id)
	var i Policy
	err := row.Scan(
		&i.ID,
		&i.Provider,
		&i.GroupID,
		&i.PolicyType,
		&i.PolicyDefinition,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listPoliciesByGroupID = `-- name: ListPoliciesByGroupID :many
SELECT id, provider, group_id, policy_type, policy_definition, created_at, updated_at FROM policies
WHERE provider = $1 AND group_id = $2
ORDER BY id
LIMIT $3
OFFSET $4
`

type ListPoliciesByGroupIDParams struct {
	Provider string `json:"provider"`
	GroupID  int32  `json:"group_id"`
	Limit    int32  `json:"limit"`
	Offset   int32  `json:"offset"`
}

func (q *Queries) ListPoliciesByGroupID(ctx context.Context, arg ListPoliciesByGroupIDParams) ([]Policy, error) {
	rows, err := q.db.QueryContext(ctx, listPoliciesByGroupID,
		arg.Provider,
		arg.GroupID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Policy{}
	for rows.Next() {
		var i Policy
		if err := rows.Scan(
			&i.ID,
			&i.Provider,
			&i.GroupID,
			&i.PolicyType,
			&i.PolicyDefinition,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
