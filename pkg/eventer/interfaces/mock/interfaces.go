// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go
//
// Generated by this command:
//
//	mockgen -package mock_interfaces -destination=./mock/interfaces.go -source=./interfaces.go
//

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	context "context"
	reflect "reflect"

	message "github.com/ThreeDotsLabs/watermill/message"
	interfaces "github.com/mindersec/minder/pkg/eventer/interfaces"
	gomock "go.uber.org/mock/gomock"
)

// MockRegistrar is a mock of Registrar interface.
type MockRegistrar struct {
	ctrl     *gomock.Controller
	recorder *MockRegistrarMockRecorder
	isgomock struct{}
}

// MockRegistrarMockRecorder is the mock recorder for MockRegistrar.
type MockRegistrarMockRecorder struct {
	mock *MockRegistrar
}

// NewMockRegistrar creates a new mock instance.
func NewMockRegistrar(ctrl *gomock.Controller) *MockRegistrar {
	mock := &MockRegistrar{ctrl: ctrl}
	mock.recorder = &MockRegistrarMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegistrar) EXPECT() *MockRegistrarMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockRegistrar) Register(topic string, handler interfaces.Handler, mdw ...message.HandlerMiddleware) {
	m.ctrl.T.Helper()
	varargs := []any{topic, handler}
	for _, a := range mdw {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Register", varargs...)
}

// Register indicates an expected call of Register.
func (mr *MockRegistrarMockRecorder) Register(topic, handler any, mdw ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{topic, handler}, mdw...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockRegistrar)(nil).Register), varargs...)
}

// MockConsumer is a mock of Consumer interface.
type MockConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockConsumerMockRecorder
	isgomock struct{}
}

// MockConsumerMockRecorder is the mock recorder for MockConsumer.
type MockConsumerMockRecorder struct {
	mock *MockConsumer
}

// NewMockConsumer creates a new mock instance.
func NewMockConsumer(ctrl *gomock.Controller) *MockConsumer {
	mock := &MockConsumer{ctrl: ctrl}
	mock.recorder = &MockConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsumer) EXPECT() *MockConsumerMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockConsumer) Register(arg0 interfaces.Registrar) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", arg0)
}

// Register indicates an expected call of Register.
func (mr *MockConsumerMockRecorder) Register(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockConsumer)(nil).Register), arg0)
}

// MockAggregatorMiddleware is a mock of AggregatorMiddleware interface.
type MockAggregatorMiddleware struct {
	ctrl     *gomock.Controller
	recorder *MockAggregatorMiddlewareMockRecorder
	isgomock struct{}
}

// MockAggregatorMiddlewareMockRecorder is the mock recorder for MockAggregatorMiddleware.
type MockAggregatorMiddlewareMockRecorder struct {
	mock *MockAggregatorMiddleware
}

// NewMockAggregatorMiddleware creates a new mock instance.
func NewMockAggregatorMiddleware(ctrl *gomock.Controller) *MockAggregatorMiddleware {
	mock := &MockAggregatorMiddleware{ctrl: ctrl}
	mock.recorder = &MockAggregatorMiddlewareMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAggregatorMiddleware) EXPECT() *MockAggregatorMiddlewareMockRecorder {
	return m.recorder
}

// AggregateMiddleware mocks base method.
func (m *MockAggregatorMiddleware) AggregateMiddleware(h message.HandlerFunc) message.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AggregateMiddleware", h)
	ret0, _ := ret[0].(message.HandlerFunc)
	return ret0
}

// AggregateMiddleware indicates an expected call of AggregateMiddleware.
func (mr *MockAggregatorMiddlewareMockRecorder) AggregateMiddleware(h any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregateMiddleware", reflect.TypeOf((*MockAggregatorMiddleware)(nil).AggregateMiddleware), h)
}

// MockPublisher is a mock of Publisher interface.
type MockPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockPublisherMockRecorder
	isgomock struct{}
}

// MockPublisherMockRecorder is the mock recorder for MockPublisher.
type MockPublisherMockRecorder struct {
	mock *MockPublisher
}

// NewMockPublisher creates a new mock instance.
func NewMockPublisher(ctrl *gomock.Controller) *MockPublisher {
	mock := &MockPublisher{ctrl: ctrl}
	mock.recorder = &MockPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublisher) EXPECT() *MockPublisherMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockPublisher) Publish(topic string, messages ...*message.Message) error {
	m.ctrl.T.Helper()
	varargs := []any{topic}
	for _, a := range messages {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Publish", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockPublisherMockRecorder) Publish(topic any, messages ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{topic}, messages...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockPublisher)(nil).Publish), varargs...)
}

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockService) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockServiceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockService)(nil).Close))
}

// ConsumeEvents mocks base method.
func (m *MockService) ConsumeEvents(consumers ...interfaces.Consumer) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range consumers {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "ConsumeEvents", varargs...)
}

// ConsumeEvents indicates an expected call of ConsumeEvents.
func (mr *MockServiceMockRecorder) ConsumeEvents(consumers ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeEvents", reflect.TypeOf((*MockService)(nil).ConsumeEvents), consumers...)
}

// Run mocks base method.
func (m *MockService) Run(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockServiceMockRecorder) Run(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockService)(nil).Run), ctx)
}

// Running mocks base method.
func (m *MockService) Running() chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Running")
	ret0, _ := ret[0].(chan struct{})
	return ret0
}

// Running indicates an expected call of Running.
func (mr *MockServiceMockRecorder) Running() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Running", reflect.TypeOf((*MockService)(nil).Running))
}

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
	isgomock struct{}
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockInterface) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockInterfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockInterface)(nil).Close))
}

// ConsumeEvents mocks base method.
func (m *MockInterface) ConsumeEvents(consumers ...interfaces.Consumer) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range consumers {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "ConsumeEvents", varargs...)
}

// ConsumeEvents indicates an expected call of ConsumeEvents.
func (mr *MockInterfaceMockRecorder) ConsumeEvents(consumers ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeEvents", reflect.TypeOf((*MockInterface)(nil).ConsumeEvents), consumers...)
}

// Publish mocks base method.
func (m *MockInterface) Publish(topic string, messages ...*message.Message) error {
	m.ctrl.T.Helper()
	varargs := []any{topic}
	for _, a := range messages {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Publish", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockInterfaceMockRecorder) Publish(topic any, messages ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{topic}, messages...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockInterface)(nil).Publish), varargs...)
}

// Register mocks base method.
func (m *MockInterface) Register(topic string, handler interfaces.Handler, mdw ...message.HandlerMiddleware) {
	m.ctrl.T.Helper()
	varargs := []any{topic, handler}
	for _, a := range mdw {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Register", varargs...)
}

// Register indicates an expected call of Register.
func (mr *MockInterfaceMockRecorder) Register(topic, handler any, mdw ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{topic, handler}, mdw...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockInterface)(nil).Register), varargs...)
}

// Run mocks base method.
func (m *MockInterface) Run(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockInterfaceMockRecorder) Run(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockInterface)(nil).Run), ctx)
}

// Running mocks base method.
func (m *MockInterface) Running() chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Running")
	ret0, _ := ret[0].(chan struct{})
	return ret0
}

// Running indicates an expected call of Running.
func (mr *MockInterfaceMockRecorder) Running() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Running", reflect.TypeOf((*MockInterface)(nil).Running))
}
