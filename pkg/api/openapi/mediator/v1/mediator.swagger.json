{
  "swagger": "2.0",
  "info": {
    "title": "mediator/v1/mediator.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "HealthService"
    },
    {
      "name": "ArtifactService"
    },
    {
      "name": "OAuthService"
    },
    {
      "name": "AuthService"
    },
    {
      "name": "RepositoryService"
    },
    {
      "name": "BranchProtectionService"
    },
    {
      "name": "UserService"
    },
    {
      "name": "ProfileService"
    },
    {
      "name": "KeyService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/v1/artifact/{id}": {
      "get": {
        "operationId": "ArtifactService_GetArtifactById",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetArtifactByIdResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "latestVersions",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "tag",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ArtifactService"
        ]
      }
    },
    "/api/v1/artifacts/{provider}": {
      "get": {
        "operationId": "ArtifactService_ListArtifacts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListArtifactsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ArtifactService"
        ]
      }
    },
    "/api/v1/auth/callback/{provider}/cli": {
      "get": {
        "summary": "buf:lint:ignore RPC_RESPONSE_STANDARD_NAME",
        "description": "protolint:disable:this",
        "operationId": "OAuthService_ExchangeCodeForTokenCLI",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiHttpBody"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "code",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "state",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "redirectUri",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "OAuthService"
        ]
      }
    },
    "/api/v1/auth/callback/{provider}/web": {
      "get": {
        "operationId": "OAuthService_ExchangeCodeForTokenWEB",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ExchangeCodeForTokenWEBResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "code",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "redirectUri",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "OAuthService"
        ]
      }
    },
    "/api/v1/auth/logout": {
      "post": {
        "summary": "Logout of Mediator",
        "operationId": "AuthService_LogOut",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1LogOutResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1LogOutRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/v1/auth/refresh": {
      "post": {
        "summary": "refresh a token",
        "operationId": "AuthService_RefreshToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RefreshTokenResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1RefreshTokenRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/v1/auth/revoke": {
      "post": {
        "summary": "revoke all tokens for all users",
        "operationId": "AuthService_RevokeTokens",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RevokeTokensResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1RevokeTokensRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/v1/auth/revoke-all": {
      "post": {
        "summary": "RevokeOauthTokens is used to revoke all tokens\nthis a nuclear option and should only be used in emergencies",
        "operationId": "OAuthService_RevokeOauthTokens",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RevokeOauthTokensResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1RevokeOauthTokensRequest"
            }
          }
        ],
        "tags": [
          "OAuthService"
        ]
      }
    },
    "/api/v1/auth/revoke/{userId}": {
      "post": {
        "summary": "revoke token for an user",
        "operationId": "AuthService_RevokeUserToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RevokeUserTokenResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/v1/auth/url": {
      "get": {
        "operationId": "OAuthService_GetAuthorizationURL",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetAuthorizationURLResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "provider",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "cli",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "port",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "owner",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "OAuthService"
        ]
      }
    },
    "/api/v1/auth/verify": {
      "get": {
        "summary": "Verify user has active session to Mediator",
        "operationId": "AuthService_Verify",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1VerifyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/v1/auth/verify/{provider}/{timestamp}": {
      "get": {
        "summary": "VerifyProviderTokenFrom verifies that a token has been created for a provider since given timestamp",
        "operationId": "OAuthService_VerifyProviderTokenFrom",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1VerifyProviderTokenFromResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "timestamp",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "projectId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "OAuthService"
        ]
      }
    },
    "/api/v1/auth/{provider}/revoke/{projectId}": {
      "post": {
        "summary": "revoke token for a project",
        "operationId": "OAuthService_RevokeOauthProjectToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RevokeOauthProjectTokenResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "tags": [
          "OAuthService"
        ]
      }
    },
    "/api/v1/auth/{provider}/token": {
      "post": {
        "operationId": "OAuthService_StoreProviderToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1StoreProviderTokenResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "projectId": {
                  "type": "string"
                },
                "accessToken": {
                  "type": "string"
                },
                "owner": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "tags": [
          "OAuthService"
        ]
      }
    },
    "/api/v1/branchprotection": {
      "get": {
        "operationId": "BranchProtectionService_GetBranchProtection",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetBranchProtectionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "BranchProtectionService"
        ]
      }
    },
    "/api/v1/health": {
      "get": {
        "operationId": "HealthService_CheckHealth",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CheckHealthResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "HealthService"
        ]
      }
    },
    "/api/v1/key": {
      "get": {
        "operationId": "KeyService_GetPublicKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetPublicKeyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "keyIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "KeyService"
        ]
      },
      "post": {
        "operationId": "KeyService_CreateKeyPair",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateKeyPairResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateKeyPairRequest"
            }
          }
        ],
        "tags": [
          "KeyService"
        ]
      }
    },
    "/api/v1/profile": {
      "post": {
        "operationId": "ProfileService_CreateProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateProfileResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateProfileRequest"
            }
          }
        ],
        "tags": [
          "ProfileService"
        ]
      }
    },
    "/api/v1/profile/name/{name}/status": {
      "get": {
        "operationId": "ProfileService_GetProfileStatusByName",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetProfileStatusByNameResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "name is the name of the profile to get",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "context.provider",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "context.organization",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "context.project",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "entity.type",
            "description": "entity is the entity to get status for. Incompatible with `all`",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ENTITY_UNSPECIFIED",
              "ENTITY_REPOSITORIES",
              "ENTITY_BUILD_ENVIRONMENTS",
              "ENTITY_ARTIFACTS",
              "ENTITY_PULL_REQUESTS"
            ],
            "default": "ENTITY_UNSPECIFIED"
          },
          {
            "name": "entity.id",
            "description": "id is the ID of the entity to get status for. Incompatible with `all`",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "all",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "rule",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ProfileService"
        ]
      }
    },
    "/api/v1/profile/{id}": {
      "get": {
        "operationId": "ProfileService_GetProfileById",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetProfileByIdResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "id is the id of the profile to get",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "context.provider",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "context.organization",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "context.project",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ProfileService"
        ]
      },
      "delete": {
        "operationId": "ProfileService_DeleteProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteProfileResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "id is the id of the profile to delete",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "context.provider",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "context.organization",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "context.project",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ProfileService"
        ]
      }
    },
    "/api/v1/profile_status": {
      "get": {
        "operationId": "ProfileService_GetProfileStatusByProject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetProfileStatusByProjectResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "context.provider",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "context.organization",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "context.project",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ProfileService"
        ]
      }
    },
    "/api/v1/profiles": {
      "get": {
        "operationId": "ProfileService_ListProfiles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListProfilesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "context.provider",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "context.organization",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "context.project",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ProfileService"
        ]
      }
    },
    "/api/v1/repositories/provider/{provider}": {
      "get": {
        "operationId": "RepositoryService_ListRepositories",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListRepositoriesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "REPO_FILTER_SHOW_UNSPECIFIED",
              "REPO_FILTER_SHOW_ALL",
              "REPO_FILTER_SHOW_NOT_REGISTERED_ONLY",
              "REPO_FILTER_SHOW_REGISTERED_ONLY"
            ],
            "default": "REPO_FILTER_SHOW_UNSPECIFIED"
          }
        ],
        "tags": [
          "RepositoryService"
        ]
      }
    },
    "/api/v1/repositories/provider/{provider}/sync": {
      "post": {
        "operationId": "RepositoryService_SyncRepositories",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SyncRepositoriesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "projectId": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "tags": [
          "RepositoryService"
        ]
      }
    },
    "/api/v1/repository/id/{repositoryId}": {
      "get": {
        "operationId": "RepositoryService_GetRepositoryById",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetRepositoryByIdResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "repositoryId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "RepositoryService"
        ]
      }
    },
    "/api/v1/repository/provider/{provider}/name/{name}": {
      "get": {
        "operationId": "RepositoryService_GetRepositoryByName",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetRepositoryByNameResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "RepositoryService"
        ]
      }
    },
    "/api/v1/repository/provider/{provider}/register": {
      "post": {
        "operationId": "RepositoryService_RegisterRepository",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RegisterRepositoryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "projectId": {
                  "type": "string"
                },
                "repositories": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/v1Repositories"
                  }
                },
                "events": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "RepositoryService"
        ]
      }
    },
    "/api/v1/rule_type": {
      "post": {
        "operationId": "ProfileService_CreateRuleType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateRuleTypeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "CreateRuleTypeRequest is the request to create a rule type.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateRuleTypeRequest"
            }
          }
        ],
        "tags": [
          "ProfileService"
        ]
      },
      "put": {
        "operationId": "ProfileService_UpdateRuleType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateRuleTypeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "UpdateRuleTypeRequest is the request to update a rule type.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateRuleTypeRequest"
            }
          }
        ],
        "tags": [
          "ProfileService"
        ]
      }
    },
    "/api/v1/rule_type/name/{name}": {
      "get": {
        "operationId": "ProfileService_GetRuleTypeByName",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetRuleTypeByNameResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "name is the name of the rule type.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "context.provider",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "context.organization",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "context.project",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ProfileService"
        ]
      }
    },
    "/api/v1/rule_type/{id}": {
      "get": {
        "operationId": "ProfileService_GetRuleTypeById",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetRuleTypeByIdResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "id is the id of the rule type.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "context.provider",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "context.organization",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "context.project",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ProfileService"
        ]
      },
      "delete": {
        "operationId": "ProfileService_DeleteRuleType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteRuleTypeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "id is the id of the rule type to be deleted.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "context.provider",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "context.organization",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "context.project",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ProfileService"
        ]
      }
    },
    "/api/v1/rule_types": {
      "get": {
        "operationId": "ProfileService_ListRuleTypes",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListRuleTypesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "context.provider",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "context.organization",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "context.project",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ProfileService"
        ]
      }
    },
    "/api/v1/user": {
      "get": {
        "operationId": "UserService_GetUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "UserService"
        ]
      },
      "post": {
        "operationId": "UserService_CreateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateUserRequest"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/api/v1/user/{id}": {
      "delete": {
        "operationId": "UserService_DeleteUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    }
  },
  "definitions": {
    "DefinitionEval": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "title": "type is the type of the data evaluation.\nRight now only `jq` is supported as a driver"
        },
        "jq": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/EvalJQComparison"
          },
          "description": "jq is only used if the `jq` type is selected.\nIt defines the comparisons that are made between\nthe ingested data and the profile rule."
        },
        "rego": {
          "$ref": "#/definitions/EvalRego",
          "description": "rego is only used if the `rego` type is selected."
        },
        "vulncheck": {
          "$ref": "#/definitions/EvalVulncheck",
          "description": "vulncheck is only used if the `vulncheck` type is selected."
        }
      },
      "description": "Eval defines the data evaluation definition.\nThis pertains to the way we traverse data from the upstream\nendpoint and how we compare it to the rule."
    },
    "DefinitionIngest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "type is the type of the data ingestion.\nwe currently support rest, artifact and builtin."
        },
        "rest": {
          "$ref": "#/definitions/v1RestType",
          "description": "rest is the rest data ingestion.\nthis is only used if the type is rest."
        },
        "builtin": {
          "$ref": "#/definitions/v1BuiltinType",
          "description": "builtin is the builtin data ingestion."
        },
        "artifact": {
          "$ref": "#/definitions/v1ArtifactType",
          "description": "artifact is the artifact data ingestion."
        },
        "git": {
          "$ref": "#/definitions/v1GitType",
          "description": "git is the git data ingestion."
        },
        "diff": {
          "$ref": "#/definitions/v1DiffType",
          "description": "diff is the diff data ingestion."
        }
      },
      "description": "Ingest defines how the data is ingested."
    },
    "DefinitionRemediate": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "rest": {
          "$ref": "#/definitions/v1RestType"
        }
      }
    },
    "DiffTypeEcosystem": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "name is the name of the ecosystem."
        },
        "depfile": {
          "type": "string",
          "title": "depfile is the file that contains the dependencies for this ecosystem"
        }
      }
    },
    "EvalJQComparison": {
      "type": "object",
      "properties": {
        "ingested": {
          "$ref": "#/definitions/JQComparisonOperator",
          "title": "Ingested points to the data retrieved in the `ingest` section"
        },
        "profile": {
          "$ref": "#/definitions/JQComparisonOperator",
          "description": "Profile points to the profile itself."
        }
      }
    },
    "EvalRego": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "type is the type of evaluation engine to use\nfor rego. We currently have two modes of operation:\n- deny-by-default: this is the default mode of operation\n  where we deny access by default and allow access only\n  if the profile explicitly allows it. It expects the\n  profile to set an `allow` variable to true or false.\n- constraints: this is the mode of operation where we\n  allow access by default and deny access only if a\n  violation is found. It expects the profile to set a\n  `violations` variable with a \"msg\" field."
        },
        "def": {
          "type": "string",
          "description": "def is the definition of the rego profile."
        }
      }
    },
    "EvalVulncheck": {
      "type": "object",
      "properties": {
        "db": {
          "type": "string",
          "title": "db is the database to use for the vulncheck, e.g. OSV"
        },
        "endpoint": {
          "type": "string",
          "title": "e.g. https://api.osv.dev/v1/query"
        }
      }
    },
    "GetProfileStatusByNameRequestEntityTypedId": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/v1Entity",
          "title": "entity is the entity to get status for. Incompatible with `all`"
        },
        "id": {
          "type": "string",
          "title": "id is the ID of the entity to get status for. Incompatible with `all`"
        }
      },
      "title": "EntiryTypeId is a message that carries an ID together with a type to uniquely identify an entity\nsuch as (repo, 1), (artifact, 2), ...\nif the struct is reused in other messages, it should be moved to a top-level definition"
    },
    "JQComparisonOperator": {
      "type": "object",
      "properties": {
        "def": {
          "type": "string"
        }
      }
    },
    "ProfileRule": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "type is the type of the rule to be instantiated."
        },
        "params": {
          "type": "object",
          "description": "params are the parameters that are passed to the rule.\nThis is optional and depends on the rule type."
        },
        "def": {
          "type": "object",
          "description": "def is the definition of the rule.\nThis depends on the rule type."
        }
      },
      "description": "Rule defines the individual call of a certain rule type."
    },
    "apiHttpBody": {
      "type": "object",
      "properties": {
        "contentType": {
          "type": "string",
          "description": "The HTTP Content-Type header value specifying the content type of the body."
        },
        "data": {
          "type": "string",
          "format": "byte",
          "description": "The HTTP request/response body as raw binary."
        },
        "extensions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          },
          "description": "Application specific response metadata. Must be set in the first response\nfor streaming APIs."
        }
      },
      "description": "Message that represents an arbitrary HTTP body. It should only be used for\npayload formats that can't be represented as JSON, such as raw binary or\nan HTML page.\n\n\nThis message can be used both in streaming and non-streaming API methods in\nthe request as well as the response.\n\nIt can be used as a top-level request field, which is convenient if one\nwants to extract parameters from either the URL or HTTP template into the\nrequest fields and also want access to the raw HTTP body.\n\nExample:\n\n    message GetResourceRequest {\n      // A unique request id.\n      string request_id = 1;\n\n      // The raw HTTP body is bound to this field.\n      google.api.HttpBody http_body = 2;\n\n    }\n\n    service ResourceService {\n      rpc GetResource(GetResourceRequest)\n        returns (google.api.HttpBody);\n      rpc UpdateResource(google.api.HttpBody)\n        returns (google.protobuf.Empty);\n\n    }\n\nExample with streaming methods:\n\n    service CaldavService {\n      rpc GetCalendar(stream google.api.HttpBody)\n        returns (stream google.api.HttpBody);\n      rpc UpdateCalendar(stream google.api.HttpBody)\n        returns (stream google.api.HttpBody);\n\n    }\n\nUse of this type only changes how the request and response bodies are\nhandled, all other features will continue to work unchanged."
    },
    "mediatorv1Context": {
      "type": "object",
      "properties": {
        "provider": {
          "type": "string"
        },
        "organization": {
          "type": "string"
        },
        "project": {
          "type": "string"
        }
      },
      "description": "Context defines the context in which a rule is evaluated.\nthis normally refers to a combination of the provider, organization and project."
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "protobufNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\n The JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1Artifact": {
      "type": "object",
      "properties": {
        "artifactPk": {
          "type": "string"
        },
        "owner": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "visibility": {
          "type": "string"
        },
        "repository": {
          "type": "string"
        },
        "versions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ArtifactVersion"
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1ArtifactType": {
      "type": "object",
      "description": "ArtifactType defines the artifact data evaluation."
    },
    "v1ArtifactVersion": {
      "type": "object",
      "properties": {
        "versionId": {
          "type": "string",
          "format": "int64"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "sha": {
          "type": "string"
        },
        "signatureVerification": {
          "$ref": "#/definitions/v1SignatureVerification"
        },
        "githubWorkflow": {
          "$ref": "#/definitions/v1GithubWorkflow"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1BranchProtection": {
      "type": "object",
      "properties": {
        "branch": {
          "type": "string"
        },
        "isProtected": {
          "type": "boolean",
          "title": "Add other relevant fields"
        }
      }
    },
    "v1BuiltinType": {
      "type": "object",
      "properties": {
        "method": {
          "type": "string"
        }
      },
      "description": "BuiltinType defines the builtin data evaluation."
    },
    "v1CheckHealthResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        }
      }
    },
    "v1CreateKeyPairRequest": {
      "type": "object",
      "properties": {
        "passphrase": {
          "type": "string"
        },
        "projectId": {
          "type": "string"
        }
      }
    },
    "v1CreateKeyPairResponse": {
      "type": "object",
      "properties": {
        "keyIdentifier": {
          "type": "string"
        },
        "publicKey": {
          "type": "string"
        }
      }
    },
    "v1CreateProfileRequest": {
      "type": "object",
      "properties": {
        "profile": {
          "$ref": "#/definitions/v1Profile"
        }
      },
      "title": "Profile service"
    },
    "v1CreateProfileResponse": {
      "type": "object",
      "properties": {
        "profile": {
          "$ref": "#/definitions/v1Profile"
        }
      }
    },
    "v1CreateRuleTypeRequest": {
      "type": "object",
      "properties": {
        "ruleType": {
          "$ref": "#/definitions/v1RuleType",
          "description": "rule_type is the rule type to be created."
        }
      },
      "description": "CreateRuleTypeRequest is the request to create a rule type."
    },
    "v1CreateRuleTypeResponse": {
      "type": "object",
      "properties": {
        "ruleType": {
          "$ref": "#/definitions/v1RuleType",
          "description": "rule_type is the rule type that was created."
        }
      },
      "description": "CreateRuleTypeResponse is the response to create a rule type."
    },
    "v1CreateUserRequest": {
      "type": "object",
      "title": "User service"
    },
    "v1CreateUserResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "organizationId": {
          "type": "string"
        },
        "organizatioName": {
          "type": "string"
        },
        "projectId": {
          "type": "string"
        },
        "projectName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "identitySubject": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1DeleteProfileResponse": {
      "type": "object"
    },
    "v1DeleteRuleTypeResponse": {
      "type": "object",
      "description": "DeleteRuleTypeResponse is the response to delete a rule type."
    },
    "v1DeleteUserResponse": {
      "type": "object"
    },
    "v1DiffType": {
      "type": "object",
      "properties": {
        "ecosystems": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/DiffTypeEcosystem"
          }
        }
      },
      "description": "DiffType defines the diff data ingester."
    },
    "v1Entity": {
      "type": "string",
      "enum": [
        "ENTITY_UNSPECIFIED",
        "ENTITY_REPOSITORIES",
        "ENTITY_BUILD_ENVIRONMENTS",
        "ENTITY_ARTIFACTS",
        "ENTITY_PULL_REQUESTS"
      ],
      "default": "ENTITY_UNSPECIFIED",
      "description": "Entity defines the entity that is supported by the provider."
    },
    "v1ExchangeCodeForTokenWEBResponse": {
      "type": "object",
      "properties": {
        "accessToken": {
          "type": "string"
        },
        "tokenType": {
          "type": "string"
        },
        "expiresIn": {
          "type": "string",
          "format": "int64"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "v1GetArtifactByIdResponse": {
      "type": "object",
      "properties": {
        "artifact": {
          "$ref": "#/definitions/v1Artifact"
        },
        "versions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ArtifactVersion"
          }
        }
      }
    },
    "v1GetAuthorizationURLResponse": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        }
      }
    },
    "v1GetBranchProtectionResponse": {
      "type": "object",
      "properties": {
        "branchProtections": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BranchProtection"
          }
        }
      }
    },
    "v1GetProfileByIdResponse": {
      "type": "object",
      "properties": {
        "profile": {
          "$ref": "#/definitions/v1Profile"
        }
      }
    },
    "v1GetProfileStatusByNameResponse": {
      "type": "object",
      "properties": {
        "profileStatus": {
          "$ref": "#/definitions/v1ProfileStatus",
          "title": "profile_status is the status of the profile"
        },
        "ruleEvaluationStatus": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RuleEvaluationStatus"
          },
          "title": "rule_evaluation_status is the status of the rules"
        }
      }
    },
    "v1GetProfileStatusByProjectResponse": {
      "type": "object",
      "properties": {
        "profileStatus": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ProfileStatus"
          },
          "title": "profile_status is the status of the profile"
        }
      }
    },
    "v1GetPublicKeyResponse": {
      "type": "object",
      "properties": {
        "publicKey": {
          "type": "string"
        }
      }
    },
    "v1GetRepositoryByIdResponse": {
      "type": "object",
      "properties": {
        "repository": {
          "$ref": "#/definitions/v1RepositoryRecord"
        }
      }
    },
    "v1GetRepositoryByNameResponse": {
      "type": "object",
      "properties": {
        "repository": {
          "$ref": "#/definitions/v1RepositoryRecord"
        }
      }
    },
    "v1GetRuleTypeByIdResponse": {
      "type": "object",
      "properties": {
        "ruleType": {
          "$ref": "#/definitions/v1RuleType",
          "description": "rule_type is the rule type."
        }
      },
      "description": "GetRuleTypeByIdResponse is the response to get a rule type by id."
    },
    "v1GetRuleTypeByNameResponse": {
      "type": "object",
      "properties": {
        "ruleType": {
          "$ref": "#/definitions/v1RuleType",
          "description": "rule_type is the rule type."
        }
      },
      "description": "GetRuleTypeByNameResponse is the response to get a rule type by name."
    },
    "v1GetUserResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/v1UserRecord"
        },
        "projects": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Project"
          }
        }
      }
    },
    "v1GitType": {
      "type": "object",
      "properties": {
        "cloneUrl": {
          "type": "string",
          "description": "clone_url is the url of the git repository."
        },
        "branch": {
          "type": "string",
          "description": "branch is the branch of the git repository."
        }
      },
      "description": "GitType defines the git data ingester."
    },
    "v1GithubWorkflow": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "repository": {
          "type": "string"
        },
        "commitSha": {
          "type": "string"
        },
        "trigger": {
          "type": "string"
        }
      }
    },
    "v1ListArtifactsResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Artifact"
          }
        }
      }
    },
    "v1ListProfilesResponse": {
      "type": "object",
      "properties": {
        "profiles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Profile"
          }
        }
      }
    },
    "v1ListRepositoriesResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RepositoryRecord"
          }
        }
      }
    },
    "v1ListRuleTypesResponse": {
      "type": "object",
      "properties": {
        "ruleTypes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RuleType"
          },
          "description": "rule_types is the list of rule types."
        }
      },
      "description": "ListRuleTypesResponse is the response to list rule types."
    },
    "v1LogOutRequest": {
      "type": "object"
    },
    "v1LogOutResponse": {
      "type": "object"
    },
    "v1Profile": {
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/mediatorv1Context",
          "description": "context is the context in which the profile is evaluated."
        },
        "id": {
          "type": "string",
          "description": "id is the id of the profile.\nThis is optional and is set by the system."
        },
        "name": {
          "type": "string",
          "description": "name is the name of the profile instance."
        },
        "repository": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ProfileRule"
          },
          "description": "These are the entities that one could set in the profile."
        },
        "buildEnvironment": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ProfileRule"
          }
        },
        "artifact": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ProfileRule"
          }
        },
        "pullRequest": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ProfileRule"
          }
        },
        "remediate": {
          "type": "string",
          "title": "whether and how to remediate (on,off,dry_run)\nthis is optional as the default is set by the system"
        }
      },
      "description": "Profile defines a profile that is user defined."
    },
    "v1ProfileStatus": {
      "type": "object",
      "properties": {
        "profileId": {
          "type": "string",
          "title": "profile_id is the id of the profile"
        },
        "profileName": {
          "type": "string",
          "title": "profile_name is the name of the profile"
        },
        "profileStatus": {
          "type": "string",
          "title": "profile_status is the status of the profile"
        },
        "lastUpdated": {
          "type": "string",
          "format": "date-time",
          "title": "last_updated is the last time the profile was updated"
        }
      },
      "title": "get the overall profile status"
    },
    "v1Project": {
      "type": "object",
      "properties": {
        "projectId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "isProtected": {
          "type": "boolean"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "Project API Objects"
    },
    "v1RefreshTokenRequest": {
      "type": "object"
    },
    "v1RefreshTokenResponse": {
      "type": "object",
      "properties": {
        "accessToken": {
          "type": "string"
        },
        "accessTokenExpiresIn": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1RegisterRepositoryResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RepositoryResult"
          }
        }
      }
    },
    "v1RepoFilter": {
      "type": "string",
      "enum": [
        "REPO_FILTER_SHOW_UNSPECIFIED",
        "REPO_FILTER_SHOW_ALL",
        "REPO_FILTER_SHOW_NOT_REGISTERED_ONLY",
        "REPO_FILTER_SHOW_REGISTERED_ONLY"
      ],
      "default": "REPO_FILTER_SHOW_UNSPECIFIED",
      "title": "Repo filter enum"
    },
    "v1Repositories": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "repoId": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1RepositoryRecord": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "provider": {
          "type": "string"
        },
        "projectId": {
          "type": "string"
        },
        "owner": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "repoId": {
          "type": "integer",
          "format": "int32"
        },
        "isPrivate": {
          "type": "boolean"
        },
        "isFork": {
          "type": "boolean"
        },
        "hookUrl": {
          "type": "string"
        },
        "deployUrl": {
          "type": "string"
        },
        "cloneUrl": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "description": "RepositoryRecord is used for registering repositories."
    },
    "v1RepositoryResult": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string"
        },
        "repository": {
          "type": "string"
        },
        "repoId": {
          "type": "integer",
          "format": "int32"
        },
        "hookId": {
          "type": "string",
          "format": "int64"
        },
        "hookUrl": {
          "type": "string"
        },
        "deployUrl": {
          "type": "string"
        },
        "cloneUrl": {
          "type": "string"
        },
        "hookName": {
          "type": "string"
        },
        "hookType": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "uuid": {
          "type": "string"
        },
        "registered": {
          "type": "boolean"
        },
        "error": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1RestType": {
      "type": "object",
      "properties": {
        "endpoint": {
          "type": "string",
          "description": "endpoint is the endpoint to fetch data from.\nThis can be a URL or the path on the API.bool\nThis is a required field and must be set.\nThis is also evaluated via a template which allows\nus dynamically fill in the values."
        },
        "method": {
          "type": "string",
          "description": "method is the method to use to fetch data."
        },
        "headers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "headers are the headers to be sent to the endpoint."
        },
        "body": {
          "type": "string",
          "description": "body is the body to be sent to the endpoint."
        },
        "parse": {
          "type": "string",
          "description": "parse is the parsing mechanism to be used to parse the data."
        }
      },
      "description": "RestType defines the rest data evaluation.\nThis is used to fetch data from a REST endpoint."
    },
    "v1RevokeOauthProjectTokenResponse": {
      "type": "object"
    },
    "v1RevokeOauthTokensRequest": {
      "type": "object"
    },
    "v1RevokeOauthTokensResponse": {
      "type": "object",
      "properties": {
        "revokedTokens": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1RevokeTokensRequest": {
      "type": "object"
    },
    "v1RevokeTokensResponse": {
      "type": "object"
    },
    "v1RevokeUserTokenResponse": {
      "type": "object"
    },
    "v1RuleEvaluationStatus": {
      "type": "object",
      "properties": {
        "profileId": {
          "type": "string",
          "title": "profile_id is the id of the profile"
        },
        "ruleId": {
          "type": "string",
          "title": "rule_id is the id of the rule"
        },
        "ruleName": {
          "type": "string",
          "title": "rule_name is the name of the rule"
        },
        "entity": {
          "type": "string",
          "title": "entity is the entity that was evaluated"
        },
        "status": {
          "type": "string",
          "title": "status is the status of the evaluation"
        },
        "lastUpdated": {
          "type": "string",
          "format": "date-time",
          "title": "last_updated is the last time the profile was updated"
        },
        "entityInfo": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "entity_info is the information about the entity"
        },
        "details": {
          "type": "string",
          "title": "details is the description of the evaluation if any"
        },
        "guidance": {
          "type": "string",
          "title": "guidance is the guidance for the evaluation if any"
        },
        "remediationStatus": {
          "type": "string",
          "title": "remediation_status is the status of the remediation"
        },
        "remediationLastUpdated": {
          "type": "string",
          "format": "date-time",
          "title": "remediation_last_updated is the last time the remediation was performed or attempted"
        },
        "remediationDetails": {
          "type": "string",
          "title": "remediation_details is the description of the remediation attempt if any"
        }
      },
      "title": "get the status of the rules for a given profile"
    },
    "v1RuleType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "id is the id of the rule type.\nThis is mostly optional and is set by the server."
        },
        "name": {
          "type": "string",
          "description": "name is the name of the rule type."
        },
        "context": {
          "$ref": "#/definitions/mediatorv1Context",
          "description": "context is the context in which the rule is evaluated."
        },
        "def": {
          "$ref": "#/definitions/v1RuleTypeDefinition",
          "description": "def is the definition of the rule type."
        },
        "description": {
          "type": "string",
          "description": "description is the description of the rule type."
        },
        "guidance": {
          "type": "string",
          "description": "guidance are instructions we give the user in case a rule fails."
        }
      },
      "description": "RuleType defines rules that may or may not be user defined.\nThe version is assumed from the folder's version."
    },
    "v1RuleTypeDefinition": {
      "type": "object",
      "properties": {
        "inEntity": {
          "type": "string",
          "description": "in_entity is the entity in which the rule is evaluated.\nThis can be repository, build_environment or artifact."
        },
        "ruleSchema": {
          "type": "object",
          "description": "rule_schema is the schema of the rule. This is expressed in JSON Schema."
        },
        "paramSchema": {
          "type": "object",
          "description": "param_schema is the schema of the parameters that are passed to the rule.\nThis is expressed in JSON Schema."
        },
        "ingest": {
          "$ref": "#/definitions/DefinitionIngest"
        },
        "eval": {
          "$ref": "#/definitions/DefinitionEval"
        },
        "remediate": {
          "$ref": "#/definitions/DefinitionRemediate"
        }
      },
      "description": "Definition defines the rule type. It encompases the schema and the data evaluation."
    },
    "v1SignatureVerification": {
      "type": "object",
      "properties": {
        "isSigned": {
          "type": "boolean"
        },
        "isVerified": {
          "type": "boolean"
        },
        "isBundleVerified": {
          "type": "boolean"
        },
        "certIdentity": {
          "type": "string"
        },
        "certIssuer": {
          "type": "string"
        },
        "rekorLogId": {
          "type": "string"
        },
        "rekorLogIndex": {
          "type": "integer",
          "format": "int32"
        },
        "signatureTime": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1StoreProviderTokenResponse": {
      "type": "object"
    },
    "v1SyncRepositoriesResponse": {
      "type": "object"
    },
    "v1UpdateRuleTypeRequest": {
      "type": "object",
      "properties": {
        "ruleType": {
          "$ref": "#/definitions/v1RuleType",
          "description": "rule_type is the rule type to be updated."
        }
      },
      "description": "UpdateRuleTypeRequest is the request to update a rule type."
    },
    "v1UpdateRuleTypeResponse": {
      "type": "object",
      "properties": {
        "ruleType": {
          "$ref": "#/definitions/v1RuleType",
          "description": "rule_type is the rule type that was updated."
        }
      },
      "description": "UpdateRuleTypeResponse is the response to update a rule type."
    },
    "v1UserRecord": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "organizationId": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "identitySubject": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "user record to be returned"
    },
    "v1VerifyProviderTokenFromResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        }
      }
    },
    "v1VerifyResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        }
      }
    }
  }
}
