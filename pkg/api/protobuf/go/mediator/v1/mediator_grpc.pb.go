//
// Copyright 2023 Stacklok, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: mediator/v1/mediator.proto

package v1

import (
	context "context"
	v1 "github.com/stacklok/mediator/pkg/api/protobuf/go/minder/v1"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HealthService_CheckHealth_FullMethodName = "/mediator.v1.HealthService/CheckHealth"
)

// HealthServiceClient is the client API for HealthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HealthServiceClient interface {
	CheckHealth(ctx context.Context, in *v1.CheckHealthRequest, opts ...grpc.CallOption) (*v1.CheckHealthResponse, error)
}

type healthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHealthServiceClient(cc grpc.ClientConnInterface) HealthServiceClient {
	return &healthServiceClient{cc}
}

func (c *healthServiceClient) CheckHealth(ctx context.Context, in *v1.CheckHealthRequest, opts ...grpc.CallOption) (*v1.CheckHealthResponse, error) {
	out := new(v1.CheckHealthResponse)
	err := c.cc.Invoke(ctx, HealthService_CheckHealth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HealthServiceServer is the server API for HealthService service.
// All implementations must embed UnimplementedHealthServiceServer
// for forward compatibility
type HealthServiceServer interface {
	CheckHealth(context.Context, *v1.CheckHealthRequest) (*v1.CheckHealthResponse, error)
	mustEmbedUnimplementedHealthServiceServer()
}

// UnimplementedHealthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHealthServiceServer struct {
}

func (UnimplementedHealthServiceServer) CheckHealth(context.Context, *v1.CheckHealthRequest) (*v1.CheckHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckHealth not implemented")
}
func (UnimplementedHealthServiceServer) mustEmbedUnimplementedHealthServiceServer() {}

// UnsafeHealthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HealthServiceServer will
// result in compilation errors.
type UnsafeHealthServiceServer interface {
	mustEmbedUnimplementedHealthServiceServer()
}

func RegisterHealthServiceServer(s grpc.ServiceRegistrar, srv HealthServiceServer) {
	s.RegisterService(&HealthService_ServiceDesc, srv)
}

func _HealthService_CheckHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.CheckHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServiceServer).CheckHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthService_CheckHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServiceServer).CheckHealth(ctx, req.(*v1.CheckHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HealthService_ServiceDesc is the grpc.ServiceDesc for HealthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HealthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mediator.v1.HealthService",
	HandlerType: (*HealthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckHealth",
			Handler:    _HealthService_CheckHealth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mediator/v1/mediator.proto",
}

const (
	ArtifactService_ListArtifacts_FullMethodName   = "/mediator.v1.ArtifactService/ListArtifacts"
	ArtifactService_GetArtifactById_FullMethodName = "/mediator.v1.ArtifactService/GetArtifactById"
)

// ArtifactServiceClient is the client API for ArtifactService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArtifactServiceClient interface {
	ListArtifacts(ctx context.Context, in *v1.ListArtifactsRequest, opts ...grpc.CallOption) (*v1.ListArtifactsResponse, error)
	GetArtifactById(ctx context.Context, in *v1.GetArtifactByIdRequest, opts ...grpc.CallOption) (*v1.GetArtifactByIdResponse, error)
}

type artifactServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArtifactServiceClient(cc grpc.ClientConnInterface) ArtifactServiceClient {
	return &artifactServiceClient{cc}
}

func (c *artifactServiceClient) ListArtifacts(ctx context.Context, in *v1.ListArtifactsRequest, opts ...grpc.CallOption) (*v1.ListArtifactsResponse, error) {
	out := new(v1.ListArtifactsResponse)
	err := c.cc.Invoke(ctx, ArtifactService_ListArtifacts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactServiceClient) GetArtifactById(ctx context.Context, in *v1.GetArtifactByIdRequest, opts ...grpc.CallOption) (*v1.GetArtifactByIdResponse, error) {
	out := new(v1.GetArtifactByIdResponse)
	err := c.cc.Invoke(ctx, ArtifactService_GetArtifactById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArtifactServiceServer is the server API for ArtifactService service.
// All implementations must embed UnimplementedArtifactServiceServer
// for forward compatibility
type ArtifactServiceServer interface {
	ListArtifacts(context.Context, *v1.ListArtifactsRequest) (*v1.ListArtifactsResponse, error)
	GetArtifactById(context.Context, *v1.GetArtifactByIdRequest) (*v1.GetArtifactByIdResponse, error)
	mustEmbedUnimplementedArtifactServiceServer()
}

// UnimplementedArtifactServiceServer must be embedded to have forward compatible implementations.
type UnimplementedArtifactServiceServer struct {
}

func (UnimplementedArtifactServiceServer) ListArtifacts(context.Context, *v1.ListArtifactsRequest) (*v1.ListArtifactsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArtifacts not implemented")
}
func (UnimplementedArtifactServiceServer) GetArtifactById(context.Context, *v1.GetArtifactByIdRequest) (*v1.GetArtifactByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtifactById not implemented")
}
func (UnimplementedArtifactServiceServer) mustEmbedUnimplementedArtifactServiceServer() {}

// UnsafeArtifactServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArtifactServiceServer will
// result in compilation errors.
type UnsafeArtifactServiceServer interface {
	mustEmbedUnimplementedArtifactServiceServer()
}

func RegisterArtifactServiceServer(s grpc.ServiceRegistrar, srv ArtifactServiceServer) {
	s.RegisterService(&ArtifactService_ServiceDesc, srv)
}

func _ArtifactService_ListArtifacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ListArtifactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactServiceServer).ListArtifacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactService_ListArtifacts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactServiceServer).ListArtifacts(ctx, req.(*v1.ListArtifactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactService_GetArtifactById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetArtifactByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactServiceServer).GetArtifactById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactService_GetArtifactById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactServiceServer).GetArtifactById(ctx, req.(*v1.GetArtifactByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ArtifactService_ServiceDesc is the grpc.ServiceDesc for ArtifactService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArtifactService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mediator.v1.ArtifactService",
	HandlerType: (*ArtifactServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListArtifacts",
			Handler:    _ArtifactService_ListArtifacts_Handler,
		},
		{
			MethodName: "GetArtifactById",
			Handler:    _ArtifactService_GetArtifactById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mediator/v1/mediator.proto",
}

const (
	OAuthService_GetAuthorizationURL_FullMethodName     = "/mediator.v1.OAuthService/GetAuthorizationURL"
	OAuthService_ExchangeCodeForTokenCLI_FullMethodName = "/mediator.v1.OAuthService/ExchangeCodeForTokenCLI"
	OAuthService_ExchangeCodeForTokenWEB_FullMethodName = "/mediator.v1.OAuthService/ExchangeCodeForTokenWEB"
	OAuthService_StoreProviderToken_FullMethodName      = "/mediator.v1.OAuthService/StoreProviderToken"
	OAuthService_RevokeOauthTokens_FullMethodName       = "/mediator.v1.OAuthService/RevokeOauthTokens"
	OAuthService_RevokeOauthProjectToken_FullMethodName = "/mediator.v1.OAuthService/RevokeOauthProjectToken"
	OAuthService_VerifyProviderTokenFrom_FullMethodName = "/mediator.v1.OAuthService/VerifyProviderTokenFrom"
)

// OAuthServiceClient is the client API for OAuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OAuthServiceClient interface {
	GetAuthorizationURL(ctx context.Context, in *v1.GetAuthorizationURLRequest, opts ...grpc.CallOption) (*v1.GetAuthorizationURLResponse, error)
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	ExchangeCodeForTokenCLI(ctx context.Context, in *v1.ExchangeCodeForTokenCLIRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	ExchangeCodeForTokenWEB(ctx context.Context, in *v1.ExchangeCodeForTokenWEBRequest, opts ...grpc.CallOption) (*v1.ExchangeCodeForTokenWEBResponse, error)
	StoreProviderToken(ctx context.Context, in *v1.StoreProviderTokenRequest, opts ...grpc.CallOption) (*v1.StoreProviderTokenResponse, error)
	// RevokeOauthTokens is used to revoke all tokens
	// this a nuclear option and should only be used in emergencies
	RevokeOauthTokens(ctx context.Context, in *v1.RevokeOauthTokensRequest, opts ...grpc.CallOption) (*v1.RevokeOauthTokensResponse, error)
	// revoke token for a project
	RevokeOauthProjectToken(ctx context.Context, in *v1.RevokeOauthProjectTokenRequest, opts ...grpc.CallOption) (*v1.RevokeOauthProjectTokenResponse, error)
	// VerifyProviderTokenFrom verifies that a token has been created for a provider since given timestamp
	VerifyProviderTokenFrom(ctx context.Context, in *v1.VerifyProviderTokenFromRequest, opts ...grpc.CallOption) (*v1.VerifyProviderTokenFromResponse, error)
}

type oAuthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOAuthServiceClient(cc grpc.ClientConnInterface) OAuthServiceClient {
	return &oAuthServiceClient{cc}
}

func (c *oAuthServiceClient) GetAuthorizationURL(ctx context.Context, in *v1.GetAuthorizationURLRequest, opts ...grpc.CallOption) (*v1.GetAuthorizationURLResponse, error) {
	out := new(v1.GetAuthorizationURLResponse)
	err := c.cc.Invoke(ctx, OAuthService_GetAuthorizationURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAuthServiceClient) ExchangeCodeForTokenCLI(ctx context.Context, in *v1.ExchangeCodeForTokenCLIRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, OAuthService_ExchangeCodeForTokenCLI_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAuthServiceClient) ExchangeCodeForTokenWEB(ctx context.Context, in *v1.ExchangeCodeForTokenWEBRequest, opts ...grpc.CallOption) (*v1.ExchangeCodeForTokenWEBResponse, error) {
	out := new(v1.ExchangeCodeForTokenWEBResponse)
	err := c.cc.Invoke(ctx, OAuthService_ExchangeCodeForTokenWEB_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAuthServiceClient) StoreProviderToken(ctx context.Context, in *v1.StoreProviderTokenRequest, opts ...grpc.CallOption) (*v1.StoreProviderTokenResponse, error) {
	out := new(v1.StoreProviderTokenResponse)
	err := c.cc.Invoke(ctx, OAuthService_StoreProviderToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAuthServiceClient) RevokeOauthTokens(ctx context.Context, in *v1.RevokeOauthTokensRequest, opts ...grpc.CallOption) (*v1.RevokeOauthTokensResponse, error) {
	out := new(v1.RevokeOauthTokensResponse)
	err := c.cc.Invoke(ctx, OAuthService_RevokeOauthTokens_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAuthServiceClient) RevokeOauthProjectToken(ctx context.Context, in *v1.RevokeOauthProjectTokenRequest, opts ...grpc.CallOption) (*v1.RevokeOauthProjectTokenResponse, error) {
	out := new(v1.RevokeOauthProjectTokenResponse)
	err := c.cc.Invoke(ctx, OAuthService_RevokeOauthProjectToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAuthServiceClient) VerifyProviderTokenFrom(ctx context.Context, in *v1.VerifyProviderTokenFromRequest, opts ...grpc.CallOption) (*v1.VerifyProviderTokenFromResponse, error) {
	out := new(v1.VerifyProviderTokenFromResponse)
	err := c.cc.Invoke(ctx, OAuthService_VerifyProviderTokenFrom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OAuthServiceServer is the server API for OAuthService service.
// All implementations must embed UnimplementedOAuthServiceServer
// for forward compatibility
type OAuthServiceServer interface {
	GetAuthorizationURL(context.Context, *v1.GetAuthorizationURLRequest) (*v1.GetAuthorizationURLResponse, error)
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	ExchangeCodeForTokenCLI(context.Context, *v1.ExchangeCodeForTokenCLIRequest) (*httpbody.HttpBody, error)
	ExchangeCodeForTokenWEB(context.Context, *v1.ExchangeCodeForTokenWEBRequest) (*v1.ExchangeCodeForTokenWEBResponse, error)
	StoreProviderToken(context.Context, *v1.StoreProviderTokenRequest) (*v1.StoreProviderTokenResponse, error)
	// RevokeOauthTokens is used to revoke all tokens
	// this a nuclear option and should only be used in emergencies
	RevokeOauthTokens(context.Context, *v1.RevokeOauthTokensRequest) (*v1.RevokeOauthTokensResponse, error)
	// revoke token for a project
	RevokeOauthProjectToken(context.Context, *v1.RevokeOauthProjectTokenRequest) (*v1.RevokeOauthProjectTokenResponse, error)
	// VerifyProviderTokenFrom verifies that a token has been created for a provider since given timestamp
	VerifyProviderTokenFrom(context.Context, *v1.VerifyProviderTokenFromRequest) (*v1.VerifyProviderTokenFromResponse, error)
	mustEmbedUnimplementedOAuthServiceServer()
}

// UnimplementedOAuthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOAuthServiceServer struct {
}

func (UnimplementedOAuthServiceServer) GetAuthorizationURL(context.Context, *v1.GetAuthorizationURLRequest) (*v1.GetAuthorizationURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthorizationURL not implemented")
}
func (UnimplementedOAuthServiceServer) ExchangeCodeForTokenCLI(context.Context, *v1.ExchangeCodeForTokenCLIRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeCodeForTokenCLI not implemented")
}
func (UnimplementedOAuthServiceServer) ExchangeCodeForTokenWEB(context.Context, *v1.ExchangeCodeForTokenWEBRequest) (*v1.ExchangeCodeForTokenWEBResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeCodeForTokenWEB not implemented")
}
func (UnimplementedOAuthServiceServer) StoreProviderToken(context.Context, *v1.StoreProviderTokenRequest) (*v1.StoreProviderTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreProviderToken not implemented")
}
func (UnimplementedOAuthServiceServer) RevokeOauthTokens(context.Context, *v1.RevokeOauthTokensRequest) (*v1.RevokeOauthTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeOauthTokens not implemented")
}
func (UnimplementedOAuthServiceServer) RevokeOauthProjectToken(context.Context, *v1.RevokeOauthProjectTokenRequest) (*v1.RevokeOauthProjectTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeOauthProjectToken not implemented")
}
func (UnimplementedOAuthServiceServer) VerifyProviderTokenFrom(context.Context, *v1.VerifyProviderTokenFromRequest) (*v1.VerifyProviderTokenFromResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyProviderTokenFrom not implemented")
}
func (UnimplementedOAuthServiceServer) mustEmbedUnimplementedOAuthServiceServer() {}

// UnsafeOAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OAuthServiceServer will
// result in compilation errors.
type UnsafeOAuthServiceServer interface {
	mustEmbedUnimplementedOAuthServiceServer()
}

func RegisterOAuthServiceServer(s grpc.ServiceRegistrar, srv OAuthServiceServer) {
	s.RegisterService(&OAuthService_ServiceDesc, srv)
}

func _OAuthService_GetAuthorizationURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetAuthorizationURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthServiceServer).GetAuthorizationURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OAuthService_GetAuthorizationURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthServiceServer).GetAuthorizationURL(ctx, req.(*v1.GetAuthorizationURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAuthService_ExchangeCodeForTokenCLI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ExchangeCodeForTokenCLIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthServiceServer).ExchangeCodeForTokenCLI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OAuthService_ExchangeCodeForTokenCLI_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthServiceServer).ExchangeCodeForTokenCLI(ctx, req.(*v1.ExchangeCodeForTokenCLIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAuthService_ExchangeCodeForTokenWEB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ExchangeCodeForTokenWEBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthServiceServer).ExchangeCodeForTokenWEB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OAuthService_ExchangeCodeForTokenWEB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthServiceServer).ExchangeCodeForTokenWEB(ctx, req.(*v1.ExchangeCodeForTokenWEBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAuthService_StoreProviderToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.StoreProviderTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthServiceServer).StoreProviderToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OAuthService_StoreProviderToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthServiceServer).StoreProviderToken(ctx, req.(*v1.StoreProviderTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAuthService_RevokeOauthTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.RevokeOauthTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthServiceServer).RevokeOauthTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OAuthService_RevokeOauthTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthServiceServer).RevokeOauthTokens(ctx, req.(*v1.RevokeOauthTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAuthService_RevokeOauthProjectToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.RevokeOauthProjectTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthServiceServer).RevokeOauthProjectToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OAuthService_RevokeOauthProjectToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthServiceServer).RevokeOauthProjectToken(ctx, req.(*v1.RevokeOauthProjectTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAuthService_VerifyProviderTokenFrom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.VerifyProviderTokenFromRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthServiceServer).VerifyProviderTokenFrom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OAuthService_VerifyProviderTokenFrom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthServiceServer).VerifyProviderTokenFrom(ctx, req.(*v1.VerifyProviderTokenFromRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OAuthService_ServiceDesc is the grpc.ServiceDesc for OAuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OAuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mediator.v1.OAuthService",
	HandlerType: (*OAuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAuthorizationURL",
			Handler:    _OAuthService_GetAuthorizationURL_Handler,
		},
		{
			MethodName: "ExchangeCodeForTokenCLI",
			Handler:    _OAuthService_ExchangeCodeForTokenCLI_Handler,
		},
		{
			MethodName: "ExchangeCodeForTokenWEB",
			Handler:    _OAuthService_ExchangeCodeForTokenWEB_Handler,
		},
		{
			MethodName: "StoreProviderToken",
			Handler:    _OAuthService_StoreProviderToken_Handler,
		},
		{
			MethodName: "RevokeOauthTokens",
			Handler:    _OAuthService_RevokeOauthTokens_Handler,
		},
		{
			MethodName: "RevokeOauthProjectToken",
			Handler:    _OAuthService_RevokeOauthProjectToken_Handler,
		},
		{
			MethodName: "VerifyProviderTokenFrom",
			Handler:    _OAuthService_VerifyProviderTokenFrom_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mediator/v1/mediator.proto",
}

const (
	RepositoryService_RegisterRepository_FullMethodName                 = "/mediator.v1.RepositoryService/RegisterRepository"
	RepositoryService_ListRemoteRepositoriesFromProvider_FullMethodName = "/mediator.v1.RepositoryService/ListRemoteRepositoriesFromProvider"
	RepositoryService_ListRepositories_FullMethodName                   = "/mediator.v1.RepositoryService/ListRepositories"
	RepositoryService_GetRepositoryById_FullMethodName                  = "/mediator.v1.RepositoryService/GetRepositoryById"
	RepositoryService_GetRepositoryByName_FullMethodName                = "/mediator.v1.RepositoryService/GetRepositoryByName"
)

// RepositoryServiceClient is the client API for RepositoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RepositoryServiceClient interface {
	RegisterRepository(ctx context.Context, in *v1.RegisterRepositoryRequest, opts ...grpc.CallOption) (*v1.RegisterRepositoryResponse, error)
	ListRemoteRepositoriesFromProvider(ctx context.Context, in *v1.ListRemoteRepositoriesFromProviderRequest, opts ...grpc.CallOption) (*v1.ListRemoteRepositoriesFromProviderResponse, error)
	ListRepositories(ctx context.Context, in *v1.ListRepositoriesRequest, opts ...grpc.CallOption) (*v1.ListRepositoriesResponse, error)
	GetRepositoryById(ctx context.Context, in *v1.GetRepositoryByIdRequest, opts ...grpc.CallOption) (*v1.GetRepositoryByIdResponse, error)
	GetRepositoryByName(ctx context.Context, in *v1.GetRepositoryByNameRequest, opts ...grpc.CallOption) (*v1.GetRepositoryByNameResponse, error)
}

type repositoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRepositoryServiceClient(cc grpc.ClientConnInterface) RepositoryServiceClient {
	return &repositoryServiceClient{cc}
}

func (c *repositoryServiceClient) RegisterRepository(ctx context.Context, in *v1.RegisterRepositoryRequest, opts ...grpc.CallOption) (*v1.RegisterRepositoryResponse, error) {
	out := new(v1.RegisterRepositoryResponse)
	err := c.cc.Invoke(ctx, RepositoryService_RegisterRepository_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) ListRemoteRepositoriesFromProvider(ctx context.Context, in *v1.ListRemoteRepositoriesFromProviderRequest, opts ...grpc.CallOption) (*v1.ListRemoteRepositoriesFromProviderResponse, error) {
	out := new(v1.ListRemoteRepositoriesFromProviderResponse)
	err := c.cc.Invoke(ctx, RepositoryService_ListRemoteRepositoriesFromProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) ListRepositories(ctx context.Context, in *v1.ListRepositoriesRequest, opts ...grpc.CallOption) (*v1.ListRepositoriesResponse, error) {
	out := new(v1.ListRepositoriesResponse)
	err := c.cc.Invoke(ctx, RepositoryService_ListRepositories_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) GetRepositoryById(ctx context.Context, in *v1.GetRepositoryByIdRequest, opts ...grpc.CallOption) (*v1.GetRepositoryByIdResponse, error) {
	out := new(v1.GetRepositoryByIdResponse)
	err := c.cc.Invoke(ctx, RepositoryService_GetRepositoryById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) GetRepositoryByName(ctx context.Context, in *v1.GetRepositoryByNameRequest, opts ...grpc.CallOption) (*v1.GetRepositoryByNameResponse, error) {
	out := new(v1.GetRepositoryByNameResponse)
	err := c.cc.Invoke(ctx, RepositoryService_GetRepositoryByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RepositoryServiceServer is the server API for RepositoryService service.
// All implementations must embed UnimplementedRepositoryServiceServer
// for forward compatibility
type RepositoryServiceServer interface {
	RegisterRepository(context.Context, *v1.RegisterRepositoryRequest) (*v1.RegisterRepositoryResponse, error)
	ListRemoteRepositoriesFromProvider(context.Context, *v1.ListRemoteRepositoriesFromProviderRequest) (*v1.ListRemoteRepositoriesFromProviderResponse, error)
	ListRepositories(context.Context, *v1.ListRepositoriesRequest) (*v1.ListRepositoriesResponse, error)
	GetRepositoryById(context.Context, *v1.GetRepositoryByIdRequest) (*v1.GetRepositoryByIdResponse, error)
	GetRepositoryByName(context.Context, *v1.GetRepositoryByNameRequest) (*v1.GetRepositoryByNameResponse, error)
	mustEmbedUnimplementedRepositoryServiceServer()
}

// UnimplementedRepositoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRepositoryServiceServer struct {
}

func (UnimplementedRepositoryServiceServer) RegisterRepository(context.Context, *v1.RegisterRepositoryRequest) (*v1.RegisterRepositoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterRepository not implemented")
}
func (UnimplementedRepositoryServiceServer) ListRemoteRepositoriesFromProvider(context.Context, *v1.ListRemoteRepositoriesFromProviderRequest) (*v1.ListRemoteRepositoriesFromProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRemoteRepositoriesFromProvider not implemented")
}
func (UnimplementedRepositoryServiceServer) ListRepositories(context.Context, *v1.ListRepositoriesRequest) (*v1.ListRepositoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRepositories not implemented")
}
func (UnimplementedRepositoryServiceServer) GetRepositoryById(context.Context, *v1.GetRepositoryByIdRequest) (*v1.GetRepositoryByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepositoryById not implemented")
}
func (UnimplementedRepositoryServiceServer) GetRepositoryByName(context.Context, *v1.GetRepositoryByNameRequest) (*v1.GetRepositoryByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepositoryByName not implemented")
}
func (UnimplementedRepositoryServiceServer) mustEmbedUnimplementedRepositoryServiceServer() {}

// UnsafeRepositoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RepositoryServiceServer will
// result in compilation errors.
type UnsafeRepositoryServiceServer interface {
	mustEmbedUnimplementedRepositoryServiceServer()
}

func RegisterRepositoryServiceServer(s grpc.ServiceRegistrar, srv RepositoryServiceServer) {
	s.RegisterService(&RepositoryService_ServiceDesc, srv)
}

func _RepositoryService_RegisterRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.RegisterRepositoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).RegisterRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepositoryService_RegisterRepository_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).RegisterRepository(ctx, req.(*v1.RegisterRepositoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_ListRemoteRepositoriesFromProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ListRemoteRepositoriesFromProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).ListRemoteRepositoriesFromProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepositoryService_ListRemoteRepositoriesFromProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).ListRemoteRepositoriesFromProvider(ctx, req.(*v1.ListRemoteRepositoriesFromProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_ListRepositories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ListRepositoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).ListRepositories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepositoryService_ListRepositories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).ListRepositories(ctx, req.(*v1.ListRepositoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_GetRepositoryById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetRepositoryByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).GetRepositoryById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepositoryService_GetRepositoryById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).GetRepositoryById(ctx, req.(*v1.GetRepositoryByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_GetRepositoryByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetRepositoryByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).GetRepositoryByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepositoryService_GetRepositoryByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).GetRepositoryByName(ctx, req.(*v1.GetRepositoryByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RepositoryService_ServiceDesc is the grpc.ServiceDesc for RepositoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RepositoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mediator.v1.RepositoryService",
	HandlerType: (*RepositoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterRepository",
			Handler:    _RepositoryService_RegisterRepository_Handler,
		},
		{
			MethodName: "ListRemoteRepositoriesFromProvider",
			Handler:    _RepositoryService_ListRemoteRepositoriesFromProvider_Handler,
		},
		{
			MethodName: "ListRepositories",
			Handler:    _RepositoryService_ListRepositories_Handler,
		},
		{
			MethodName: "GetRepositoryById",
			Handler:    _RepositoryService_GetRepositoryById_Handler,
		},
		{
			MethodName: "GetRepositoryByName",
			Handler:    _RepositoryService_GetRepositoryByName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mediator/v1/mediator.proto",
}

const (
	BranchProtectionService_GetBranchProtection_FullMethodName = "/mediator.v1.BranchProtectionService/GetBranchProtection"
)

// BranchProtectionServiceClient is the client API for BranchProtectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BranchProtectionServiceClient interface {
	GetBranchProtection(ctx context.Context, in *v1.GetBranchProtectionRequest, opts ...grpc.CallOption) (*v1.GetBranchProtectionResponse, error)
}

type branchProtectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBranchProtectionServiceClient(cc grpc.ClientConnInterface) BranchProtectionServiceClient {
	return &branchProtectionServiceClient{cc}
}

func (c *branchProtectionServiceClient) GetBranchProtection(ctx context.Context, in *v1.GetBranchProtectionRequest, opts ...grpc.CallOption) (*v1.GetBranchProtectionResponse, error) {
	out := new(v1.GetBranchProtectionResponse)
	err := c.cc.Invoke(ctx, BranchProtectionService_GetBranchProtection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BranchProtectionServiceServer is the server API for BranchProtectionService service.
// All implementations must embed UnimplementedBranchProtectionServiceServer
// for forward compatibility
type BranchProtectionServiceServer interface {
	GetBranchProtection(context.Context, *v1.GetBranchProtectionRequest) (*v1.GetBranchProtectionResponse, error)
	mustEmbedUnimplementedBranchProtectionServiceServer()
}

// UnimplementedBranchProtectionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBranchProtectionServiceServer struct {
}

func (UnimplementedBranchProtectionServiceServer) GetBranchProtection(context.Context, *v1.GetBranchProtectionRequest) (*v1.GetBranchProtectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBranchProtection not implemented")
}
func (UnimplementedBranchProtectionServiceServer) mustEmbedUnimplementedBranchProtectionServiceServer() {
}

// UnsafeBranchProtectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BranchProtectionServiceServer will
// result in compilation errors.
type UnsafeBranchProtectionServiceServer interface {
	mustEmbedUnimplementedBranchProtectionServiceServer()
}

func RegisterBranchProtectionServiceServer(s grpc.ServiceRegistrar, srv BranchProtectionServiceServer) {
	s.RegisterService(&BranchProtectionService_ServiceDesc, srv)
}

func _BranchProtectionService_GetBranchProtection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetBranchProtectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchProtectionServiceServer).GetBranchProtection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BranchProtectionService_GetBranchProtection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchProtectionServiceServer).GetBranchProtection(ctx, req.(*v1.GetBranchProtectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BranchProtectionService_ServiceDesc is the grpc.ServiceDesc for BranchProtectionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BranchProtectionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mediator.v1.BranchProtectionService",
	HandlerType: (*BranchProtectionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBranchProtection",
			Handler:    _BranchProtectionService_GetBranchProtection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mediator/v1/mediator.proto",
}

const (
	UserService_CreateUser_FullMethodName = "/mediator.v1.UserService/CreateUser"
	UserService_DeleteUser_FullMethodName = "/mediator.v1.UserService/DeleteUser"
	UserService_GetUser_FullMethodName    = "/mediator.v1.UserService/GetUser"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	CreateUser(ctx context.Context, in *v1.CreateUserRequest, opts ...grpc.CallOption) (*v1.CreateUserResponse, error)
	DeleteUser(ctx context.Context, in *v1.DeleteUserRequest, opts ...grpc.CallOption) (*v1.DeleteUserResponse, error)
	GetUser(ctx context.Context, in *v1.GetUserRequest, opts ...grpc.CallOption) (*v1.GetUserResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) CreateUser(ctx context.Context, in *v1.CreateUserRequest, opts ...grpc.CallOption) (*v1.CreateUserResponse, error) {
	out := new(v1.CreateUserResponse)
	err := c.cc.Invoke(ctx, UserService_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteUser(ctx context.Context, in *v1.DeleteUserRequest, opts ...grpc.CallOption) (*v1.DeleteUserResponse, error) {
	out := new(v1.DeleteUserResponse)
	err := c.cc.Invoke(ctx, UserService_DeleteUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUser(ctx context.Context, in *v1.GetUserRequest, opts ...grpc.CallOption) (*v1.GetUserResponse, error) {
	out := new(v1.GetUserResponse)
	err := c.cc.Invoke(ctx, UserService_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	CreateUser(context.Context, *v1.CreateUserRequest) (*v1.CreateUserResponse, error)
	DeleteUser(context.Context, *v1.DeleteUserRequest) (*v1.DeleteUserResponse, error)
	GetUser(context.Context, *v1.GetUserRequest) (*v1.GetUserResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) CreateUser(context.Context, *v1.CreateUserRequest) (*v1.CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserServiceServer) DeleteUser(context.Context, *v1.DeleteUserRequest) (*v1.DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUserServiceServer) GetUser(context.Context, *v1.GetUserRequest) (*v1.GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateUser(ctx, req.(*v1.CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteUser(ctx, req.(*v1.DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUser(ctx, req.(*v1.GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mediator.v1.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _UserService_CreateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserService_DeleteUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UserService_GetUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mediator/v1/mediator.proto",
}

const (
	ProfileService_CreateProfile_FullMethodName             = "/mediator.v1.ProfileService/CreateProfile"
	ProfileService_DeleteProfile_FullMethodName             = "/mediator.v1.ProfileService/DeleteProfile"
	ProfileService_ListProfiles_FullMethodName              = "/mediator.v1.ProfileService/ListProfiles"
	ProfileService_GetProfileById_FullMethodName            = "/mediator.v1.ProfileService/GetProfileById"
	ProfileService_GetProfileStatusByName_FullMethodName    = "/mediator.v1.ProfileService/GetProfileStatusByName"
	ProfileService_GetProfileStatusByProject_FullMethodName = "/mediator.v1.ProfileService/GetProfileStatusByProject"
	ProfileService_ListRuleTypes_FullMethodName             = "/mediator.v1.ProfileService/ListRuleTypes"
	ProfileService_GetRuleTypeByName_FullMethodName         = "/mediator.v1.ProfileService/GetRuleTypeByName"
	ProfileService_GetRuleTypeById_FullMethodName           = "/mediator.v1.ProfileService/GetRuleTypeById"
	ProfileService_CreateRuleType_FullMethodName            = "/mediator.v1.ProfileService/CreateRuleType"
	ProfileService_UpdateRuleType_FullMethodName            = "/mediator.v1.ProfileService/UpdateRuleType"
	ProfileService_DeleteRuleType_FullMethodName            = "/mediator.v1.ProfileService/DeleteRuleType"
)

// ProfileServiceClient is the client API for ProfileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProfileServiceClient interface {
	CreateProfile(ctx context.Context, in *v1.CreateProfileRequest, opts ...grpc.CallOption) (*v1.CreateProfileResponse, error)
	DeleteProfile(ctx context.Context, in *v1.DeleteProfileRequest, opts ...grpc.CallOption) (*v1.DeleteProfileResponse, error)
	ListProfiles(ctx context.Context, in *v1.ListProfilesRequest, opts ...grpc.CallOption) (*v1.ListProfilesResponse, error)
	GetProfileById(ctx context.Context, in *v1.GetProfileByIdRequest, opts ...grpc.CallOption) (*v1.GetProfileByIdResponse, error)
	GetProfileStatusByName(ctx context.Context, in *v1.GetProfileStatusByNameRequest, opts ...grpc.CallOption) (*v1.GetProfileStatusByNameResponse, error)
	GetProfileStatusByProject(ctx context.Context, in *v1.GetProfileStatusByProjectRequest, opts ...grpc.CallOption) (*v1.GetProfileStatusByProjectResponse, error)
	ListRuleTypes(ctx context.Context, in *v1.ListRuleTypesRequest, opts ...grpc.CallOption) (*v1.ListRuleTypesResponse, error)
	GetRuleTypeByName(ctx context.Context, in *v1.GetRuleTypeByNameRequest, opts ...grpc.CallOption) (*v1.GetRuleTypeByNameResponse, error)
	GetRuleTypeById(ctx context.Context, in *v1.GetRuleTypeByIdRequest, opts ...grpc.CallOption) (*v1.GetRuleTypeByIdResponse, error)
	CreateRuleType(ctx context.Context, in *v1.CreateRuleTypeRequest, opts ...grpc.CallOption) (*v1.CreateRuleTypeResponse, error)
	UpdateRuleType(ctx context.Context, in *v1.UpdateRuleTypeRequest, opts ...grpc.CallOption) (*v1.UpdateRuleTypeResponse, error)
	DeleteRuleType(ctx context.Context, in *v1.DeleteRuleTypeRequest, opts ...grpc.CallOption) (*v1.DeleteRuleTypeResponse, error)
}

type profileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProfileServiceClient(cc grpc.ClientConnInterface) ProfileServiceClient {
	return &profileServiceClient{cc}
}

func (c *profileServiceClient) CreateProfile(ctx context.Context, in *v1.CreateProfileRequest, opts ...grpc.CallOption) (*v1.CreateProfileResponse, error) {
	out := new(v1.CreateProfileResponse)
	err := c.cc.Invoke(ctx, ProfileService_CreateProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) DeleteProfile(ctx context.Context, in *v1.DeleteProfileRequest, opts ...grpc.CallOption) (*v1.DeleteProfileResponse, error) {
	out := new(v1.DeleteProfileResponse)
	err := c.cc.Invoke(ctx, ProfileService_DeleteProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) ListProfiles(ctx context.Context, in *v1.ListProfilesRequest, opts ...grpc.CallOption) (*v1.ListProfilesResponse, error) {
	out := new(v1.ListProfilesResponse)
	err := c.cc.Invoke(ctx, ProfileService_ListProfiles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetProfileById(ctx context.Context, in *v1.GetProfileByIdRequest, opts ...grpc.CallOption) (*v1.GetProfileByIdResponse, error) {
	out := new(v1.GetProfileByIdResponse)
	err := c.cc.Invoke(ctx, ProfileService_GetProfileById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetProfileStatusByName(ctx context.Context, in *v1.GetProfileStatusByNameRequest, opts ...grpc.CallOption) (*v1.GetProfileStatusByNameResponse, error) {
	out := new(v1.GetProfileStatusByNameResponse)
	err := c.cc.Invoke(ctx, ProfileService_GetProfileStatusByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetProfileStatusByProject(ctx context.Context, in *v1.GetProfileStatusByProjectRequest, opts ...grpc.CallOption) (*v1.GetProfileStatusByProjectResponse, error) {
	out := new(v1.GetProfileStatusByProjectResponse)
	err := c.cc.Invoke(ctx, ProfileService_GetProfileStatusByProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) ListRuleTypes(ctx context.Context, in *v1.ListRuleTypesRequest, opts ...grpc.CallOption) (*v1.ListRuleTypesResponse, error) {
	out := new(v1.ListRuleTypesResponse)
	err := c.cc.Invoke(ctx, ProfileService_ListRuleTypes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetRuleTypeByName(ctx context.Context, in *v1.GetRuleTypeByNameRequest, opts ...grpc.CallOption) (*v1.GetRuleTypeByNameResponse, error) {
	out := new(v1.GetRuleTypeByNameResponse)
	err := c.cc.Invoke(ctx, ProfileService_GetRuleTypeByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetRuleTypeById(ctx context.Context, in *v1.GetRuleTypeByIdRequest, opts ...grpc.CallOption) (*v1.GetRuleTypeByIdResponse, error) {
	out := new(v1.GetRuleTypeByIdResponse)
	err := c.cc.Invoke(ctx, ProfileService_GetRuleTypeById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) CreateRuleType(ctx context.Context, in *v1.CreateRuleTypeRequest, opts ...grpc.CallOption) (*v1.CreateRuleTypeResponse, error) {
	out := new(v1.CreateRuleTypeResponse)
	err := c.cc.Invoke(ctx, ProfileService_CreateRuleType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) UpdateRuleType(ctx context.Context, in *v1.UpdateRuleTypeRequest, opts ...grpc.CallOption) (*v1.UpdateRuleTypeResponse, error) {
	out := new(v1.UpdateRuleTypeResponse)
	err := c.cc.Invoke(ctx, ProfileService_UpdateRuleType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) DeleteRuleType(ctx context.Context, in *v1.DeleteRuleTypeRequest, opts ...grpc.CallOption) (*v1.DeleteRuleTypeResponse, error) {
	out := new(v1.DeleteRuleTypeResponse)
	err := c.cc.Invoke(ctx, ProfileService_DeleteRuleType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProfileServiceServer is the server API for ProfileService service.
// All implementations must embed UnimplementedProfileServiceServer
// for forward compatibility
type ProfileServiceServer interface {
	CreateProfile(context.Context, *v1.CreateProfileRequest) (*v1.CreateProfileResponse, error)
	DeleteProfile(context.Context, *v1.DeleteProfileRequest) (*v1.DeleteProfileResponse, error)
	ListProfiles(context.Context, *v1.ListProfilesRequest) (*v1.ListProfilesResponse, error)
	GetProfileById(context.Context, *v1.GetProfileByIdRequest) (*v1.GetProfileByIdResponse, error)
	GetProfileStatusByName(context.Context, *v1.GetProfileStatusByNameRequest) (*v1.GetProfileStatusByNameResponse, error)
	GetProfileStatusByProject(context.Context, *v1.GetProfileStatusByProjectRequest) (*v1.GetProfileStatusByProjectResponse, error)
	ListRuleTypes(context.Context, *v1.ListRuleTypesRequest) (*v1.ListRuleTypesResponse, error)
	GetRuleTypeByName(context.Context, *v1.GetRuleTypeByNameRequest) (*v1.GetRuleTypeByNameResponse, error)
	GetRuleTypeById(context.Context, *v1.GetRuleTypeByIdRequest) (*v1.GetRuleTypeByIdResponse, error)
	CreateRuleType(context.Context, *v1.CreateRuleTypeRequest) (*v1.CreateRuleTypeResponse, error)
	UpdateRuleType(context.Context, *v1.UpdateRuleTypeRequest) (*v1.UpdateRuleTypeResponse, error)
	DeleteRuleType(context.Context, *v1.DeleteRuleTypeRequest) (*v1.DeleteRuleTypeResponse, error)
	mustEmbedUnimplementedProfileServiceServer()
}

// UnimplementedProfileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProfileServiceServer struct {
}

func (UnimplementedProfileServiceServer) CreateProfile(context.Context, *v1.CreateProfileRequest) (*v1.CreateProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProfile not implemented")
}
func (UnimplementedProfileServiceServer) DeleteProfile(context.Context, *v1.DeleteProfileRequest) (*v1.DeleteProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProfile not implemented")
}
func (UnimplementedProfileServiceServer) ListProfiles(context.Context, *v1.ListProfilesRequest) (*v1.ListProfilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProfiles not implemented")
}
func (UnimplementedProfileServiceServer) GetProfileById(context.Context, *v1.GetProfileByIdRequest) (*v1.GetProfileByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfileById not implemented")
}
func (UnimplementedProfileServiceServer) GetProfileStatusByName(context.Context, *v1.GetProfileStatusByNameRequest) (*v1.GetProfileStatusByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfileStatusByName not implemented")
}
func (UnimplementedProfileServiceServer) GetProfileStatusByProject(context.Context, *v1.GetProfileStatusByProjectRequest) (*v1.GetProfileStatusByProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfileStatusByProject not implemented")
}
func (UnimplementedProfileServiceServer) ListRuleTypes(context.Context, *v1.ListRuleTypesRequest) (*v1.ListRuleTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRuleTypes not implemented")
}
func (UnimplementedProfileServiceServer) GetRuleTypeByName(context.Context, *v1.GetRuleTypeByNameRequest) (*v1.GetRuleTypeByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRuleTypeByName not implemented")
}
func (UnimplementedProfileServiceServer) GetRuleTypeById(context.Context, *v1.GetRuleTypeByIdRequest) (*v1.GetRuleTypeByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRuleTypeById not implemented")
}
func (UnimplementedProfileServiceServer) CreateRuleType(context.Context, *v1.CreateRuleTypeRequest) (*v1.CreateRuleTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRuleType not implemented")
}
func (UnimplementedProfileServiceServer) UpdateRuleType(context.Context, *v1.UpdateRuleTypeRequest) (*v1.UpdateRuleTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRuleType not implemented")
}
func (UnimplementedProfileServiceServer) DeleteRuleType(context.Context, *v1.DeleteRuleTypeRequest) (*v1.DeleteRuleTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRuleType not implemented")
}
func (UnimplementedProfileServiceServer) mustEmbedUnimplementedProfileServiceServer() {}

// UnsafeProfileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProfileServiceServer will
// result in compilation errors.
type UnsafeProfileServiceServer interface {
	mustEmbedUnimplementedProfileServiceServer()
}

func RegisterProfileServiceServer(s grpc.ServiceRegistrar, srv ProfileServiceServer) {
	s.RegisterService(&ProfileService_ServiceDesc, srv)
}

func _ProfileService_CreateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.CreateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).CreateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_CreateProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).CreateProfile(ctx, req.(*v1.CreateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_DeleteProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.DeleteProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).DeleteProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_DeleteProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).DeleteProfile(ctx, req.(*v1.DeleteProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_ListProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ListProfilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).ListProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_ListProfiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).ListProfiles(ctx, req.(*v1.ListProfilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetProfileById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetProfileByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetProfileById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_GetProfileById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetProfileById(ctx, req.(*v1.GetProfileByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetProfileStatusByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetProfileStatusByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetProfileStatusByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_GetProfileStatusByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetProfileStatusByName(ctx, req.(*v1.GetProfileStatusByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetProfileStatusByProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetProfileStatusByProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetProfileStatusByProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_GetProfileStatusByProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetProfileStatusByProject(ctx, req.(*v1.GetProfileStatusByProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_ListRuleTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ListRuleTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).ListRuleTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_ListRuleTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).ListRuleTypes(ctx, req.(*v1.ListRuleTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetRuleTypeByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetRuleTypeByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetRuleTypeByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_GetRuleTypeByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetRuleTypeByName(ctx, req.(*v1.GetRuleTypeByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetRuleTypeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetRuleTypeByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetRuleTypeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_GetRuleTypeById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetRuleTypeById(ctx, req.(*v1.GetRuleTypeByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_CreateRuleType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.CreateRuleTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).CreateRuleType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_CreateRuleType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).CreateRuleType(ctx, req.(*v1.CreateRuleTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_UpdateRuleType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.UpdateRuleTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).UpdateRuleType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_UpdateRuleType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).UpdateRuleType(ctx, req.(*v1.UpdateRuleTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_DeleteRuleType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.DeleteRuleTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).DeleteRuleType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_DeleteRuleType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).DeleteRuleType(ctx, req.(*v1.DeleteRuleTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProfileService_ServiceDesc is the grpc.ServiceDesc for ProfileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProfileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mediator.v1.ProfileService",
	HandlerType: (*ProfileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProfile",
			Handler:    _ProfileService_CreateProfile_Handler,
		},
		{
			MethodName: "DeleteProfile",
			Handler:    _ProfileService_DeleteProfile_Handler,
		},
		{
			MethodName: "ListProfiles",
			Handler:    _ProfileService_ListProfiles_Handler,
		},
		{
			MethodName: "GetProfileById",
			Handler:    _ProfileService_GetProfileById_Handler,
		},
		{
			MethodName: "GetProfileStatusByName",
			Handler:    _ProfileService_GetProfileStatusByName_Handler,
		},
		{
			MethodName: "GetProfileStatusByProject",
			Handler:    _ProfileService_GetProfileStatusByProject_Handler,
		},
		{
			MethodName: "ListRuleTypes",
			Handler:    _ProfileService_ListRuleTypes_Handler,
		},
		{
			MethodName: "GetRuleTypeByName",
			Handler:    _ProfileService_GetRuleTypeByName_Handler,
		},
		{
			MethodName: "GetRuleTypeById",
			Handler:    _ProfileService_GetRuleTypeById_Handler,
		},
		{
			MethodName: "CreateRuleType",
			Handler:    _ProfileService_CreateRuleType_Handler,
		},
		{
			MethodName: "UpdateRuleType",
			Handler:    _ProfileService_UpdateRuleType_Handler,
		},
		{
			MethodName: "DeleteRuleType",
			Handler:    _ProfileService_DeleteRuleType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mediator/v1/mediator.proto",
}

const (
	KeyService_GetPublicKey_FullMethodName  = "/mediator.v1.KeyService/GetPublicKey"
	KeyService_CreateKeyPair_FullMethodName = "/mediator.v1.KeyService/CreateKeyPair"
)

// KeyServiceClient is the client API for KeyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeyServiceClient interface {
	GetPublicKey(ctx context.Context, in *v1.GetPublicKeyRequest, opts ...grpc.CallOption) (*v1.GetPublicKeyResponse, error)
	CreateKeyPair(ctx context.Context, in *v1.CreateKeyPairRequest, opts ...grpc.CallOption) (*v1.CreateKeyPairResponse, error)
}

type keyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKeyServiceClient(cc grpc.ClientConnInterface) KeyServiceClient {
	return &keyServiceClient{cc}
}

func (c *keyServiceClient) GetPublicKey(ctx context.Context, in *v1.GetPublicKeyRequest, opts ...grpc.CallOption) (*v1.GetPublicKeyResponse, error) {
	out := new(v1.GetPublicKeyResponse)
	err := c.cc.Invoke(ctx, KeyService_GetPublicKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyServiceClient) CreateKeyPair(ctx context.Context, in *v1.CreateKeyPairRequest, opts ...grpc.CallOption) (*v1.CreateKeyPairResponse, error) {
	out := new(v1.CreateKeyPairResponse)
	err := c.cc.Invoke(ctx, KeyService_CreateKeyPair_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyServiceServer is the server API for KeyService service.
// All implementations must embed UnimplementedKeyServiceServer
// for forward compatibility
type KeyServiceServer interface {
	GetPublicKey(context.Context, *v1.GetPublicKeyRequest) (*v1.GetPublicKeyResponse, error)
	CreateKeyPair(context.Context, *v1.CreateKeyPairRequest) (*v1.CreateKeyPairResponse, error)
	mustEmbedUnimplementedKeyServiceServer()
}

// UnimplementedKeyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKeyServiceServer struct {
}

func (UnimplementedKeyServiceServer) GetPublicKey(context.Context, *v1.GetPublicKeyRequest) (*v1.GetPublicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicKey not implemented")
}
func (UnimplementedKeyServiceServer) CreateKeyPair(context.Context, *v1.CreateKeyPairRequest) (*v1.CreateKeyPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKeyPair not implemented")
}
func (UnimplementedKeyServiceServer) mustEmbedUnimplementedKeyServiceServer() {}

// UnsafeKeyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeyServiceServer will
// result in compilation errors.
type UnsafeKeyServiceServer interface {
	mustEmbedUnimplementedKeyServiceServer()
}

func RegisterKeyServiceServer(s grpc.ServiceRegistrar, srv KeyServiceServer) {
	s.RegisterService(&KeyService_ServiceDesc, srv)
}

func _KeyService_GetPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetPublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyServiceServer).GetPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyService_GetPublicKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyServiceServer).GetPublicKey(ctx, req.(*v1.GetPublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyService_CreateKeyPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.CreateKeyPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyServiceServer).CreateKeyPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyService_CreateKeyPair_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyServiceServer).CreateKeyPair(ctx, req.(*v1.CreateKeyPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KeyService_ServiceDesc is the grpc.ServiceDesc for KeyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mediator.v1.KeyService",
	HandlerType: (*KeyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPublicKey",
			Handler:    _KeyService_GetPublicKey_Handler,
		},
		{
			MethodName: "CreateKeyPair",
			Handler:    _KeyService_CreateKeyPair_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mediator/v1/mediator.proto",
}
